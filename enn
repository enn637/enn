import com.nttdocomo.ui.*;

	

public class App extends IApplication{

//-------------------------------------------------------------------------------------------------------
	//アプリの開始
	public void start(){
		MainCav myObj = new MainCav();
		
		//myObj.setSoftLabel(myObj.SOFT_KEY_1, "メニュー");
		
		Display.setCurrent(myObj);
		
		
		//myObj.stApp();
		
	}
	
//-------------------------------------------------------------------------------------------------------
	
}
import com.nttdocomo.ui.*;

public class Chara implements Common{

	//キャラクターのイメージ
	//private MediaImage Mimage;
	public static Image[] image = new Image[3];
	
	//public String name;		//キャラの名前
	
    // キャラクターの座標
    private int x, y;		//セル単位
    private int px, py;	//ピクセル単位
    
    private int isMoving;		//1ならキャラ移動中（セルとセルの間を移動中
    private int movingLenght;	//移動中の場合の移動ピクセル数
    
    
    public int[] charaNo = new int[4];//キャラクタごとの番号
    private int[] direc = new int[4];// キャラクターの向いている方向（LEFT,RIGHT,UP,DOWNのどれか）
    private int[] moveType = new int[4];	//移動タイプ
    public int[] SPEED = new int[4];		//キャラクタ移動スピード
 
    //話すメッセージ
    private String[] msg = new String[4];
    
    //--------------------------------------------
    public static final double PROB_MOVE = 0.02;	//移動確率
    
    //--------------------------------------------
    // キャラクターのアニメーションカウンタ
    private int count;	
    
    // キャラクターアニメーション用スレッド
    private Thread ThAnim;
    public int runnning;
    //---------------------------------------------
    // マップへの参照
    private Map m;
    
    //フラグ関係------------------------------------
    private int[] flg = new int[3];		//フラグ
    public int actPage;	//フラグによってアクティブになっているページ

    
//-------------------------------------------------------------------------------------------------------		
    public Chara(int x, int y, int charaNo, int dir, int moveType, Map m, int speed,
    		int flg1, int charaNo2, int direction2, int moveType2, int speed2,
    		int flg2, int charaNo3, int direction3, int moveType3, int speed3,
    		int flg3, int charaNo4, int direction4, int moveType4, int speed4){
    	
        this.x = x;
        this.y = y;
        px = x * CHA_SIZE;
        py = y * CHA_SIZE;
        //this.name = name;
        
        this.charaNo[0] = charaNo;
        this.direc[0] = dir;
        this.SPEED[0] = speed;
        this.moveType[0] = moveType;
        
        this.flg[0] = flg1;
        this.charaNo[1] = charaNo2;
        this.direc[1] = direction2;
        this.SPEED[1] = speed2;
        this.moveType[1] = moveType2;
        
        this.flg[1] = flg2;
        this.charaNo[2] = charaNo3;
        this.direc[2] = direction3;
        this.SPEED[2] = speed3;
        this.moveType[2] = moveType3;
        
        this.flg[2] = flg3;
        this.charaNo[3] = charaNo4;
        this.direc[3] = direction4;
        this.SPEED[3] = speed4;
        this.moveType[3] = moveType4;
        
        CheckFlg();
        
        	
        isMoving = 0;
        count = 0;
        
        this.m = m;
        //Chara.m = m;
        
        /*
        // イメージをロード（初回の呼び出しのみ
        if(image[0] == null){
        	try{
        		Mimage = MediaManager.getImage("resource:///chara0.gif");
        		Mimage.use();
        		image[0] = Mimage.getImage();
        		Mimage = MediaManager.getImage("resource:///chara1.gif");
        		Mimage.use();
        		image[1] = Mimage.getImage();
        		Mimage = MediaManager.getImage("resource:///chara2.gif");
        		Mimage.use();
        		image[2] = Mimage.getImage();
        	}catch(Exception e){
        		System.out.println("例外が発生しました。処理を終了します。");
        		return;
        	}
        }
        */

        //キャラクターアニメーション用スレッド開始
		ThAnim = new Thread(new AnimThread());
		runnning = 1;
		ThAnim.start();
		
    }
    
//-------------------------------------------------------------------------------------------------------		
    public void Draw(Graphics g, int offsetX, int offsetY) {
    	
    	int cx = ((charaNo[actPage] - (charaNo[actPage] / 18 * 18)) % 6) * (CHA_SIZE * 2);
    	int cy = ((charaNo[actPage] - (charaNo[actPage] / 18 * 18)) / 6) * (CHA_SIZE * 4);

    	if((px - offsetX > - CHA_SIZE) && (py - offsetY > - CHA_SIZE) &&
    			(px - offsetX < Cmn.WIDTH) && (py - offsetY < Cmn.HEIGHT)){
		g.drawImage(image[charaNo[actPage] / 18], px - offsetX, py - offsetY,
				cx + count * CHA_SIZE, cy + direc[actPage] * CHA_SIZE, CHA_SIZE, CHA_SIZE);
    	}
		
    }
    
//-------------------------------------------------------------------------------------------------------		 
    public int Move() {
        // dirの方向でぶつからなければ移動する
    	//移動が完了すると1を返す
    	
    	int nextX, nextY;	//移動先セルの座標（障害物判定に使用

    	switch(direc[actPage]){
    	case LEFT:
    		
    		nextX = x - 1;
    		nextY = y;
    		if(nextX < 0) nextX = 0;
    		
    		//その場所に障害物がなければ移動
    		if(m.IsHit(nextX, nextY) == 0){
    			//SPEED分移動
    			px -= this.SPEED[actPage];
    			if(px < 0) px = 0;
    			
    			//移動距離を加算
    			movingLenght += this.SPEED[actPage];
    			
    			//移動が1セル分を超えていたら
    			if(movingLenght >= CHA_SIZE){
    				//セル座標を移動
    				x--;
    				if(x < 0) x = 0;
    				px = x * CHA_SIZE;
    				
    				//移動が完了
    				isMoving = 0;
    				return 1;
    			}
    			
    		}else{
    			isMoving = 0;
    			//元の位置に戻す
    			px = x * CHA_SIZE;
    			py = y * CHA_SIZE;
    		}
    		break;
    		
    	case RIGHT:
    		nextX = x + 1;
    		nextY = y;
    		if(nextX > m.mCol - 1) nextX = m.mCol - 1;
    		
    		//その場所に障害物がなければ移動
    		if(m.IsHit(nextX, nextY) == 0){
    			//SPEED分移動
    			px += this.SPEED[actPage];
    			if(px > m.Width -CHA_SIZE) px = m.Width -CHA_SIZE;
    			
    			//移動距離を加算
    			movingLenght += this.SPEED[actPage];
    			
    			//移動が1セル分を超えていたら
    			if(movingLenght >= CHA_SIZE){
    				//セル座標を移動
    				x++;
    				if(x > m.mCol - 1) x = m.mCol - 1;
    				px = x * CHA_SIZE;
    				
    				//移動が完了
    				isMoving = 0;
    				return 1;
    			}
    			
    		}else{
    			isMoving = 0;
    				//元の位置に戻す
    			px = x * CHA_SIZE;
    			py = y * CHA_SIZE;
    		}
    		break;
    	
    	case UP:
    		nextX = x;
    		nextY = y - 1;
    		if(nextY < 0) nextY = 0;
    		
    		//その場所に障害物がなければ移動
    		if(m.IsHit(nextX, nextY) == 0){
    			//SPEED分移動
    			py -= this.SPEED[actPage];
    			if(py < 0) py = 0;
    			
    			//移動距離を加算
    			movingLenght += this.SPEED[actPage];
    			
    			//移動が1セル分を超えていたら
    			if(movingLenght >= CHA_SIZE){
    				//セル座標を移動
    				y--;
    				if(y < 0) y = 0;
    				py = y * CHA_SIZE;
    				
    				//移動が完了
    				isMoving = 0;
    				return 1;
    			}
    			
    		}else{
    			isMoving = 0;
    			//元の位置に戻す
    			px = x * CHA_SIZE;
    			py = y * CHA_SIZE;
    		}
    		break;
    		
    	case DOWN:
    		nextX = x;
    		nextY = y + 1;
    		if(nextY > m.mRow - 1) nextY = m.mRow - 1;
    		
    		//その場所に障害物がなければ移動
    		if(m.IsHit(nextX, nextY) == 0){
    			//SPEED分移動
    			py += this.SPEED[actPage];
    			if(py > m.Height -CHA_SIZE) py = m.Height -CHA_SIZE;
    			
    			//移動距離を加算
    			movingLenght += this.SPEED[actPage];
    			
    			//移動が1セル分を超えていたら
    			if(movingLenght >= CHA_SIZE){
    				//セル座標を移動
    				y++;
    				if(y > m.mRow - 1) y = m.mRow - 1;
    				py = y * CHA_SIZE;
    				
    				//移動が完了
    				isMoving = 0;
    				return 1;
    			}
    			
    		}else{
    			isMoving = 0;
    			//元の位置に戻す
    			px = x * CHA_SIZE;
    			py = y * CHA_SIZE;
    		}
    		break;
    	}
    	
    	return 0;	//移動が完了してないので0を返す
    	
    }
    
//-------------------------------------------------------------------------------------------------------		  
    /**
     * キャラが向いている方向にキャラがいれば、そのキャラを返す
     * @return キャラがいればそのcharaを返す
     */
    public Chara TalkWith(){
    	int nextX = 0;
    	int nextY = 0;
    	
    	//キャラが向いている方向の隣の座標
    	switch(direc[actPage]){
    	case LEFT:
    		nextX = x -1;
    		nextY = y;
    		break;
    	case RIGHT:
            nextX = x + 1;
            nextY = y;
            break;
        case UP:
            nextX = x;
            nextY = y - 1;
            break;
        case DOWN:
            nextX = x;
            nextY = y + 1;
            break;
    	}
    	
    	//その方向にキャラがいるかを調べる
    	Chara chara = m.CharaCheck(nextX, nextY);
    	
    	//キャラクターがいれば話しかけたキャラクターの方へ向ける
        if (chara != null) {
            switch (direc[actPage]) {
                case LEFT:
                    chara.SetDirec(RIGHT);
                    break;
                case RIGHT:
                    chara.SetDirec(LEFT);
                    break;
                case UP:
                    chara.SetDirec(DOWN);
                    break;
                case DOWN:
                    chara.SetDirec(UP);
                    break;
            }
        }
        
        return chara;

    }
    
//-------------------------------------------------------------------------------------------------------		  
    /**
     * 足元、もしくは目の前に宝があるか調べる
     * さらに開いているか閉まっているかもチェック
     */
    public TreEvent TreSerch(){
    	
    	//足元をチェック
    	Event eve = m.EventCheck(x, y);
    	TreEvent tEve;
    	if(eve instanceof TreEvent){
    		tEve = (TreEvent)eve;
    		if(tEve.nOpen == TreEvent.CLOSE){	//宝が閉まっていれば
    			return tEve;
    		}else{
    			return null;	//開いていたらnull
    		}
		}
    	
    	//向いているほうをチェック
    	//キャラが向いている方向の隣の座標
    	int nextX = 0;
    	int nextY = 0;
    	switch(direc[actPage]){
    	case LEFT:
    		nextX = x -1;
    		nextY = y;
    		break;
    	case RIGHT:
            nextX = x + 1;
            nextY = y;
            break;
        case UP:
            nextX = x;
            nextY = y - 1;
            break;
        case DOWN:
            nextX = x;
            nextY = y + 1;
            break;
    	}
    	eve = m.EventCheck(nextX, nextY);
    	if(eve instanceof TreEvent){
    		tEve = (TreEvent)eve;
    		if(tEve.nOpen == TreEvent.CLOSE){	//宝が閉まっていれば
    			return tEve;
    		}else{
    			return null;		//開いていたらnull
    		}
		}
    	
    	//なかったからnull
    	return null;
    }
   
//-------------------------------------------------------------------------------------------------------		  
    /**
     * 目の前に扉があるか調べる
     */
    public DoorEvent DoorSerch(){
    	
    	//向いているほうをチェック
    	//キャラが向いている方向の隣の座標
    	int nextX = 0;
    	int nextY = 0;
    	switch(direc[actPage]){
    	case LEFT:
    		nextX = x -1;
    		nextY = y;
    		break;
    	case RIGHT:
  import java.util.Random;
import java.util.Vector;
import java.lang.Math;

import com.nttdocomo.ui.*;

public class Cmn implements Common{

	public static Graphics g;
	public static Canvas c;
	private Thread ThAnim;
	private Thread Th;
	private Thread ThBat;
	
	public static final int DEBUG_MODE = 0;
	
	//Hero初期化処理------------------------------
	private static int HeX = 4;		//HeroのMAPに対する絶対座標の初期値
	private static int HeY = 13;
	public static int HeSpeed = 7;	//Hero移動速度
	public static int cTime = 300;		//Heroアニメーションのカウント切り替え待機時間
	//private static int direc = DOWN;	//Heroの向き
	public static String HeName;	//Heroの名前
	public static int ptNum = 1;		//PTメンバーの人数
	public static int ptLiveNum = 1;	//PTメンバーの生きている数
	
	public static Chara hero;
	
	public static int money = 100;	//所持金
	public static int encount = 0;		//エンカウント数
	
	//Map関連----------------------------------------
	private  static Map[] m = new Map[2];	//2つのMAPを切り替えて使用する
	private  static int useMap = 0;		//使っているMapが0か1か
	
	public static int mID;	//Mapを識別するためのID(現在いるMap番号
	public static int nextMID;	//移動先のマップ番号]
	public static int nextX;		//移動先の座標
	public static int nextY;
	
	private static int nextMapLoadFinish = 0;	//次のマップの情報読み込みが終了したら1
	
	public static int[][] trOpen;	//各MAPの宝の開き状況を格納しておく（１なら開き
	
	private int systemMove = 0;	//0なら移動エフェと一緒にMap読み込み、1ならエフェが終わってから読み込み
	
	private int defBatMvEf = 2;	//戦闘移行時の基本エフェクト
	private int defBatFnEf = 0;	//戦闘終了後の基本エフェクト
	
	public static int eveMoveFlg = 0;	//移動イベントが発生したときのフラグ（エフェクトNoもいれちゃえ
	
	public static final int WORLD_MAP = 9000;	//この番号以降のマップは全体マップ
	public static final int WORLD_POINT_NUM = 32;	//1つのワールドマップに登録できる移動ポイントの最大数
	public static WorldPoint[] worldPoint = new WorldPoint[WORLD_POINT_NUM];
	
	public static int wordPointSelect = 0;		//全体マップ時に選択している移動ポイント
	public static int wordPointMode = 0;		//ALL0、町フィルタ1、ダンジョンフィルタ2
	public static int wordPointNowIn = 0;		//何番のワールドマップからDに入ったか
	
	public static int wordPointViewMode = 3;	//全体マップ時のリスト表示モード
	
	//システム関連-----------------------------------------------
	private static Random rand = new Random();	//乱数
	private static int moveFlg = 0;	//Map間移動中なら1（Map間移動時のエフェクト表示に利用
	private static int contEfe = 0;	//エフェクト描画のカウントに使用
	public static int moveEffct;		//エフェクトの種類

	public static int INPUT_CNT = 10;	//決定キーを押してから次の入力が可能になるまでのインターバル
	public static int INPUT_KEY_CNT = 5;	//方向キーを押してから次の入力が可能になるまでのインターバル
	private static int inputCnt = 0;	//キー入力が連続で行われないようにするためのカウント
	private static int intputMenuCnt = 0;	//メニューキーが押されたときのインプットカウント
	
	public static Image sysImg;		//システム画像
	public static Image loading;		//ローディング画像
	private MediaImage Mimage;
	
	public static int cntCur = 0;			//カーソル画像描画のカウンター
	public static int cntIcon = 0;			//アイコン画像描画のカウンター
	
	public static int fontShadowDraw = 0;	//文字の影を描画
	
	//戦闘関係----------------------------------------------------
	private static Battle b;
	public static int eveBatNo = 0;		//イベントバトルの番号 通常エンカウントなら0
	public static int enCntMove;		//エンカウントしてからの歩数
	private static int batMoveFlg = 0;	//戦闘に移行中なら1（戦闘移行時のエフェクト表示に利用
	//private static int batEffect;		//エフェクトの種類
	
	private static int battleOn = 0;	//1なら戦闘中
	
	private static int batLoadFinish = 0;	//戦闘情報の読み込みが終了したら1
	private static int batInterval = 10;	//戦闘が始まってから最初に入力が可能になるまでの遊び
	
	public static int batlingFlg = 0;				//戦闘状態のフラグ 以下に定数
	public static final int FLG_NULL = 0;			//待機状態
	public static final int FLG_CMD_MAIN = 1;		//コマンドメイン表示中
	public static final int FLG_CMD_PC = 11;		//コマンドキャラごとの
	public static final int FLG_CMD_ITEM = 12;	//コマンドアイテムの
	public static final int FLG_CMD_SKILL = 13;	//コマンドスキルの
	public static final int FLG_CMD_SKILL_LIST = 301;//スキルを一覧から選択
	public static final int FLG_CMD_SKILL_USE_OR_SET = 302;	//スキルをセットするか使うかの選択
	public static final int FLG_CMD_SKILL_SET = 303;			//スキルをセット中
	public static final int FLG_CMD_ATK = 14;		//コマンド攻撃の
	public static final int FLG_CMD_ATK_SKILL = 314;//スキル攻撃でターゲットを選択中
	public static final int FLG_CMD_ATK_SKILL_SC = 315;//スキル攻撃でターゲットを選択中(ショーカットからスキルを選んだとき
	public static final int FLG_CMD_SUP_SKILL = 316;//スキル支援で味方を選択中
	public static final int FLG_CMD_SUP_SKILL_SC = 317;//スキル支援で味方を選択中(ショーカットからスキルを選んだとき
	public static final int FLG_CMD_LAST= 900;	//コマンド最終確認
	public static final int FLG_BATL = 1001;		//戦闘中
	public static final int FLG_BAT_END = 2001;	//戦闘終了
	public static final int FLG_BAT_LOSE = 2002;	//全滅
	public static final int FLG_BAT_ESC = 16;		//逃げるを選択中
	public static final int FLG_BAT_CONF = 17;	//コンフィグを選択中
	
	private static int SkillSetOn = 0;	//1ならスキルショートカットを設定中
	
	public static final int STAT_DEAD = 0;	//戦闘不能
	public static final int STAT_LIVE = 1;	//健康
	public static final int STAT_POISON = 2;	//毒
	public static final int STAT_SILEN = 4;	//沈黙
	public static final int STAT_STAN = 8;	//スタン	
	
	public static int batSetChar = 0;		//誰がコマンド入力中か、誰が行動中か
	public static int selectChar = 0;		//何番の敵を選択中か
	
	public static int eveBatFlg = 0;		//イベントバトルフラグ（逃げれないようにするフラグ
	public static int escNum;				//逃走回数
	
	//メッセージウインドウ------------------------
	private static MsgWin msgWin;			//ウィンドウ
	private static Rectangle WIN_RECT = new Rectangle(2, 172, 236, 63);
	private static int mxChLin = 19;		//1ページに表示できる最大文字数
	public static int[] winMsgRecCol = new int[3];	//メッセージウィンドウ枠の色
	public static int[] winMsgCol = new int[3];		//メッセージウインドウの色
	public static int winMsgRecAlpha;					//メッセージウィンドウ枠の透明度
	public static int winMsgAlpha;						//メッセージウインドウの透明度
	
	//お店関連------------------------
	private int shopVisble = 0;		//お店表示中かどうか
	private static int goodsNum = 0;			//決定した商品を一度に取引する数
	
	private static final int SHOP_BUY_SEAL = 1;	//買うか売るかを選択中
	private static final int SHOP_LIST = 10;		//商品一覧選択中
	private static final int SHOP_SEAL_LIST = 20;		//売るもの一覧選択中
	private static final int SHOP_BUY_NUM = 11;	//買う数を設定中
	private static final int SHOP_SEAL_NUM = 12;	//売る数を設定中
	
	//メニュー関連---------------------------------
	public static int menuVisible = 0;		//メニュー表示中かどうか
	private static int rctX;			//メニューの位置
	private static final int WIN_SPEED = 45;	//ウィンドウの動くスピード
	private static int actRctX;		//メニューで緑枠を表示させる位置
	private static int actRctY;
	public static int RECT_SPEED = 14;	//緑枠の動くスピード
	private static final int RECT_SPEED_SHORT = 14;
	private static final int RECT_SPEED_MIDLE = 36;
	private static final int RECT_SPEED_LONG = 72;
	public static int menuCmnd = 0;		//メニューでどのコマンドを選択中か
	private static int menuCurPoint = 0;	//メニューでどの項目にカーソルがあるか
	private static int pageTop = 0;		//１画面に収まりきらない項目の一番上の項目の番号
	private static final int MENU_MAIN = 0;		//メインメニュー
	public static final int MENU_ITEM_CUT = 199;	//カテゴリ選択
	public static final int MENU_ITEM = 100;		//アイテムALL
	public static final int MENU_ITEM_REC = 101;	//回復アイテムカテゴリ
	public static final int MENU_ITEM_ETC = 102;	//その他アイテムカテゴリ
	public static final int MENU_ITEM_WEP = 103;	//武器アイテムカテゴリ
	public static final int MENU_ITEM_GUD = 104;	//防具アイテムカテゴリ
	public static final int MENU_ITEM_ATK = 114;	//アイテム攻撃でターゲットを選択中
	public static final int MENU_ITEM_SUP = 116;	//アイテム支援で味方を選択中
	
	public static final int MENU_SKILL = 300;		//スキル
	public static final int MENU_STAT = 500;		//ステータス
	private static final int MENU_STAT2 = 501;	//ステータス2
	private static final int MENU_EQ = 600;		//装備
	private static final int MENU_EQ_WEP = 601;	//武器
	private static final int MENU_EQ_ARM = 602;	//鎧
	private static final int MENU_EQ_GUD = 603;	//盾
	private static final int MENU_EQ_HELM = 604;	//頭
	private static final int MENU_EQ_ACS1 = 605;	//アクセ１
	private static final int MENU_EQ_ACS2 = 606;	//アクセ２
	private static final int MENU_EQ_LIST = 610;	//装備箇所選択中
	private static final int MENU_CNF = 700;		//コンフィグ
	private static final int MENU_SAVE = 800;		//セーブ
	private static final int MENU_STONE = 900;	//石
	private static final int MENU_STONE_LIST = 910;	//石装備箇所選択中
	private static final int MENU_STONE_1 = 901;
	private static final int MENU_STONE_2 = 902;
	private static final int MENU_QUE = 1000;		//クエスト
	
	private static final int MENU_MAIN_ITEM = 1;	//メインでアイテムにカーソルあり
	private static final int MENU_MAIN_SKILL = 2;
	private static final int MENU_MAIN_STONE = 3;
	private static final int MENU_MAIN_EQ = 4;
	private static final int MENU_MAIN_STAT = 5;
	private static final int MENU_MAIN_QUE = 6;
	private static final int MENU_MAIN_CNF = 7;
	private static final int MENU_MAIN_SAVE = 8;
	private static final int MENU_CNF_1 = 701;		//コンフィグ詳細
	private static final int MENU_CNF_NUM = 21;		//コンフィグの項目数
	private static final int MENU_CNF_PAGE_NUM = 8;	//コンフィグの１ページに表示される項目数
	
	private static int menuPageTop = 0;	//メニューコマンドのページトップ位置
	
	public static int newStone = 0;		//新しい石を手に入れたらNEWする
	public static int newQuest = 0;		//新しいクエストが発生したらNEWする
	
	public static int saveNot = 0;			//セーブ禁止フラグ
	public static int terepNot = 0;		//脱出禁止フラグ
	
	//タイトル関連--------------------------------------
	private int titleOn = 0;	//タイトル画面かどうか
	private int titleFlg = 0;	//タイトルでどの項目を選択しているか
	public static int nameChangeMode = 0;	//名前変更時の入力モード
	public static String[] nameString = new String[13];		//名前入力に使う
	
	public static final int TITLE_LOAD = 0;		//ロード
	public static final int TITLE_NEW = 1;		//ニュー
	public static final int TITLE_NAME = 20;		//名前変更
	public static final int TITLE_LOAD_DIT = 10;	//ロードデータ選択
	
	//スキル関連---------------------------------------
	public static Skill skill;
	
	public static int encUp = 0;		//エンカウント率変動関数
	public static int showNext = 0;	//次のレベルまでの経験値を表示
	
	//アイテム関連-------------------------------------
	public static Item item;
	public static ItemEvent itemEvent;
	public static final int ALL_ITEM = 512;	//ゲームで使えるアイテム総数
	public static int[] itemList = new int[ALL_ITEM];			//どのアイテムを何個持っているか
	public static int[] itemAllList = new int [ALL_ITEM];	//持っているアイテムを上から順番にいれていく（個数は関係なし
	public static int[] itemRecList = new int [ALL_ITEM];	//カテゴリ別のリスト
	public static int[] itemWepList = new int [ALL_ITEM];	//アイテム入手時、使用時に
	public static int[] itemGudList = new int [ALL_ITEM];	//リフレッシュさせる
	public static int[] itemEtcList = new int [ALL_ITEM];
	public static int viewMode = Item.VIEW_ALL;
	
	//装備一覧を表示するために一時的にそれらを格納しておく
	private static int[] showItems = new int[256];	//装備一覧に表示するアイテム
	private static int showNum;						//装備一覧に表示されるアイテムの数
	
	
	//石関連-------------------------------------
	public static Stone stone;
	public static final int ALL_STONE = 64;	//使える石の総数
	public static int[] stoneList = new int[ALL_STONE];	//石を持っているか持っていないか（そしてその石のレベル
	public static int[] stoneExp = new int[ALL_STONE];	//石の経験値
	public static int stoneHave = 0;			//持っている石の数
	public static int[] stoneHaveList = new int[ALL_STONE];	//持っている石のリスト
	private static int stoneViewMode;			//石ステータスの表示モード
	
	public static int sortMode = 0;			//石のソートモード（0=標準、1=レベル順、2=属性順、3～str順、agi順・・・
	private static int[] stoneViewList = new int[ALL_STONE];	//石一覧の表示リスト
	private static final int SORT_KIND = 6;	//ソートモードの種類数
	
	//クエスト関連----------------------------------
	public static Quest que = new Quest();
	public static int[] questAllID = new int[Quest.QUE_ID_NUM];		//IDごとの表示するかしないかフラグ
	public static int[] questViewList = new int[Quest.QUE_ID_NUM];
	public static int queNum;
	
	
	//時間関連----------------------------------
	public static long playTime = 0;	//プレイ時間
	public static long startTime = 0;	//開始したときの時間
	
	//利用するフォント
	public static Font font =Font.getFont(Font.FACE_MONOSPACE|Font.SIZE_SMALL|Font.TYPE_DEFAULT);
	public static int fntH = 16;//font.getHeight();	 //+ 1; //文字の高さ（上にスペースを空けない）
	public static int fntW = 12;
	
	
	public static int nEndign = 0;	//1ならエンディング中
	
	//定数宣言------------------------------------
	public static final int WIDTH = 240;
	public static final int HEIGHT = 240;
	private static final int WAIT_TIME = 31;	//30FPSだから31
	public static final int ALL_MAP = 512;		//ゲームで使えるMap総数
	public static final int ALL_TREASURE = 8;	//MAP内で置ける宝の総数
	private static final int CLOSING_EF_NUM = 5;	//暗転中のエフェクトのセル枚数
	private static final int OPENING_EF_NUM = 5;	//暗転明けのエフェクトのセル枚数
	private static final int CLOSING_BAT_NUM = 7;	//暗転中のエフェクトのセル枚数
	private static final int OPENING_BAT_NUM = 7;	//暗転明けのエフェクトのセル枚数
	private static final int ENCOUNT_MOVE = 10;	//ここで設定した歩数は歩いてもエンカウントしない
	
	public static final int NUM_HEIHT = 12;	//数字フォントの高さ
	
	public static final int EFE_RIGHT_LEFT= 1;		//右から左へ暗転するエフェクト
	public static final int EFE_SIDE_AND_SAID = 2; 	//左右から暗転が迫ってくるエフェクト
	
	private static final int LOADING_IMAGE_NUM = 2;	//ローディング画像の数（ランダムで表示させるため
	
//-------------------------------------------------------------------------------------------------------
	//初期化処理メソッド
	public Cmn(Canvas maincvs){

		c = maincvs;
		g = c.getGraphics();

		//スキル初期化
		skill = new Skill();
		
		//石初期化
		stone = new Stone();
		
		//アイテム初期化
		item = new Item();
		itemEvent = new ItemEvent();
		
		//Map作成
		//宝の状況をMapに反映
		trOpen = new int[ALL_MAP][ALL_TREASURE];
		m[useMap] = new Map(mID, mID);

		//エンカウント率変動の初期化
		encUp = 0;
		//次のレベルまでの経験値表示初期化
		showNext = 0;
		
		//石、クエストのNEW表示を初期化
		newStone = 0;
		newQuest = 0;
		
		sortMode = 0;
		
		//ローディング画像読み込み
		//ランダムで画像をチョイス
		int rndNo = rand.nextInt(LOADING_IMAGE_NUM) + 1;
		String strNo;
		if(rndNo < 10){
			strNo = "0" + Integer.toString(rndNo);
		}else{
			strNo = Integer.toString(rndNo);
		}
		try{
			Mimage = MediaManager.getImage("resource:///load" + strNo + ".gif");
			Mimage.use();
			loading = Mimage.getImage();
		}catch(Exception e){
			System.out.println("例外が発生しました。処理を終了します。");
			return;
		}
		//システム画像の読み込み
		try{
			Mimage = MediaManager.getImage("resource:///system.gif");
			Mimage.use();
			sysImg = Mimage.getImage();
		}catch(Exception e){
			System.out.println("例外が発生しました。処理を終了します。");
			return;
		}

		//キャラクタのイメージをロード（初回の呼び出しのみ
        if(Chara.image[0] == null){
        	try{
        		Mimage = MediaManager.getImage("resource:///chara0.gif");
        		Mimage.use();
        		Chara.image[0] = Mimage.getImage();
        		Mimage = MediaManager.getImage("resource:///chara1.gif");
        		Mimage.use();
        		Chara.image[1] = Mimage.getImage();
        		Mimage = MediaManager.getImage("resource:///chara2.gif");
        		Mimage.use();
        		Chara.image[2] = Mimage.getImage();
        	}catch(Exception e){
        		System.out.println("例外が発生しました。処理を終了します。キャラ");
        		e.printStackTrace();
        		return;
        	}
        }
		
		//PTパラメータ初期化処理-----------------------
		Battle.ptm[0] = new PtParam();
		Battle.ptm[1] = new PtParam();
		Battle.ptm[2] = new PtParam();
		Battle.ptm[3] = new PtParam();
		Battle.ptm[4] = new PtParam();
		Battle.ptm[5] = new PtParam();
		Battle.ptm[6] = new PtParam();
		Battle.ptm[7] = new PtParam();
		
		//PTパネルの位置を設定-------------------------
		Battle.ptm[0].y = Battle.ptY;
		Battle.ptm[1].y = Battle.ptY;
		Battle.ptm[2].y = Battle.ptY;
		Battle.ptm[3].y = Battle.ptY;
		
		//各種パラメータ初期化処理----------------------------------
		SetDeflt();	
		SetGameDefalt();
		
		HeName = "";
		
		//敵設定
		for(int i = 0; i < Battle.ENE_MAX_NUM; i++){
			Battle.ene[i] = new Enemy();
		}
		//-----------------------------------------------------------
		
		//hero作成
		hero = new Chara(HeX, HeY, HERO, DOWN, 0, m[useMap], HeSpeed,
						0, 0, 0, 0, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0);
		
		//Mapにキャラを登録
		//キャラはMapに属する
		m[useMap].AddChara(hero);

		//ウインドウを追加
		msgWin = new MsgWin(WIN_RECT, mxChLin); 
		
		
		//セーブデータのサマリを表示
		Title.LoadSamari();
		
		c.setSoftLabel(Canvas.SOFT_KEY_2, "WEB");
		
		//タイトルを表示------------------------------
		titleOn = 1;
		if(Title.firstFlg == 1){
			titleFlg = TITLE_LOAD;
		}else{
			titleFlg = TITLE_NEW;
		}

		//アニメーションループ
		ThAnim = new Thread(new AnimThread());
		ThAnim.start();
		//DrawMain();
		
	}

//------------------------------------------------------------------------------------------------------
	private static void SetDeflt(){
		//各種パラメータ初期化処理----------------------------------
		//メッセージウィンドウの色と透明度
		winMsgRecCol[0] = 0;
		winMsgRecCol[1] = 0;
		winMsgRecCol[2] = 0;
		winMsgCol[0] = 60;
		winMsgCol[1] = 60;
		winMsgCol[2] = 60;
		winMsgRecAlpha = 180;
		winMsgAlpha = 160;
		Battle.winMBtlRecCol[0] = 0;
		Battle.winMBtlRecCol[1] = 0;
		Battle.winMBtlRecCol[2] = 0;
		Battle.winBtlCol[0] = 60;
		Battle.winBtlCol[1] = 60;
		Battle.winBtlCol[2] = 60;
		Battle.winBtlRecAlpha = 180;
		Battle.winBtlAlpha = 160;
		
		//戦闘スピード設定
		Battle.actInterval = 10;
		
		//移動速度
		HeSpeed = 7;
		
		//文字の影
		fontShadowDraw = 0;
		
		//インプットカウント
		INPUT_CNT = 10;	
		INPUT_KEY_CNT = 5;	
		
		
		
	}
	
//------------------------------------------------------------------------------------------------------
	private void SetGameDefalt(){
		
		money = 100;
		encount = 0;
		
		mID = 8999;	//MapのIDをセット
		
		//本番キャラ設定
		ptNum = 1;
		ptLiveNum = ptNum;
		
		Battle.ptm[0].name = HeName;
		Battle.ptm[0].lv = 1;
		Battle.ptm[0].exp = 0;
		Battle.ptm[0].next = Title.UpExp(Battle.ptm[0].lv);
		Battle.ptm[0].live = 1;
		Battle.ptm[0].wep = 10;
		Battle.ptm[0].eWep = 101;
		Battle.ptm[0].eArm = 0;
		Battle.ptm[0].eGud = 0;
		Battle.ptm[0].eHel = 0;
		Battle.ptm[0].eAc1 = 0;
		Battle.ptm[0].eAc2 = 0;
		Battle.ptm[0].eStone[0] = 0;
		Battle.ptm[0].eStone[1] = 0;
		Title.StatCheck(0, 0);
		Battle.ptm[0].hp = Battle.ptm[0].mhp;
		Battle.ptm[0].mp = Battle.ptm[0].mmp;
		Battle.ptm[0].setSkill[0] = 0;
		Battle.ptm[0].setSkill[1] = 0;
		Battle.ptm[0].setSkill[2] = 0;
		
		Battle.ptm[1].name = "にく";
		Battle.ptm[1].lv = 5;
		Battle.ptm[1].exp = 147;
		Battle.ptm[1].next = Title.UpExp(Battle.ptm[1].lv);
		Battle.ptm[1].live = 0;
		Battle.ptm[1].wep = 10;
		Battle.ptm[1].eWep = 101;
		Battle.ptm[1].eArm = 0;
		Battle.ptm[1].eGud = 0;
		Battle.ptm[1].eHel = 0;
		Battle.ptm[1].eAc1 = 0;
		Battle.ptm[1].eAc2 = 0;
		Battle.ptm[1].eStone[0] = 0;
		Battle.ptm[1].eStone[1] = 0;
		Title.StatCheck(1, 0);
		Battle.ptm[1].hp = Battle.ptm[1].mhp;
		Battle.ptm[1].mp = Battle.ptm[1].mmp;
		Battle.ptm[1].setSkill[0] = 0;
		Battle.ptm[1].setSkill[1] = 0;
		Battle.ptm[1].setSkill[2] = 0;
		
		Battle.ptm[2].name = "プードル";
		Battle.ptm[2].lv = 12;
		Battle.ptm[2].exp = 2444;
		Battle.ptm[2].next = Title.UpExp(Battle.ptm[2].lv);
		Battle.ptm[2].live = 0;
		Battle.ptm[2].wep = 10;
		Battle.ptm[2].eWep = 103;
		Battle.ptm[2].eArm = 302;
		Battle.ptm[2].eGud = 451;
		Battle.ptm[2].eHel = 401;
		Battle.ptm[2].eAc1 = 0;
		Battle.ptm[2].eAc2 = 0;
		Battle.ptm[2].eStone[0] = 0;
		Battle.ptm[2].eStone[1] = 0;
		Title.StatCheck(2, 0);
		Battle.ptm[2].hp = Battle.ptm[2].mhp;
		Battle.ptm[2].mp = Battle.ptm[2].mmp;
		Battle.ptm[2].setSkill[0] = 0;
		Battle.ptm[2].setSkill[1] = 0;
		Battle.ptm[2].setSkill[2] = 0;
		
		Battle.ptm[3].name = "Ｊｅｉ";
		Battle.ptm[3].lv = 25;
		Battle.ptm[3].exp = 31224;
		Battle.ptm[3].next = Title.UpExp(Battle.ptm[3].lv);
		Battle.ptm[3].live = 0;
		Battle.ptm[3].wep = 10;
		Battle.ptm[3].eWep = 106;
		Battle.ptm[3].eArm = 302;
		Battle.ptm[3].eGud = 452;
		Battle.ptm[3].eHel = 402;
		Battle.ptm[3].eAc1 = 0;
		Battle.ptm[3].eAc2 = 0;
		Battle.ptm[3].eStone[0] = 0;
		Battle.ptm[3].eStone[1] = 0;
		Title.StatCheck(3, 0);
		Battle.ptm[3].hp = Battle.ptm[3].mhp;
		Battle.ptm[3].mp = Battle.ptm[3].mmp;
		Battle.ptm[3].setSkill[0] = 0;
		Battle.ptm[3].setSkill[1] = 0;
		Battle.ptm[3].setSkill[2] = 0;
		
		//スキルのセット
		skill.PtSkill(0);
		skill.PtSkill(1);
		skill.PtSkill(2);
		skill.PtSkill(3);
		
		//逃走回数初期化
		escNum = 0;
		
		//宝をフラグをアイテムを
		for(int i = 0; i < ALL_MAP; i++){
	    	for(int j = 0; j < ALL_TREASURE; j++){
	    		trOpen[i][j] = 0;
	    	}
	    }
		for(int i = 0; i < MsgWin.FLG_NUM; i++){
	    	MsgWin.gameFlg[i] = 0;
	    }
		for(int i = 0; i < ALL_ITEM; i++){
	    	itemList[i] = 0;
	    	itemAllList[i] = 0;
	    	itemRecList[i] = 0;
	    	itemWepList[i] = 0;
	    	itemGudList[i] = 0;
	    	itemEtcList[i] = 0;
	    }
		item.haveItem[0] = 0;
		item.haveItem[1] = 0;
		item.haveItem[2] = 0;
		item.haveItem[3] = 0;
		item.haveItem[4] = 0;
		
		itemList[1] = 10;
		itemList[2] = 10;
		itemList[101] = 1;
		itemEvent.Reflesh();
		
		for(int i = 0; i < ALL_STONE; i++){
	    	stoneList[i] = 0;
	    	stoneHaveList[i] = 0;
	    	stoneExp[i] = 0;
	    }
		stoneHave = 0;
		
		WorldPointSet.movePointNum = 0;
		WorldPointSet.movePointNumT = 0;
		WorldPointSet.movePointNumD = 0;
		
		wordPointMode = 0;
	    wordPointSelect = 0;
	    wordPointViewMode = 3;
	    
	    playTime = 0;
	    
	    saveNot = 0;
	    terepNot = 0;
	    
	}
	
//------------------------------------------------------------------------------------------------------	
	private void init(){
		
		NewMap(mID, useMap);	//新しいマップを作成
		DelMap(useMap);	//古いマップを解放
			
		//使っているMapの切り替え
		if(useMap == 0){
			useMap = 1;
		}else{
			useMap = 0;
		}
		
		//heroだけは前Mapを消したあとに追加
		hero = new Chara(HeX, HeY, HERO, DOWN, 0, m[useMap], HeSpeed,
				0, 0, 0, 0, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0);
		m[useMap].AddChara(hero);

		hero.SetX(HeX);
		hero.SetY(HeX);
		hero.SetpX(hero.GetX() * CHA_SIZE);
		hero.SetpY(hero.GetY() * CHA_SIZE);
	    
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * タイトルのキー入力
	 */
	private void CheckTitleInput(){
		
		if(titleFlg < TITLE_NAME){
			if(gKey() == Display.KEY_SELECT){
				
				c.setSoftLabel(Canvas.SOFT_KEY_2, "");
				
				if(titleFlg == TITLE_LOAD){
					
					titleFlg = TITLE_LOAD_DIT + Title.playNo;
					RECT_SPEED = RECT_SPEED_MIDLE;
					inputCnt = INPUT_CNT;
					
				}else if(titleFlg >= TITLE_LOAD_DIT){
					
					if(Title.saveAt[titleFlg - TITLE_LOAD_DIT] == 1){
						//ロード処理
						Title.Load(titleFlg - TITLE_LOAD_DIT);
						
						Title.playNo = titleFlg - TITLE_LOAD_DIT;
							
						//スキルのセット
						skill.PtSkill(0);
						skill.PtSkill(1);
						skill.PtSkill(2);
						skill.PtSkill(3);
						
						//石の初期化
						Stone.Reflesh(1);
						
						//クエストの初期化
						que.QueReflesh();
						
						//開始時間をセット
						startTime = System.currentTimeMillis();
						
						//セーブ禁止解除
						saveNot = 0;
						terepNot = 0;
						
						//エンカウント率変動の初期化
						encUp = 0;
						//次のレベルまでの経験値表示初期化
						showNext = 0;
						
						//ダミーデータ
						int dID = mID;
						mID = 8999;
						
						NewMap(mID, useMap);	//新しいマップを作成
						DelMap(useMap);	//古いマップを解放
							
						//使っているMapの切り替え
						if(useMap == 0){
							useMap = 1;
						}else{
							useMap = 0;
						}
						
						//全体マップの場合、移動ポイントを登録していく
						//if(mID >= WORLD_MAP){
						//	m[useMap].wordPointset.MovePointRegMap(mID);
						//}
						
						//heroだけは前Mapを消したあとに追加
						hero = new Chara(HeX, HeY, HERO, DOWN, 0, m[useMap], HeSpeed,
								0, 0, 0, 0, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0);
						m[useMap].AddChara(hero);
		
						hero.SetX(Title.heX);
						hero.SetY(Title.heY);
						hero.SetpX(hero.GetX() * CHA_SIZE);
						hero.SetpY(hero.GetY() * CHA_SIZE);
					
						
						//イベントバトルフラグを解除
						eveBatFlg = 0;

						//タイトルを終了
						titleOn = 0;
						battleOn = 0;
						
						menuClose();
						
						MoveEve(99, dID, Title.heX, Title.heY);
						
						inputCnt = INPUT_CNT;
						
					}
					
				}else{
					
					//名前入力モードに
					titleFlg = TITLE_NAME;
					nameString[0] = "あいうえお　かきくけこ";
					nameString[1] = "さしすせそ　たちつてと";
					nameString[2] = "なにぬねの　はひふへほ";
					nameString[3] = "まみむめも　や　ゆ　よ";
					nameString[4] = "らりるれろ　わをんーっ";
					nameString[5] = "がぎぐげご　ざじずぜぞ";
					nameString[6] = "だぢづでど　ばびぶべぼ";
					nameString[7] = "ぱぴぷぺぽ　　　　　　";
					nameString[8] = "ぁぃぅぇぉ　ゃゅょゎ　";
					nameString[9] = "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮ";
					nameString[10] = "ＯＰＱＲＳＴＵＶＷＸＹＺ！―";
					nameString[11] = "ａｂｃｄｅｆｇｈｉｊｋｌｍｎ";
					nameString[12] = "ｏｐｑｒｓｔｕｖｗｘｙｚ？＋";
				    

					nameChangeMode = 0;
					menuCurPoint = 0;
					
					inputCnt = INPUT_CNT;
					
				}
			
				
			}else if(gKey() == Display.KEY_UP || gKey() == Display.KEY_DOWN){
	
				if(titleFlg < TITLE_LOAD_DIT){
					if(Title.firstFlg == 1){
						if(titleFlg == TITLE_LOAD){
							titleFlg = TITLE_NEW;
						}else{
							titleFlg = TITLE_LOAD;
						}
						
						RECT_SPEED = RECT_SPEED_SHORT;
						inputCnt = INPUT_KEY_CNT;
					}
					
				}else{
					//セーブデータ選択
					if(gKey() == Display.KEY_UP){
						titleFlg--;
						RECT_SPEED = RECT_SPEED_SHORT;
						if(titleFlg < TITLE_LOAD_DIT){
							titleFlg = TITLE_LOAD_DIT + 2;
							RECT_SPEED = RECT_SPEED_MIDLE;
						}
					}else{
						titleFlg++;
						RECT_SPEED = RECT_SPEED_SHORT;
						if(titleFlg > TITLE_LOAD_DIT + 2){
							RECT_SPEED = RECT_SPEED_MIDLE;
							titleFlg = TITLE_LOAD_DIT;
						}
					}
					
					inputCnt = INPUT_KEY_CNT;
					
				}
			}else if(gKey() == Display.KEY_LEFT){
				titleFlg = TITLE_LOAD;
				inputCnt = INPUT_CNT;
				c.setSoftLabel(Canvas.SOFT_KEY_2, "WEB");
				
			}else if(gKey() == Display.KEY_SOFT2){
				
				if(titleFlg < TITLE_LOAD_DIT){
					Title.RunBrowser();
					
				}
				
			}
			
			
		}else{
			//名前入力時のキー入力
			CheckNameInput();
			
		}
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 名前入力時のキー入力
	 */
	private void CheckNameInput(){
		
		int posY = menuCurPoint - (int)(menuCurPoint / 100) * 100;	//Y座標の位置
		
		if(gKey() == Display.KEY_LEFT){
			if(posY < 9){
				if(menuCurPoint >= 1400){
					menuCurPoint = 1000 + posY;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}else if(menuCurPoint < 100){
					if(posY < 3){
						menuCurPoint = 1400 + posY;
					}else{
						menuCurPoint = 1000 + posY;
					}
					RECT_SPEED = RECT_SPEED_LONG;
				}else{
					menuCurPoint -= 100;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
			}else{
				if(menuCurPoint < 100){
					menuCurPoint = 1300 + posY;
					RECT_SPEED = RECT_SPEED_LONG;
				}else{
					menuCurPoint -= 100;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
			}
			inputCnt = INPUT_KEY_CNT;
			
		}else if(gKey() == Display.KEY_RIGHT){
			if(posY < 9){
				if(menuCurPoint < 1000){
					menuCurPoint += 100;
					RECT_SPEED = RECT_SPEED_SHORT;
				}else if((posY < 3) && (menuCurPoint < 1400)){
					menuCurPoint = 1400 + posY;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}else{
					menuCurPoint = posY;
					RECT_SPEED = RECT_SPEED_LONG;
				}
			}else{
				if(menuCurPoint > 1300){
					menuCurPoint = posY;
					RECT_SPEED = RECT_SPEED_LONG;
				}else{
					menuCurPoint += 100;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
			}
			inputCnt = INPUT_KEY_CNT;
			
		}else if(gKey() == Display.KEY_UP){
			if(posY > 0){
				if(posY == 9 && menuCurPoint - posY > 1000){
					menuCurPoint = 1008;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}else{
					menuCurPoint--;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
			}else if(menuCurPoint == 1400){
				menuCurPoint = 1402;
				RECT_SPEED = RECT_SPEED_MIDLE;
				
			}else{
				menuCurPoint += 12;
				RECT_SPEED = RECT_SPEED_LONG;
			}
			inputCnt = INPUT_KEY_CNT;
			
		}else if(gKey() == Display.KEY_DOWN){
			if(menuCurPoint == 1402){
				menuCurPoint = 1400;
			}else if(posY < 12){
				menuCurPoint++;
				RECT_SPEED = RECT_SPEED_SHORT;
			}else{
				if(menuCurPoint - posY > 1000){
					menuCurPoint = 1000;
					RECT_SPEED = RECT_SPEED_LONG;
				}else{
					menuCurPoint -= posY;
					RECT_SPEED = RECT_SPEED_LONG;
				}
			}
			inputCnt = INPUT_KEY_CNT;
			
			
		}else if(gKey() == Display.KEY_SELECT && intputMenuCnt <= 0){
			if(menuCurPoint == 1400){
				if(nameChangeMode == 0){
					nameChangeMode = 1;
					nameString[0] = "アイウエオ　カキクケコ";
					nameString[1] = "サシスセソ　タチツテト";
					nameString[2] = "ナニヌネノ　ハヒフヘホ";
					nameString[3] = "マミムメモ　ヤ　ユ　ヨ";
					nameString[4] = "ラリルレロ　ワヲンーッ";
					nameString[5] = "ガギグゲゴ　ザジズゼゾ";
					nameString[6] = "ダヂヅデド　バビブベボ";
					nameString[7] = "パピプペポ　　　　　　";
					nameString[8] = "ァィゥェォ　ャュョヮヴ";
				}else{
					nameChangeMode = 0;
					nameString[0] = "あいうえお　かきくけこ";
					nameString[1] = "さしすせそ　たちつてと";
					nameString[2] = "なにぬねの　はひふへほ";
					nameString[3] = "まみむめも　や　ゆ　よ";
					nameString[4] = "らりるれろ　わをんーっ";
					nameString[5] = "がぎぐげご　ざじずぜぞ";
					nameString[6] = "だぢづでど　ばびぶべぼ";
					nameString[7] = "ぱぴぷぺぽ　　　　　　";
					nameString[8] = "ぁぃぅぇぉ　ゃゅょゎ　";
				}
			}else if(menuCurPoint == 1401){
				int strN = HeName.length();
				if(strN > 0){
					
					String tmpStr = HeName.substring(0, strN - 1);
					HeName = tmpStr;
				}
			}else if(menuCurPoint == 1402){
				int strN = HeName.length();
				if(strN <= 0){
					HeName = "まめ（仮";
				}
				
				for(int i = 0; i < 13; i++){
					nameString[i] = null;
				}
				
				//初期化
				mID = 0;	//MapのIDをセット
				Title.playNo = 0;	//プレイ番号初期化
				
				//ダミーデータ
				int dID = mID;
				mID = 8999;
				
				init();
				
				//全体マップの場合、移動ポイントを登録していく
				//if(mID >= WORLD_MAP){
				//	m[useMap].wordPointset.MovePointRegMap(mID);
				//}
				
				SetDeflt();
				SetGameDefalt();
					
				
				//開始時間をセット
				startTime = System.currentTimeMillis();
				
				//セーブ禁止解除
				saveNot = 0;
				terepNot = 0;
				
				//エンカウント率変動の初期化
				encUp = 0;
				//次のレベルまでの経験値表示初期化
				showNext = 0;
				
				//イベントバトルフラグを解除
				eveBatFlg = 0;
				
				//タイトルを終了
				titleOn = 0;
				battleOn = 0;
				
				c.setSoftLabel(Canvas.SOFT_KEY_1, "メニュー");
				
				MoveEve(99, dID, HeX, HeY);
				
				inputCnt = INPUT_CNT;
				
			}else{
				int strN = HeName.length();
				if(strN < 4){
					String chkStr;
					chkStr = nameString[posY].substring((menuCurPoint - posY) / 100, (menuCurPoint - posY) / 100 + 1);
					
					HeName += chkStr;
				}
			}
			
			
			intputMenuCnt = INPUT_CNT;
		}
		
		
		
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 移動時のキー入力
	 */
	private void CheckMoveInput(){
		
		if(gKey() == Display.KEY_SELECT){			
			if((hero.GetIsMoving() == 0) && (moveFlg == 0) && (batMoveFlg == 0)){//キーの入力を確認し、移動中でなければ移動を開始する
		
				//調べる
				TreEvent tre = hero.TreSerch();
				if(tre != null){
					//メッセージをセットする
					item.ItemList(tre.GetItemName());
					
					//所持数が99個以下なら獲得
					if(itemList[item.no] < 99 - ItemEvent.CheckEqItem(item.no)){
						msgWin.SetMsg(item.name + "を手に入れた。", null);
						itemEvent.GetItem(item.no, 1);
						
						//宝を開ける
						tre.nOpen = TreEvent.OPEN;
						tre.chipNo = TreEvent.TRE_OPEN;
						trOpen[mID][tre.treID] = TreEvent.OPEN;
					}else{
						msgWin.SetMsg(item.name + "を見つけた。\nしかしこれ以上もてなかった…", null);
					}
					
					//メッセージウインドウを表示
					msgWin.show();
					inputCnt = INPUT_CNT;
					
					return;		//宝を開けた場合は話さない
				}

				//扉
				DoorEvent door = hero.DoorSerch();
				if(door != null){
					m[useMap].RemoveEvent(door);
					return;
				}
				
				//話す
				if(!msgWin.isVisble()){	//メッセージウインドウを表示
					Chara chara = hero.TalkWith();	//Heroの向いている方向にキャラがいるかどうか
					
					if(chara != null){
						//メッセージをセットする
						int check = msgWin.SetMsg(chara.GetMsg(), hero);
						//メッセージウインドウを表示
						if(check != 0){
							msgWin.show();
						}

						inputCnt = INPUT_CNT;
					
					}
				}
				
				//物をチェック
				if(!msgWin.isVisble()){	//メッセージウインドウを表示
					ObjEvent obj = hero.ObjWith();	//Heroの向いている方向にキャラがいるかどうか
					
					if(obj != null){
						//発動条件が調べたらなら発動
						if(obj.actCnd[obj.actPage] == ObjEvent.ACTCND_CHECK){
							//メッセージをセットする
							int check = msgWin.SetMsg(obj.GetMsg(), hero);
							//メッセージウインドウを表示
							if(check != 0){
								msgWin.show();
							}
	
							inputCnt = INPUT_CNT;
						}
					}
					
					obj = hero.ObjSerch();
					
					if(obj != null){
						//発動条件が調べたらなら発動
						if(obj.actCnd[obj.actPage] == ObjEvent.ACTCND_CHECK){
							//メッセージをセットする
							int check = msgWin.SetMsg(obj.GetMsg(), hero);
							//メッセージウインドウを表示
							if(check != 0){
								msgWin.show();
							}
	
							inputCnt = INPUT_CNT;
						}
					
					}
				}
			}
			
		}else{
			if((hero.GetIsMoving() == 0) && (moveFlg == 0) && (batMoveFlg == 0)){//キーの入力を確認し、移動中でなければ移動を開始する
				if(gKey() == Display.KEY_LEFT){
					hero.SetDirec(LEFT);	//向きをセット
					hero.SetIsMoving(1);	//移動中であるフラグを立てる（移動開始
					
				}
				if(gKey() == Display.KEY_RIGHT){
					hero.SetDirec(RIGHT);
					hero.SetIsMoving(1);	//移動中であるフラグを立てる（移動開始

				}
				if(gKey() == Display.KEY_UP){
					hero.SetDirec(UP);
					hero.SetIsMoving(1);	//移動中であるフラグを立てる（移動開始

				}
				if(gKey() == Display.KEY_DOWN){
					hero.SetDirec(DOWN);
					hero.SetIsMoving(1);	//移動中であるフラグを立てる（移動開始

				}
				if(gKey() == Display.KEY_SOFT1 && intputMenuCnt <= 0){
					//メニュー表示
					menuCmnd = MENU_MAIN;
					menuCurPoint = MENU_MAIN_ITEM;
					menuPageTop = 0;
					//緑枠の位置を初期化
					actRctX = 0;
					rctX = 0;
					actRctY = 36;
					
					menuVisible = 1;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
					intputMenuCnt = INPUT_CNT;
				
				}
				
				//ショートカットキーのチェック
				ShortCutKey(gKey());
				
			}
		}
	}

//------------------------------------------------------------------------------------------------------
	/**
	 * 全体マップ時のキー入力
	 */
	private void CheckWorldInput(){
		
		if(moveFlg == 0){
			if(gKey() == Display.KEY_LEFT){
				wordPointMode--;
				
				if(wordPointMode == 1 && WorldPointSet.movePointNumT == 0){
					wordPointMode--;
				}
				
				if(wordPointMode < 0) wordPointMode = 2;
				
				if(wordPointMode == 2 && WorldPointSet.movePointNumD == 0){
					wordPointMode--;
				}
				
				wordPointSelect= 0;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				wordPointMode++;
				
				if(wordPointMode == 2 && WorldPointSet.movePointNumD == 0){
					wordPointMode++;
				}
				
				if(wordPointMode > 2) wordPointMode = 0;
				
				if(wordPointMode == 1 && WorldPointSet.movePointNumT == 0){
					wordPointMode++;
				}
				
				wordPointSelect= 0;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_UP){
				wordPointSelect--;
				if(wordPointSelect < 0){
					if(wordPointMode == 0){
						wordPointSelect = WorldPointSet.movePointNum - 1;
					}else if(wordPointMode == WorldPointSet.ELM_TOWN){
						wordPointSelect = WorldPointSet.movePointNumT - 1;
					}else if(wordPointMode == WorldPointSet.ELM_DUNGEON){
						wordPointSelect = WorldPointSet.movePointNumD - 1;
					}
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				wordPointSelect++;
				if((wordPointMode == 0 && wordPointSelect > WorldPointSet.movePointNum - 1) || 
						(wordPointMode == WorldPointSet.ELM_TOWN && wordPointSelect > WorldPointSet.movePointNumT - 1) ||
						(wordPointMode == WorldPointSet.ELM_DUNGEON && wordPointSelect > WorldPointSet.movePointNumD - 1)){
					wordPointSelect= 0;
				}
		
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT){
				
				int efe, nM, dx, dy;
				if(wordPointMode == WorldPointSet.ELM_TOWN){
					efe = WorldPointSet.movePointListTown[wordPointSelect].effect;
					nM = WorldPointSet.movePointListTown[wordPointSelect].nextMap;
					dx = WorldPointSet.movePointListTown[wordPointSelect].dx;
					dy = WorldPointSet.movePointListTown[wordPointSelect].dy;
				}else if(wordPointMode == WorldPointSet.ELM_DUNGEON){
					efe = WorldPointSet.movePointListDun[wordPointSelect].effect;
					nM = WorldPointSet.movePointListDun[wordPointSelect].nextMap;
					dx = WorldPointSet.movePointListDun[wordPointSelect].dx;
					dy = WorldPointSet.movePointListDun[wordPointSelect].dy;				
				}else{
					efe = worldPoint[wordPointSelect].effect;
					nM = worldPoint[wordPointSelect].nextMap;
					dx = worldPoint[wordPointSelect].dx;
					dy = worldPoint[wordPointSelect].dy;		
				}
				
				wordPointNowIn = mID;
				c.setSoftLabel(Canvas.SOFT_KEY_2, "");
				//移動イベント
				MoveEve(efe, nM, dx, dy);
				
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_SOFT1 && intputMenuCnt <= 0){
				//メニュー表示
				menuCmnd = MENU_MAIN;
				menuCurPoint = MENU_MAIN_ITEM;
				menuPageTop = 0;
				
				//緑枠の位置を初期化
				actRctX = 0;
				rctX = 0;
				actRctY = 36;
				
				menuVisible = 1;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
				c.setSoftLabel(Canvas.SOFT_KEY_2, "");
				intputMenuCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_SOFT2){
				if(wordPointViewMode == 0){
					wordPointViewMode = 3;
				}else if(wordPointViewMode >= 7){
					wordPointViewMode = 0;
				}else{
					wordPointViewMode += 2;
				}
				
		
				inputCnt = INPUT_CNT;
			
			}
			
			//ショートカットキーのチェック
			ShortCutKey(gKey());
		}
	}

//------------------------------------------------------------------------------------------------------
	/**
	 * ショートカットキーの設定
	 */
	private void ShortCutKey(int key){
	
		if(key == Display.KEY_1){
			//アイテム使用
			itemEvent.Reflesh();
			menuCmnd = MENU_ITEM_CUT;
			menuCurPoint = Item.VIEW_ALL;
			viewMode = Item.VIEW_ALL;
			pageTop = 0;
			actRctX = 16;
			actRctY = 62;
			
			menuPageTop = 0;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			c.setSoftLabel(Canvas.SOFT_KEY_2, "");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
			
		}else if(key == Display.KEY_2){
			//スキル使用
			menuCmnd = MENU_SKILL;
			SkillSetOn = 0;
			pageTop = 0;
			menuCurPoint = 0;
			batSetChar = 0;
			for(int i = 0; i < ptNum; i++){
				batSetChar = i;
				if(Battle.ptm[batSetChar].live == STAT_DEAD){	
					batSetChar++;
				}else{
					break;
				}
			}
			Battle.ptm[batSetChar].rectView = 1;
			
			menuPageTop = 0;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			c.setSoftLabel(Canvas.SOFT_KEY_2, "");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
			
		}else if(key == Display.KEY_3 && stoneHave > 0){
			//石表示
			menuCmnd = MENU_STONE;
			stoneViewMode = 0;
			batSetChar = 0;
			pageTop = 0;
			Battle.ptm[0].rectView = 1;
			newStone = 0;
			c.setSoftLabel(Canvas.SOFT_KEY_2, "表示切替");
			
			menuCurPoint = 0;
			menuPageTop = 0;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
	
		}else if(key == Display.KEY_4){
			//装備表示
			pageTop = 0;
			menuCmnd = MENU_EQ;
			batSetChar = 0;
			Battle.ptm[0].rectView = 1;
			
			menuCurPoint = 0;
			menuPageTop = 0;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			c.setSoftLabel(Canvas.SOFT_KEY_2, "");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
				
		}else if(key == Display.KEY_5){
			//ステータス表示
			menuCmnd = MENU_STAT;
			batSetChar = 0;
			pageTop = 0;
			Battle.ptm[0].rectView = 1;
			
			menuPageTop = 0;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			c.setSoftLabel(Canvas.SOFT_KEY_2, "");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
			
		}else if(key == Display.KEY_6){
			//クエスト
			que.QueReflesh();
			menuCmnd = MENU_QUE;
			menuCurPoint = 0;
			pageTop = 0;
			newQuest = 0;
			RECT_SPEED = RECT_SPEED_MIDLE;
			
			menuPageTop = 0;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			c.setSoftLabel(Canvas.SOFT_KEY_2, "");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
			
		}else if(key == Display.KEY_7){
			//設定項目
			menuCmnd = MENU_CNF;
			menuCurPoint = MENU_CNF_1;
			pageTop = 0;
			c.setSoftLabel(Canvas.SOFT_KEY_2, "初期値");
			
			menuPageTop = 1;
			menuVisible = 1;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
			intputMenuCnt = INPUT_CNT;
			inputCnt = INPUT_CNT;
			
		}else if(key == Display.KEY_9){
			if(saveNot == 0){	//セーブ禁止でなければ
				//セーブ項目
				//Title.Save(0);
				
				menuCmnd = MENU_SAVE;
				menuCurPoint = MENU_SAVE + Title.playNo;
				
				if(stoneHave > 0){
					menuPageTop = 2;
				}else{
					menuPageTop = 1;
				}
				menuVisible = 1;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
				c.setSoftLabel(Canvas.SOFT_KEY_2, "");
				intputMenuCnt = INPUT_CNT;
				inputCnt = INPUT_CNT;
			}
		}
	}
//------------------------------------------------------------------------------------------------------
	/**
	 * エンディング中のセーブ処理のときのキー入力
	 */
	public static void CheckSaveEndingInput(){
		
		mID = 0;
		
		menuCmnd = MENU_SAVE;
		menuCurPoint = MENU_SAVE + Title.playNo;
		
		menuVisible = 1;
		c.setSoftLabel(Canvas.SOFT_KEY_1, "閉じる");
		c.setSoftLabel(Canvas.SOFT_KEY_2, "");
		intputMenuCnt = INPUT_CNT;
		inputCnt = INPUT_CNT;
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * メッセージウインドウのキー入力
	 */
	private void CheckMsgInput(){
		if(gKey() == Display.KEY_SELECT || gKey() == Display.KEY_DOWN){
			int check = msgWin.NextMag();
			if(check == -1){	//次のページへ
				msgWin.hide();		//終了したら隠す
				
				//フラグのチェック
				m[useMap].RefleshEvt();
				
				//移動イベント
				if(eveMoveFlg > 0){
					MoveEve(eveMoveFlg - 1, nextMID, nextX, nextY);
					eveMoveFlg = 0;	
				}
				
				//お店
				if(MsgWin.shopNo > 0){
					shopVisble = MsgWin.shopNo;
					menuCmnd = SHOP_BUY_SEAL;
					menuCurPoint = 0;
					actRctX = 0;
					actRctY = 60;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
				}
				
				//エンディング
				if(nEndign == 1){
					CheckSaveEndingInput();
					
				}
				
			}else if(check > 0){
				//イベントバトル発生
				eveBatFlg = 1;
				EncntEve();
				
			}
			
			inputCnt = INPUT_CNT;
		}
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * お店のキー入力
	 */
	private void CheckShopInput(){
		
		if(gKey() == Display.KEY_SOFT1 && menuCmnd != SHOP_BUY_NUM && menuCmnd != SHOP_SEAL_NUM){
			
			shopVisble = 0;
			c.setSoftLabel(Canvas.SOFT_KEY_1, "メニュー");
			menuCmnd = MENU_MAIN;
			
			inputCnt = INPUT_CNT;
			
		}
		if(menuCmnd == SHOP_BUY_SEAL){
		//買うか売るかを選択中-----------------------------
			if(gKey() == Display.KEY_UP){
				shopVisble = 0;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "メニュー");
				menuCmnd = MENU_MAIN;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN || gKey() == Display.KEY_SELECT){
				if(menuCurPoint == 0){
					menuCmnd = SHOP_LIST;
					menuCurPoint = 0;
					
				}else{
					menuCmnd = SHOP_SEAL_LIST;
					menuCurPoint = 0;
					itemEvent.Reflesh();
				}
				
				pageTop = 0;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT || gKey() == Display.KEY_RIGHT){	
				if(menuCurPoint == 0){
					menuCurPoint = 1;
				}else{
					menuCurPoint = 0;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}
			
			
		
		//商品選択中----------------------------------------
		}else if(menuCmnd == SHOP_LIST){
			
			if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCmnd = SHOP_BUY_SEAL;
					menuCurPoint = 0;
				}
	
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				if(menuCurPoint >= 7){
					/*
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
					*/
				}else if(item.shop[menuCurPoint + 1] <= 0){
					/*
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
					*/
				}else{
					menuCurPoint++;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				if(menuCurPoint < item.haveItem[0] - 1){
					//カーソルを一番下に移動する
					menuCurPoint = 7;
					for(int i = 7;i >= 0; i--){
						if(item.shop[i] > 0){
							menuCurPoint = i;
							break;
						}
					}
					RECT_SPEED = RECT_SPEED_MIDLE;
					inputCnt = INPUT_KEY_CNT;
					
				}
				
			}else if(gKey() == Display.KEY_LEFT){
				if(menuCurPoint == 0){
					//戻る
					menuCmnd = SHOP_BUY_SEAL;
					menuCurPoint = 0;
				}else{
					//カーソルを一番上に
					menuCurPoint = 0;	
				}
				RECT_SPEED = RECT_SPEED_MIDLE;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT){
				//商品決定
				//ただし、所持数が99個以下の場合に限る
				if(itemList[item.shop[menuCurPoint]] < 99){
					menuCmnd = SHOP_BUY_NUM;
					goodsNum = 1;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "戻る");
					
					inputCnt = INPUT_CNT;
				}
				
			}
			
		//売るもの選択中---------------------------
		}else if(menuCmnd == SHOP_SEAL_LIST){
			
			if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCurPoint = 1;
					menuCmnd = SHOP_BUY_SEAL;
				}
				if(menuCurPoint - pageTop < 0){
					pageTop--;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				if(menuCurPoint < item.haveItem[0] - 1){
					RECT_SPEED = RECT_SPEED_SHORT;
					menuCurPoint++;
					
					if(menuCurPoint - pageTop > 7){
						pageTop++;
					}
					
					inputCnt = INPUT_KEY_CNT;					
				}
				
			}else if(gKey() == Display.KEY_RIGHT){
				if(menuCurPoint < item.haveItem[0] - 1){
					//カーソルを一番下に移動する
					if(item.haveItem[0] - pageTop <= 8){
						RECT_SPEED = RECT_SPEED_MIDLE;
						menuCurPoint = item.haveItem[0] - 1;
						inputCnt = INPUT_KEY_CNT;
					}
					
					//ページ送り
					if(item.haveItem[0] - pageTop > 16){
						menuCurPoint += 8;
						pageTop += 8;
						inputCnt = INPUT_KEY_CNT;
					}else if(stoneHave >= 8){
						menuCurPoint += item.haveItem[0] - pageTop - 8;
						pageTop += item.haveItem[0] - pageTop - 8;
						inputCnt = INPUT_KEY_CNT;
					}
				}
				
			}else if(gKey() == Display.KEY_LEFT){
				if(pageTop == 0 && menuCurPoint == 0){
					//戻る
					menuCurPoint = 1;
					menuCmnd = SHOP_BUY_SEAL;
					inputCnt = INPUT_KEY_CNT;
					
				//カーソルを一番上に移動する
				}else if(pageTop == 0){
					RECT_SPEED = RECT_SPEED_MIDLE;
					menuCurPoint = 0;
					inputCnt = INPUT_KEY_CNT;
				}
				
				//ページ送り
				if(pageTop >= 8){
					menuCurPoint -= 8;
					pageTop -= 8;
					inputCnt = INPUT_KEY_CNT;
				}else if(pageTop < 8){
					RECT_SPEED = RECT_SPEED_MIDLE;
					menuCurPoint -= pageTop;
					pageTop = 0;
					inputCnt = INPUT_KEY_CNT;
				}
					
			}else if(gKey() == Display.KEY_SELECT){
				//売るもの決定
				//ただし、0円は売れない
				item.ItemList(itemAllList[menuCurPoint]);
				
				if(item.price > 0){
					menuCmnd = SHOP_SEAL_NUM;
					goodsNum = 1;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "戻る");
					
					inputCnt = INPUT_CNT;
				}
			
			}
			
		}else if(menuCmnd == SHOP_BUY_NUM){
			if(gKey() == Display.KEY_RIGHT){
				goodsNum += 10;
				if(goodsNum + itemList[item.shop[menuCurPoint]] > 99){
					//持っている数と合わせて99個まで
					goodsNum = 99 - itemList[item.shop[menuCurPoint]] - ItemEvent.CheckEqItem(item.shop[menuCurPoint]);
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				goodsNum -= 10;
				if(goodsNum < 0){
					//商品を1個にする
					goodsNum = 1;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				goodsNum--;
				if(goodsNum <= 0){
					//商品選択に戻る
					menuCmnd = SHOP_LIST;
					goodsNum = 0;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_UP){	
				goodsNum++;
				if(goodsNum + itemList[item.shop[menuCurPoint]] > 99){
					//持っている数と合わせて99個まで
					goodsNum = 99 - itemList[item.shop[menuCurPoint]];
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT){
				//買う
				//ただし、所持金が足りている場合
				item.ItemList(item.shop[menuCurPoint]);
				if(money >= item.price * goodsNum){
					money -= item.price * goodsNum;
					itemEvent.GetItem(item.shop[menuCurPoint], goodsNum);
				
					//商品選択に戻る
					menuCmnd = SHOP_LIST;
					goodsNum = 0;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
				
					inputCnt = INPUT_CNT;
				}
				
			}else if(gKey() == Display.KEY_SOFT1){
				//商品選択に戻る
				menuCmnd = SHOP_LIST;
				goodsNum = 0;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
				
				inputCnt = INPUT_CNT;
			}
			
			
		}else if(menuCmnd == SHOP_SEAL_NUM){
			if(gKey() == Display.KEY_RIGHT){
				goodsNum += 10;
				if(goodsNum > itemList[itemAllList[menuCurPoint]]){
					//持っている数まで
					goodsNum = itemList[itemAllList[menuCurPoint]];
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				goodsNum -= 10;
				if(goodsNum < 0){
					//商品を1個にする
					goodsNum = 1;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				goodsNum--;
				if(goodsNum <= 0){
					//売るもの選択に戻る
					menuCmnd = SHOP_SEAL_LIST;
					goodsNum = 0;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_UP){	
				goodsNum++;
				if(goodsNum > itemList[itemAllList[menuCurPoint]]){
					//持っている数まで
					goodsNum = itemList[itemAllList[menuCurPoint]];
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT){
				//売る
				item.ItemList(itemAllList[menuCurPoint]);
				
				money += (item.price / 2) * goodsNum;
				
				int check = itemAllList[menuCurPoint];
				itemEvent.LostItem(itemAllList[menuCurPoint], goodsNum);
			
				if(itemList[check] <= 0 && (pageTop + 8 > item.haveItem[0]) && pageTop > 0){
					pageTop--;
					menuCurPoint--;
				}
				//売り物選択に戻る
				menuCmnd = SHOP_SEAL_LIST;
				goodsNum = 0;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
			
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_SOFT1){
				//売り物選択に戻る
				menuCmnd = SHOP_SEAL_LIST;
				goodsNum = 0;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "店を出る");
				
				inputCnt = INPUT_CNT;
			}
			
			
		}

	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * メニュー画面のキー入力
	 */
	private void CheckMenuInput(){

		if(gKey() == Display.KEY_SOFT1 && intputMenuCnt <= 0){
			
			if(nEndign == 1){
				//エンディング処理
				//タイトル画面へ
				titleOn = 1;
				if(Title.firstFlg == 1){
					titleFlg = TITLE_LOAD;
				}else{
					titleFlg = TITLE_NEW;
				}
				
				menuVisible = 0;
				menuClose();
				menuCmnd = MENU_MAIN;
				Battle.ptm[0].rectView = 0;
				Battle.ptm[1].rectView = 0;
				Battle.ptm[2].rectView = 0;
				Battle.ptm[3].rectView = 0;
			
				intputMenuCnt = INPUT_CNT;
				
				c.setSoftLabel(Canvas.SOFT_KEY_1, "");
				c.setSoftLabel(Canvas.SOFT_KEY_2, "WEB");
				
				nEndign = 0;
				
				inputCnt = INPUT_CNT;
				
			}else{
				menuVisible = 0;
				menuClose();
				menuCmnd = MENU_MAIN;
				Battle.ptm[0].rectView = 0;
				Battle.ptm[1].rectView = 0;
				Battle.ptm[2].rectView = 0;
				Battle.ptm[3].rectView = 0;
			
				intputMenuCnt = INPUT_CNT;
			}
		}
		
		//メインコマンド選択------------------------------------------
		if(menuCmnd == MENU_MAIN){
			
			if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				if(menuCurPoint == MENU_MAIN_STONE && stoneHave == 0){
					//石を持っていなければ石コマンドを飛ばす
					menuCurPoint--;
				}
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < MENU_MAIN_ITEM){
					menuCurPoint = MENU_MAIN_SAVE;
					if(stoneHave == 0){
						menuPageTop = 7 - 6;
					}else{
						menuPageTop = 8 - 6;
					}
					RECT_SPEED = RECT_SPEED_MIDLE;
				}
				if(menuCurPoint <= menuPageTop){
					menuPageTop--;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				menuCurPoint++;
				if(menuCurPoint == MENU_MAIN_STONE && stoneHave == 0){
					//石を持っていなければ石コマンドを飛ばす
					menuCurPoint++;
				}
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint > MENU_MAIN_SAVE){
					menuCurPoint = MENU_MAIN_ITEM;
					menuPageTop = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}
				if(stoneHave == 0){
					if(menuCurPoint > menuPageTop + 7){
						menuPageTop++;
					}
				}else{
					if(menuCurPoint > menuPageTop + 6){
						menuPageTop++;
					}
				}
					
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				menuVisible = 0;
				menuCmnd = MENU_MAIN;
				menuClose();
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT || gKey() == Display.KEY_RIGHT){
				//コマンド決定
				if(menuCurPoint == MENU_MAIN_ITEM){
					//アイテム使用
					itemEvent.Reflesh();
					menuCmnd = MENU_ITEM_CUT;
					menuCurPoint = Item.VIEW_ALL;
					viewMode = Item.VIEW_ALL;
					pageTop = 0;
					actRctX = 16;
					actRctY = 62;
					
				}else if(menuCurPoint == MENU_MAIN_STONE){
					//石表示
					menuCmnd = MENU_STONE;
					stoneViewMode = 0;
					batSetChar = 0;
					Battle.ptm[batSetChar].rectView = 1;
					newStone = 0;
					c.setSoftLabel(Canvas.SOFT_KEY_2, "表示切替");
					
				}else if(menuCurPoint == MENU_MAIN_EQ){
					//装備表示
					menuCmnd = MENU_EQ;
					batSetChar = 0;
					Battle.ptm[batSetChar].rectView = 1;
						
				}else if(menuCurPoint == MENU_MAIN_STAT){
					//ステータス表示
					menuCmnd = MENU_STAT;
					batSetChar = 0;
					Battle.ptm[batSetChar].rectView = 1;
					
				}else if(menuCurPoint == MENU_MAIN_SKILL){
					//スキル使用
					menuCmnd = MENU_SKILL;
					SkillSetOn = 0;
					pageTop = 0;
					batSetChar = 0;
					for(int i = 0; i < ptNum; i++){
						batSetChar = i;
						if(Battle.ptm[batSetChar].live == STAT_DEAD){	
							batSetChar++;
						}else{
							break;
						}
					}
					Battle.ptm[batSetChar].rectView = 1;
					
				}else if(menuCurPoint == MENU_MAIN_QUE){
					//クエスト
					que.QueReflesh();
					menuCmnd = MENU_QUE;
					menuCurPoint = 0;
					pageTop = 0;
					newQuest = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
					
					
				}else if(menuCurPoint == MENU_MAIN_CNF){
					//設定項目
					menuCmnd = MENU_CNF;
					menuCurPoint = MENU_CNF_1;
					pageTop = 0;
					c.setSoftLabel(Canvas.SOFT_KEY_2, "初期値");
					
				}else if(menuCurPoint == MENU_MAIN_SAVE){
					if(saveNot == 0){	//セーブ禁止でなければ
						//セーブ項目
						//Title.Save(0);
						menuCmnd = MENU_SAVE;
						menuCurPoint = MENU_SAVE + Title.playNo;
					}
				}
				
				inputCnt = INPUT_KEY_CNT;
				intputMenuCnt = INPUT_CNT;
				
			}

		//アイテム表示------------------------------------------
		}else if(menuCmnd >= MENU_ITEM && menuCmnd <= MENU_ITEM_CUT){
			CheckItemInput(gKey(), 2, menuCmnd);
			
		//石表示------------------------------------------
		}else if(menuCmnd == MENU_STONE){
			if(gKey() == Display.KEY_UP){
				Battle.ptm[batSetChar].rectView = 0;
				menuCmnd = MENU_MAIN;
				menuCurPoint = MENU_MAIN_STONE;
				c.setSoftLabel(Canvas.SOFT_KEY_2, "");
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				Battle.ptm[batSetChar].rectView = 0;
				batSetChar--;
				if(batSetChar < 0){
					batSetChar = ptNum - 1;
				}
				Battle.ptm[batSetChar].rectView = 1;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				Battle.ptm[batSetChar].rectView = 0;
				batSetChar++;
				if(batSetChar > ptNum - 1){
					batSetChar = 0;
				}
				Battle.ptm[batSetChar].rectView = 1;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN || gKey() == Display.KEY_SELECT)
					&& intputMenuCnt <= 0){
				//装備箇所選択へ
				menuCmnd = MENU_STONE_LIST;
				Battle.ptm[batSetChar].rectView = 0;
				actRctX = 16;
				actRctY = 62;
				menuCurPoint = 0;
				
				inputCnt = INPUT_KEY_CNT;
				intputMenuCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_SOFT2 || gKey() == Display.KEY_3){
				StoneStatChangeCheck(0);
				
				inputCnt = INPUT_CNT;
			}else if(gKey() == Display.KEY_1){
				StoneStatChangeCheck(1);
				
				inputCnt = INPUT_CNT;
			}
			
		//装備表示------------------------------------------
		}else if(menuCmnd == MENU_EQ){
			if(gKey() == Display.KEY_UP){
				Battle.ptm[batSetChar].rectView = 0;
				menuCmnd = MENU_MAIN;
				menuCurPoint = MENU_MAIN_EQ;
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				Battle.ptm[batSetChar].rectView = 0;
				batSetChar--;
				if(batSetChar < 0){
					batSetChar = ptNum - 1;
				}
				Battle.ptm[batSetChar].rectView = 1;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				Battle.ptm[batSetChar].rectView = 0;
				batSetChar++;
				if(batSetChar > ptNum - 1){
					batSetChar = 0;
				}
				Battle.ptm[batSetChar].rectView = 1;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN || gKey() == Display.KEY_SELECT) 
					&& intputMenuCnt <= 0){
				//装備箇所選択へ
				menuCmnd = MENU_EQ_LIST;
				Battle.ptm[batSetChar].rectView = 0;
				actRctX = 16;
				actRctY = 62;
				menuCurPoint = 0;
				
				inputCnt = INPUT_KEY_CNT;
				intputMenuCnt = INPUT_CNT;
				
			}
			
		//石変更-----------------------------------------------
		}else if(menuCmnd > MENU_STONE && menuCmnd < MENU_STONE + 50){
			CheckStoneInput(gKey(), menuCmnd);
			
		//装備変更-----------------------------------------------
		}else if(menuCmnd > MENU_EQ && menuCmnd < MENU_EQ + 50){
			CheckEqInput(gKey(), menuCmnd);
			
		//ステータス表示------------------------------------------
		}else if(menuCmnd >= MENU_STAT && menuCmnd <= MENU_STAT + 10){
			if(gKey() == Display.KEY_UP){
				Battle.ptm[batSetChar].rectView = 0;
				menuCmnd = MENU_MAIN;
				menuCurPoint = MENU_MAIN_STAT;
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				Battle.ptm[batSetChar].rectView = 0;
				batSetChar--;
				if(batSetChar < 0){
					batSetChar = ptNum - 1;
				}
				Battle.ptm[batSetChar].rectView = 1;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				Battle.ptm[batSetChar].rectView = 0;
				batSetChar++;
				if(batSetChar > ptNum - 1){
					batSetChar = 0;
				}
				Battle.ptm[batSetChar].rectView = 1;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN || gKey() == Display.KEY_SELECT)
					&& intputMenuCnt <= 0){
				//ステータス表示2ページ目
				//未実装
				
			}
			
		//スキル選択（誰がスキルを使うか------------------------------------------
		}else if(menuCmnd == MENU_SKILL){
			
			if(gKey() == Display.KEY_UP){
				Battle.ptm[batSetChar].rectView = 0;
				menuCmnd = MENU_MAIN;
				menuCurPoint = MENU_MAIN_SKILL;
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				selectChar = batSetChar;
				CheckSelectPt(0, 0);
				batSetChar = selectChar;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				selectChar = batSetChar;
				CheckSelectPt(1, 0);
				batSetChar = selectChar;
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN || gKey() == Display.KEY_SELECT)
					&& intputMenuCnt <= 0){
				menuCmnd = FLG_CMD_SKILL_USE_OR_SET;	//スキルを使うかセットするかを選ぶ
				Battle.ptm[batSetChar].rectView = 0;
				actRctX = 16;
				actRctY = 62;
				menuCurPoint = 0;
				SkillSetOn = 0;
				
				inputCnt = INPUT_CNT;
				
			}
			
		//スキルリスト-----------------------------------------------
		}else if(menuCmnd == FLG_CMD_SKILL_LIST || menuCmnd == FLG_CMD_SKILL_SET || 
				menuCmnd == FLG_CMD_SKILL_USE_OR_SET || menuCmnd == FLG_CMD_SUP_SKILL){
			CheckSkillInput(gKey(), 2, menuCmnd);
			
		//クエストリスト------------------------------------------
		}else if(menuCmnd == MENU_QUE){
			/*
			if(gKey() == Display.KEY_LEFT){
				menuCurPoint = MENU_MAIN_QUE;
				menuCmnd = MENU_MAIN;
				
				inputCnt = INPUT_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				menuCurPoint++;
				RECT_SPEED = RECT_SPEED_SHORT;
				
				if(menuCurPoint > queNum - 1){
					menuCurPoint = queNum - 1;
				}
				if(menuCurPoint > 8 + pageTop){
					pageTop++;
				}

				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				
				if(menuCurPoint < 0){
					menuCurPoint = 0;
				}
				if(menuCurPoint > 8 + pageTop){
					pageTop--;
				}

				inputCnt = INPUT_KEY_CNT;
				
			}
			*/
			if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCmnd = MENU_MAIN;
					menuCurPoint = MENU_MAIN_QUE;
					inputCnt = INPUT_CNT;
					
				}else{
					inputCnt = INPUT_KEY_CNT;
					
				}
				if(menuCurPoint - pageTop < 0){
					pageTop--;
				}
	
				
			}else if(gKey() == Display.KEY_DOWN){
				if(menuCurPoint < queNum - 1){
					RECT_SPEED = RECT_SPEED_SHORT;
					menuCurPoint++;
					
					if(menuCurPoint - pageTop > 6){
						pageTop++;
					}
					
					inputCnt = INPUT_KEY_CNT;					
				}
				
			}else if(gKey() == Display.KEY_RIGHT){
				if(menuCurPoint < queNum){
					//カーソルを一番下に移動する
					if(queNum - pageTop <= 7){
						RECT_SPEED = RECT_SPEED_MIDLE;
						menuCurPoint = queNum - 1;
						inputCnt = INPUT_KEY_CNT;
					}
					
					//ページ送り
					if(queNum - pageTop > 12){
						menuCurPoint += 6;
						pageTop += 6;
						inputCnt = INPUT_KEY_CNT;
					}else if(queNum >= 7){
						menuCurPoint += queNum - pageTop - 7;
						pageTop += queNum - pageTop - 7;
						inputCnt = INPUT_KEY_CNT;
					}
				}
				
			}else if(gKey() == Display.KEY_LEFT){
				//戻る
				if(pageTop == 0 && menuCurPoint <= 0){
					menuCmnd = MENU_MAIN;
					menuCurPoint = MENU_MAIN_QUE;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				//カーソルを一番上に移動する
				}else if(pageTop == 0){
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
					inputCnt = INPUT_KEY_CNT;
				}
				
				//ページ送り
				if(pageTop >= 7){
					menuCurPoint -= 7;
					pageTop -= 7;
					inputCnt = INPUT_KEY_CNT;
				}else if(pageTop < 7){
					menuCurPoint -= pageTop;
					pageTop = 0;
					inputCnt = INPUT_KEY_CNT;
				}
			}
		//コンフィグ選択------------------------------------------
		}else if(menuCmnd == MENU_CNF){
			
			if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				
				if(menuCurPoint < MENU_CNF_1){
					menuCurPoint = MENU_CNF + MENU_CNF_NUM;
					pageTop = MENU_CNF_NUM - MENU_CNF_PAGE_NUM;
					RECT_SPEED = RECT_SPEED_LONG;
				}
				if(menuCurPoint <= MENU_CNF + pageTop){
					pageTop--;
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				menuCurPoint++;
				RECT_SPEED = RECT_SPEED_SHORT;
				
				if(menuCurPoint > MENU_CNF + MENU_CNF_NUM){
					menuCurPoint = MENU_CNF_1;
					pageTop = 0;
					RECT_SPEED = RECT_SPEED_LONG;
				}
				if(menuCurPoint > MENU_CNF + MENU_CNF_PAGE_NUM + pageTop){
					pageTop++;
				}
				
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				//値下降--------------------------------
				if(menuCurPoint == MENU_CNF_1){
					HeSpeed++;
					if(HeSpeed > 10){
						HeSpeed = 3;
					}
					hero.SPEED[0] = HeSpeed;
					
				}else if(menuCurPoint == MENU_CNF_1 + 1){
					Battle.actInterval -= 3;
					if(Battle.actInterval < 1){
						Battle.actInterval = 22;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 2){
					INPUT_KEY_CNT--;
					if(INPUT_KEY_CNT < 3){
						INPUT_KEY_CNT = 10;
					}
				}else if(menuCurPoint == MENU_CNF_1 + 3){
					INPUT_CNT--;
					if(INPUT_CNT < 7){
						INPUT_CNT = 14;
					}
				}else if(menuCurPoint == MENU_CNF_1 + 4){
					fontShadowDraw--;
					if(fontShadowDraw < 0){
						fontShadowDraw = 1;
					}
				}else if(menuCurPoint >= MENU_CNF_1 + 5 && menuCurPoint <= MENU_CNF_1 + 7){
					int mc = menuCurPoint - MENU_CNF_1 - 5;
					if(winMsgRecCol[mc] == 255){
						winMsgRecCol[mc] -= 15;
					}else if(winMsgRecCol[mc] < 16){
						winMsgRecCol[mc] = 0;
					}else{
						winMsgRecCol[mc] -= 16;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 8){
					winMsgRecAlpha += 16;
					if(winMsgRecAlpha > 255){
						winMsgRecAlpha = 255;
					}
					
				}else if(menuCurPoint >= MENU_CNF_1 + 9 && menuCurPoint <= MENU_CNF_1 + 11){
					int mc = menuCurPoint - MENU_CNF_1 - 9;
					if(winMsgCol[mc] == 255){
						winMsgCol[mc] -= 15;
					}else if(winMsgCol[mc] < 16){
						winMsgCol[mc] = 0;
					}else{
						winMsgCol[mc] -= 16;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 12){
					winMsgAlpha += 16;
					if(winMsgAlpha > 255){
						winMsgAlpha = 255;
					}
					
				}else if(menuCurPoint >= MENU_CNF_1 + 13 && menuCurPoint <= MENU_CNF_1 + 15){
					int mc = menuCurPoint - MENU_CNF_1 - 13;
					if(Battle.winMBtlRecCol[mc] == 255){
						Battle.winMBtlRecCol[mc] -= 15;
					}else if(Battle.winMBtlRecCol[mc] < 16){
						Battle.winMBtlRecCol[mc] = 0;
					}else{
						Battle.winMBtlRecCol[mc] -= 16;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 16){
					Battle.winBtlRecAlpha += 16;
					if(Battle.winBtlRecAlpha > 255){
						Battle.winBtlRecAlpha = 255;
					}
					
					
				}else if(menuCurPoint >= MENU_CNF_1 + 17 && menuCurPoint <= MENU_CNF_1 + 19){
					int mc = menuCurPoint - MENU_CNF_1 - 17;
					if(Battle.winBtlCol[mc] == 255){
						Battle.winBtlCol[mc] -= 15;
					}else if(Battle.winBtlCol[mc] < 16){
						Battle.winBtlCol[mc] = 0;
					}else{
						Battle.winBtlCol[mc] -= 16;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 20){
					Battle.winBtlAlpha += 16;
					if(Battle.winBtlAlpha > 255){
						Battle.winBtlAlpha = 255;
					}
					
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				//値上昇--------------------------------
				if(menuCurPoint == MENU_CNF_1){
					HeSpeed--;
					if(HeSpeed < 3){
						HeSpeed = 10;
					}
					hero.SPEED[0] = HeSpeed;
					
				}else if(menuCurPoint == MENU_CNF_1 + 1){
					Battle.actInterval += 3;
					if(Battle.actInterval > 22){
						Battle.actInterval = 1;
					}
				}else if(menuCurPoint == MENU_CNF_1 + 2){
					INPUT_KEY_CNT++;
					if(INPUT_KEY_CNT > 10){
						INPUT_KEY_CNT = 3;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 3){
					INPUT_CNT++;
					if(INPUT_CNT > 14){
						INPUT_CNT = 7;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 4){
					fontShadowDraw++;
					if(fontShadowDraw > 1){
						fontShadowDraw = 0;
					}
					
				}else if(menuCurPoint >= MENU_CNF_1 + 5 && menuCurPoint <= MENU_CNF_1 + 7){
					int mc = menuCurPoint - MENU_CNF_1 - 5;
					winMsgRecCol[mc]+= 16;
					if(winMsgRecCol[mc] > 255){
						winMsgRecCol[mc] = 255;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 8){
					if(winMsgRecAlpha == 255){
						winMsgRecAlpha -= 15;
					}else if(winMsgRecAlpha < 16){
						winMsgRecAlpha = 0;
					}else{
						winMsgRecAlpha -= 16;
					}
					
				}else if(menuCurPoint >= MENU_CNF_1 + 9 && menuCurPoint <= MENU_CNF_1 + 11){
					int mc = menuCurPoint - MENU_CNF_1 - 9;
					winMsgCol[mc]+= 16;
					if(winMsgCol[mc] > 255){
						winMsgCol[mc] = 255;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 12){
					if(winMsgAlpha == 255){
						winMsgAlpha -= 15;
					}else if(winMsgAlpha < 16){
						winMsgAlpha = 0;
					}else{
						winMsgAlpha -= 16;
					}
					
				}else if(menuCurPoint >= MENU_CNF_1 + 13 && menuCurPoint <= MENU_CNF_1 + 15){
					int mc = menuCurPoint - MENU_CNF_1 - 13;
					Battle.winMBtlRecCol[mc]+= 16;
					if(Battle.winMBtlRecCol[mc] > 255){
						Battle.winMBtlRecCol[mc] = 255;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 16){
					if(Battle.winBtlRecAlpha == 255){
						Battle.winBtlRecAlpha -= 15;
					}else if(Battle.winBtlRecAlpha < 16){
						Battle.winBtlRecAlpha = 0;
					}else{
						Battle.winBtlRecAlpha -= 16;
					}
					
				}else if(menuCurPoint >= MENU_CNF_1 + 17 && menuCurPoint <= MENU_CNF_1 + 19){
					int mc = menuCurPoint - MENU_CNF_1 - 17;
					Battle.winBtlCol[mc]+= 16;
					if(Battle.winBtlCol[mc] > 255){
						Battle.winBtlCol[mc] = 255;
					}
					
				}else if(menuCurPoint == MENU_CNF_1 + 20){
					if(Battle.winBtlAlpha == 255){
						Battle.winBtlAlpha -= 15;
					}else if(Battle.winBtlAlpha < 16){
						Battle.winBtlAlpha = 0;
					}else{
						Battle.winBtlAlpha -= 16;
					}
					
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SOFT2){
				SetDeflt();
				
			}else if(gKey() == Display.KEY_SELECT && intputMenuCnt <= 0){
				menuCurPoint = MENU_MAIN_CNF;
				menuCmnd = MENU_MAIN;
				
				c.setSoftLabel(Canvas.SOFT_KEY_2, "");
				
				inputCnt = INPUT_CNT;
				
			}
			
		//セーブ選択------------------------------------------
		}else if(menuCmnd == MENU_SAVE){
			
			if(gKey() == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_MIDLE;
				if(menuCurPoint < MENU_SAVE) menuCurPoint = MENU_SAVE + 2; RECT_SPEED = RECT_SPEED_LONG;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				menuCurPoint++;
				RECT_SPEED = RECT_SPEED_MIDLE;
				if(menuCurPoint > MENU_SAVE + 2) menuCurPoint = MENU_SAVE; RECT_SPEED = RECT_SPEED_LONG;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				if(nEndign != 1){
					//エンディング中は閉じれない
					menuCurPoint = MENU_MAIN_SAVE;
					menuCmnd = MENU_MAIN;
					
					inputCnt = INPUT_CNT;
				}
				
			}else if(gKey() == Display.KEY_SELECT && intputMenuCnt <= 0){
				
				Title.Save(menuCurPoint - MENU_SAVE);
				inputCnt = INPUT_CNT;
				
			}
		}
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 戦闘時のキー入力
	 */
	private void CheckBatInput(){
		
		//メインコマンド選択------------------------------------------
		if(batlingFlg == FLG_CMD_MAIN){
			
			if(gKey() == Display.KEY_UP){
				//ESC
				if(eveBatFlg == 0){
					batlingFlg = FLG_BAT_ESC;
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if((gKey() == Display.KEY_DOWN) || (gKey() == Display.KEY_SELECT)){
				//FIGHT
				batlingFlg = FLG_CMD_PC;
				
				//誰がコマンド入力中なのかを設定
				for(int i = 0; i < ptNum; i++){
					batSetChar = i;
					if(Battle.ptm[batSetChar].live == STAT_DEAD){	
						batSetChar++;
					}else{
						break;
					}
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				//CONF
				batlingFlg = FLG_BAT_CONF;
				inputCnt = INPUT_KEY_CNT;
				menuCmnd = 0;
			}

		}else if(batlingFlg == FLG_BAT_ESC){
			//逃げるコマンド選択中---------------------------------------------------
			if(Battle.escCnt == 0){
				if(gKey() == Display.KEY_RIGHT || (gKey() == Display.KEY_SELECT)){
					Battle.escCnt = 1;
					Battle.msgFlg = 1;
					Battle.escFlg = Battle.EscapeJadge();
					Battle.escTry++;
					
				}else if(gKey() == Display.KEY_DOWN){
					batlingFlg = FLG_CMD_MAIN;
					inputCnt = INPUT_KEY_CNT;
					
				}
			}
			
		}else if(batlingFlg == FLG_BAT_CONF){
			//コンフィグコマンド選択中---------------------------------------------------
			if(gKey() == Display.KEY_SELECT){
				//メインコマンドにもどる
				batlingFlg = FLG_CMD_MAIN;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_UP){
				menuCmnd--;
				RECT_SPEED = RECT_SPEED_SHORT;
				
				if(menuCmnd < 0){
					menuCmnd = 2;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_DOWN){
				menuCmnd++;
				RECT_SPEED = RECT_SPEED_SHORT;
				
				if(menuCmnd > 2){
					menuCmnd = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_LEFT){
				//値下降--------------------------------
				if(menuCmnd == 0){
					Battle.actInterval -= 3;
					if(Battle.actInterval < 1){
						Battle.actInterval = 22;
					}	
				}else if(menuCmnd == 1){
					INPUT_KEY_CNT--;
					if(INPUT_KEY_CNT < 3){
						INPUT_KEY_CNT = 10;
					}
				}else if(menuCmnd == 2){
					INPUT_CNT--;
					if(INPUT_CNT < 7){
						INPUT_CNT = 14;
					}
				}
				inputCnt = INPUT_KEY_CNT;
			}else if(gKey() == Display.KEY_RIGHT){
				//値上昇--------------------------------
				if(menuCmnd == 0){
					Battle.actInterval += 3;
					if(Battle.actInterval > 22){
						Battle.actInterval = 1;
					}
				}else if(menuCmnd == 1){
					INPUT_KEY_CNT++;
					if(INPUT_KEY_CNT > 10){
						INPUT_KEY_CNT = 3;
					}
					
				}else if(menuCmnd == 2){
					INPUT_CNT++;
					if(INPUT_CNT > 14){
						INPUT_CNT = 7;
					}
				}
				inputCnt = INPUT_KEY_CNT;
			}
			
		//各キャラごとのコマンド選択-------------------------------------
		}else if(batlingFlg == FLG_CMD_PC){
			if(gKey() == Display.KEY_LEFT){
				//ITEM
				//batlingFlg = FLG_CMD_ITEM;
				Battle.ptm[batSetChar].action = PtParam.ACT_ITEM;
				//inputCnt = INPUT_KEY_CNT;
				
				c.setSoftLabel(Canvas.SOFT_KEY_1, "戻る");
				itemEvent.Reflesh();
				batlingFlg = MENU_ITEM_CUT;
				menuCurPoint = Item.VIEW_ALL;
				viewMode = Item.VIEW_ALL;
				actRctX = 16;
				actRctY = 62;
				pageTop = 0;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				//SKILL
				batlingFlg = FLG_CMD_SKILL;
				Battle.ptm[batSetChar].action = PtParam.ACT_SKILL;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_UP){
				//BACK
				for(int i = batSetChar; i >= 0; i--){
					batSetChar--;
					if(batSetChar < 0){
						batlingFlg = FLG_CMD_MAIN;
						break;
					}else{
						if(Battle.ptm[batSetChar].live == STAT_LIVE){
							break;
						}else{
							
						}
					}
				}
				//行動がアイテムの場合、減らしたアイテムを戻す
				if(batSetChar > 0){
					if(Battle.ptm[batSetChar].action == PtParam.ACT_ITEM){
						itemList[Battle.ptm[batSetChar].itemNo]++;	//アイテムの数を戻す
					}
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN) || (gKey() == Display.KEY_SELECT)){
				//ATK
				batlingFlg = FLG_CMD_ATK;
				Battle.ptm[batSetChar].action = PtParam.ACT_ATK;
				selectChar = 0;
				for(int i = 0; i < Battle.ENE_MAX_NUM; i++){
					if(Battle.ene[i].live == 1){
						selectChar = i;
						break;
					}
				}
				inputCnt = INPUT_KEY_CNT;
			}
		
		//アイテムコマンド選択---------------------------------------------
		}else if(batlingFlg == FLG_CMD_ITEM){
			if(gKey() == Display.KEY_RIGHT){
				//BACK
				batlingFlg = FLG_CMD_PC;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT){
				//アイテムリスト表示
				c.setSoftLabel(Canvas.SOFT_KEY_1, "戻る");
				itemEvent.Reflesh();
				batlingFlg = MENU_ITEM_CUT;
				menuCurPoint = Item.VIEW_ALL;
				viewMode = Item.VIEW_ALL;
				actRctX = 16;
				actRctY = 62;
				pageTop = 0;
				inputCnt = INPUT_KEY_CNT;

				
			}
		
		//スキルコマンド選択-----------------------------------------------
		}else if(batlingFlg == FLG_CMD_SKILL){
			if(gKey() == Display.KEY_LEFT){
				//BACK
				batlingFlg = FLG_CMD_PC;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_SELECT){
				//スキルリスト表示
				c.setSoftLabel(Canvas.SOFT_KEY_1, "戻る");
				batlingFlg = FLG_CMD_SKILL_USE_OR_SET;
				actRctX = 16;
				actRctY = 62;
				menuCurPoint = 0;
				pageTop = 0;
				SkillSetOn = 0;
				inputCnt = INPUT_KEY_CNT;
				
			//ショートカットでの入力-------------------
			}else if(gKey() == Display.KEY_UP || gKey() == Display.KEY_RIGHT || gKey() == Display.KEY_DOWN){
				int num;
				if(gKey() == Display.KEY_UP){
					num = 0;
				}else if(gKey() == Display.KEY_RIGHT){
					num = 1;
				}else{
					num = 2;
				}
				
				if(Battle.ptm[batSetChar].setSkillView[num] == 1 ){
					Cmn.skill.SkillList(Battle.ptm[batSetChar].setSkill[num]);
					
					if(Battle.ptm[batSetChar].mp >= skill.mp){
					//MPがあれば使用可能	
						if(skill.tag == 0){
							batlingFlg = FLG_CMD_ATK_SKILL_SC;
							Battle.ptm[batSetChar].skillNo = skill.no;
							selectChar = 0;
							for(int i = 0; i < Battle.ENE_MAX_NUM; i++){
								if(Battle.ene[i].live == 1){
									selectChar = i;
									break;
								}
							}
							c.setSoftLabel(Canvas.SOFT_KEY_1, "");
							inputCnt = INPUT_KEY_CNT;
						
						}else if(skill.tag == 1){
							Battle.ptm[batSetChar].skillNo = skill.no;
							Battle.ptm[batSetChar].tage = 0;
							Battle.ptm[batSetChar].rectView = 0;
							for(int i = batSetChar; i < ptNum; i++){
								batSetChar++;
								if(batSetChar > ptNum - 1){
									batlingFlg = FLG_CMD_LAST;
								}else{
									if(Battle.ptm[batSetChar].live == STAT_LIVE){
										batlingFlg = FLG_CMD_PC;
										break;
									}else{
										
									}
								}
							}
							c.setSoftLabel(Canvas.SOFT_KEY_1, "");
							inputCnt = INPUT_KEY_CNT;
							
						}else if(skill.tag == 10){
							batlingFlg = FLG_CMD_SUP_SKILL_SC;
							c.setSoftLabel(Canvas.SOFT_KEY_1, "");		
	
							Battle.ptm[batSetChar].skillNo = skill.no;
							selectChar = 0;
							for(int i = 0; i < 4; i++){
								if(Battle.ptm[i].live != STAT_DEAD){
									selectChar = i;
									break;
								}
							}
							Battle.ptm[selectChar].rectView = 1;
							inputCnt = INPUT_KEY_CNT;
							
						}else if(skill.tag == 11){
							for(int i = batSetChar; i < ptNum; i++){
								Battle.ptm[batSetChar].skillNo = skill.no;
								Battle.ptm[batSetChar].tage = 0;
								Battle.ptm[batSetChar].rectView = 0;
								batSetChar++;
								if(batSetChar > ptNum - 1){
									batlingFlg = FLG_CMD_LAST;
								}else{
									if(Battle.ptm[batSetChar].live == STAT_LIVE){
										batlingFlg = FLG_CMD_PC;
										break;
									}else{
										
									}
								}
							}
							c.setSoftLabel(Canvas.SOFT_KEY_1, "");
							inputCnt = INPUT_KEY_CNT;
							
						}	
					}
				}			
			}
			
			
		//アイテム表示------------------------------------------
		}else if(batlingFlg >= MENU_ITEM && batlingFlg <= MENU_ITEM_CUT){
			CheckItemInput(gKey(), 1, batlingFlg);
			
		//スキルリスト-----------------------------------------------
		}else if(batlingFlg == FLG_CMD_SKILL_LIST || batlingFlg == FLG_CMD_SUP_SKILL || batlingFlg == FLG_CMD_SUP_SKILL_SC ||
				batlingFlg == FLG_CMD_SKILL_SET || batlingFlg == FLG_CMD_SKILL_USE_OR_SET){
			CheckSkillInput(gKey(), 1, batlingFlg);
			
		//アタック、スキルコマンド選択--------------------------------------------
		}else if(batlingFlg == FLG_CMD_ATK || batlingFlg == FLG_CMD_ATK_SKILL || batlingFlg == FLG_CMD_ATK_SKILL_SC){
			if(gKey() == Display.KEY_UP){
				//BACK
				if(batlingFlg == FLG_CMD_ATK){
					batlingFlg = FLG_CMD_PC;
				}else if(batlingFlg == FLG_CMD_ATK_SKILL){
					batlingFlg = FLG_CMD_SKILL_LIST;
				}else{
					batlingFlg = FLG_CMD_SKILL;
				}
				
				inputCnt = INPUT_KEY_CNT;
			
			}else if(gKey() == Display.KEY_LEFT){
				//左の敵を選択
				CheckSelectEnemy(0);
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey() == Display.KEY_RIGHT){
				//右の敵を選択
				CheckSelectEnemy(1);
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN) || (gKey() == Display.KEY_SELECT)){
				//ターゲット決定
				Battle.ptm[batSetChar].tage = selectChar;
					
				//次のキャラへ以降、もしくは最終決定コマンド表示に以降
				for(int i = batSetChar; i < ptNum; i++){
					batSetChar++;
					if(batSetChar > ptNum - 1){
						batlingFlg = FLG_CMD_LAST;
					}else{
						if(Battle.ptm[batSetChar].live == STAT_LIVE){
							batlingFlg = FLG_CMD_PC;
							break;
						}else{
							
						}
					}
				}
				
				inputCnt = INPUT_KEY_CNT;
			}
			
		//最終確認コマンド--------------------------------------------
		}else if(batlingFlg == FLG_CMD_LAST){
			if(gKey() == Display.KEY_UP){
				//BACK
				batlingFlg = FLG_CMD_PC;
				batSetChar = ptNum;
				for(int i = ptNum; i > 0; i--){
					batSetChar--;
					if(Battle.ptm[batSetChar].live == STAT_LIVE){
						break;
					}else{
						
					}
				}
				//行動がアイテムの場合、減らしたアイテムを戻す
				if(Battle.ptm[batSetChar].action == PtParam.ACT_ITEM){
					itemList[Battle.ptm[batSetChar].itemNo]++;	//アイテムの数を戻す
				}
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN) || (gKey() == Display.KEY_SELECT)){
				//GO
				Battle.SetActNum();		//行動順確認
				Battle.actedNum = 0;	//行動した人数を0にする
				Battle.intervalCnt = Battle.actInterval;	//キャラ行動開始までのインターバルを設定
				//アイテム使用を設定した場合、そこで減らしたアイテムを元に戻す
				for(int i = 0; i < ptNum; i++){
					if(Battle.ptm[i].action == PtParam.ACT_ITEM){
						itemList[Battle.ptm[i].itemNo]++;
					}
				}
				
				batlingFlg = FLG_BATL;
				Battle.cmdOutFlg = Battle.CMD_OUT_TIME;
				
				inputCnt = INPUT_KEY_CNT;
				
			}
			
		}else if(batlingFlg == FLG_BAT_END){
			//戦闘終了後の処理
			if((gKey() == Display.KEY_DOWN) || (gKey() == Display.KEY_SELECT)){
				
				batEnded();
				
				inputCnt = 16;
				
			}

		}else if(batlingFlg == FLG_BAT_LOSE){
			//全滅後の処理
			if((gKey() == Display.KEY_DOWN) || (gKey() == Display.KEY_SELECT)){
				
				//メッセージを閉じる
				msgWin.hide();
				
				//タイトルへ
				titleOn = 1;
				if(Title.firstFlg == 1){
					titleFlg = TITLE_LOAD;
				}else{
					titleFlg = TITLE_NEW;
				}
				
				c.setSoftLabel(Canvas.SOFT_KEY_1, "");
				c.setSoftLabel(Canvas.SOFT_KEY_2, "WEB");
				
				inputCnt = INPUT_CNT;
				
			}
		}
		/*
		//テスト用
		if(gKey() == Display.KEY_SOFT2){
			
			//戦闘終了
			batEnded();
			
		}
		*/
	}

//------------------------------------------------------------------------------------------------------
	/**
	 * ターゲット選択時の敵がいないばあいのスキップそうさ
	 */
	private static void CheckSelectEnemy(int LorR){
		
		if(LorR == 0){
			//左の敵を選択
			if(Battle.eneLiveNum > 1){
				selectChar--;
				int check = selectChar;
				for(int i = 0; i < Battle.eneNum; i++){
					if(check < 0){
						check = Battle.eneNum - 1;
					}
					if(Battle.ene[check].live == STAT_LIVE){
						selectChar = check;
						break;
					}
					check--;
				}
			}
		}else{
			//右の敵を選択
			if(Battle.eneLiveNum > 1){
				selectChar++;
				int check = selectChar;
				for(int i = 0; i < Battle.eneNum; i++){
					if(check >= Battle.eneNum){
						check = 0;
					}
					if(Battle.ene[check].live == STAT_LIVE){
						selectChar = check;
						break;
					}
					check++;
				}
			}
		}
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 左右のキャラを選択する
	 * @param LorR 左なら0、右なら1を指定
	 * @param DeadOn 0ならDeadキャラを選択しない、1なら選択する
	 */
	private static void CheckSelectPt(int LorR, int DeadOn){
		
		if(LorR == 0){
			//左のPTを選択
			if(ptNum > 1){
				Battle.ptm[selectChar].rectView = 0;
				selectChar--;
				int check = selectChar;
				for(int i = 0; i < ptNum; i++){
					if(check < 0){
						check = ptNum - 1;
					}

					if(DeadOn == 0){
						if(Battle.ptm[check].live == STAT_LIVE){
							selectChar = check;
							break;
						}
						check--;
					}else{
						selectChar = check;
						break;
					}
				}
				Battle.ptm[selectChar].rectView = 1;
			}
		}else{
			//右のPTを選択
			if(ptNum > 1){
				Battle.ptm[selectChar].rectView = 0;
				selectChar++;
				int check = selectChar;
				for(int i = 0; i < ptNum; i++){
					if(check >= ptNum){
						check = 0;
					}
					
					if(DeadOn == 0){
						if(Battle.ptm[check].live == STAT_LIVE){
							selectChar = check;
							break;
						}
						check++;
					}else{
						selectChar = check;
						break;
					}
				}
				Battle.ptm[selectChar].rectView = 1;
			}
		}
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * アイテムリスト表示中の入力
	 * @param gkey キー番号
	 * @param mode 戦闘中1か移動中2か
	 * @param flg どの入力状態か
	 */
	private void CheckItemInput(int gKey, int mode, int flg){
		
		if(flg == MENU_ITEM_CUT){
			if(gKey == Display.KEY_UP){
				RECT_SPEED = RECT_SPEED_MIDLE;
				if(mode == 1){
					//batlingFlg = FLG_CMD_ITEM;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "");
						
					batlingFlg = FLG_CMD_PC;
					inputCnt = INPUT_KEY_CNT;
					
				}else{
					menuCmnd = MENU_MAIN;
					menuCurPoint = MENU_MAIN_ITEM;
					inputCnt = INPUT_CNT;
				}
				
			}else if((gKey == Display.KEY_DOWN || gKey == Display.KEY_SELECT)
					&& intputMenuCnt <= 0){
				
				if(item.haveItem[viewMode - Item.VIEW_ALL] > 0){
					if(mode == 1){
						batlingFlg = MENU_ITEM;
					}else{
						menuCmnd = MENU_ITEM;
					}
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_SHORT;
					intputMenuCnt = INPUT_CNT;
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if(gKey == Display.KEY_RIGHT){
				if(menuCurPoint < Item.VIEW_ALL +4){
					RECT_SPEED = RECT_SPEED_MIDLE;
					menuCurPoint++;
					viewMode++;
					inputCnt = INPUT_KEY_CNT;	
				}else{
					RECT_SPEED = RECT_SPEED_LONG;
					menuCurPoint = Item.VIEW_ALL;
					viewMode = Item.VIEW_ALL;
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if(gKey == Display.KEY_LEFT){	
				if(menuCurPoint > Item.VIEW_ALL){
					menuCurPoint--;
					viewMode--;
					RECT_SPEED = RECT_SPEED_MIDLE;
					inputCnt = INPUT_KEY_CNT;
				}else{
					RECT_SPEED = RECT_SPEED_LONG;
					menuCurPoint = Item.VIEW_ALL + 4;
					viewMode = Item.VIEW_ALL + 4;
					inputCnt = INPUT_KEY_CNT;
				}
			
			}
		}
					
					
		if(flg == MENU_ITEM){
			if(gKey == Display.KEY_UP){
				RECT_SPEED = RECT_SPEED_MIDLE;
				if(menuCurPoint <= 1){
					if(mode == 1){
						batlingFlg = MENU_ITEM_CUT;
					}else{
						menuCmnd = MENU_ITEM_CUT;
					}
					
					menuCurPoint = viewMode;
					
				}else{
					menuCurPoint -= 2;
					
					if(menuCurPoint - pageTop < 0){
						pageTop -= 2;
					}
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_DOWN){
				if(menuCurPoint < item.haveItem[viewMode - Item.VIEW_ALL] - 1){
					menuCurPoint += 2;
					RECT_SPEED = RECT_SPEED_SHORT;
					
					if(menuCurPoint  == item.haveItem[viewMode - Item.VIEW_ALL] && menuCurPoint % 2 == 1){
						menuCurPoint--;
						RECT_SPEED = RECT_SPEED_MIDLE;
					}else if(menuCurPoint  == item.haveItem[viewMode - Item.VIEW_ALL] && menuCurPoint % 2 == 0){
						menuCurPoint -= 2;
					}
					
					if(menuCurPoint - pageTop > 11){
						pageTop += 2;
					}
					
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if(gKey == Display.KEY_RIGHT){
				if(menuCurPoint < item.haveItem[viewMode - Item.VIEW_ALL] - 1){
					RECT_SPEED = RECT_SPEED_MIDLE;
					if(menuCurPoint % 2 == 0){
						menuCurPoint++;
						inputCnt = INPUT_KEY_CNT;
					}else{
						//カーソルを一番下に移動する
						if(item.haveItem[viewMode - Item.VIEW_ALL] - pageTop < 13){
							if(item.haveItem[viewMode - Item.VIEW_ALL] % 2 == 1){
								menuCurPoint = item.haveItem[viewMode - Item.VIEW_ALL] - 2;
							}else{
								menuCurPoint = item.haveItem[viewMode - Item.VIEW_ALL] - 1;
							}
							inputCnt = INPUT_KEY_CNT;
						}
						
						//ページ送り
						if(item.haveItem[viewMode - Item.VIEW_ALL] - pageTop > 24){
							menuCurPoint += 12;
							pageTop += 12;
							if(menuCurPoint >= item.haveItem[viewMode - Item.VIEW_ALL]){
								menuCurPoint -= 2;
							}
							inputCnt = INPUT_KEY_CNT;
						}else if(item.haveItem[viewMode - Item.VIEW_ALL] - pageTop >= 12){
							menuCurPoint += item.haveItem[viewMode - Item.VIEW_ALL] - pageTop - 12 + (item.haveItem[viewMode - Item.VIEW_ALL] % 2);
							pageTop += item.haveItem[viewMode - Item.VIEW_ALL] - pageTop - 12 + (item.haveItem[viewMode - Item.VIEW_ALL] % 2);
							if(menuCurPoint >= item.haveItem[viewMode - Item.VIEW_ALL]){
								menuCurPoint -= 2;
							}
							inputCnt = INPUT_KEY_CNT;
						}
						
					}
					
				}else if(menuCurPoint == item.haveItem[viewMode - Item.VIEW_ALL] - 1){
					RECT_SPEED = RECT_SPEED_MIDLE;
					if(menuCurPoint % 2 == 0){
						if(menuCurPoint > 0){
							menuCurPoint--;
							inputCnt = INPUT_KEY_CNT;
						}
					}
				}
				
			}else if(gKey == Display.KEY_LEFT){	
				RECT_SPEED = RECT_SPEED_MIDLE;
				if(menuCurPoint % 2 == 1){
					menuCurPoint--;
					inputCnt = INPUT_KEY_CNT;
				}else{
					//カーソルを一番上に移動する
					if(pageTop == 0){
						menuCurPoint = 0;
						inputCnt = INPUT_KEY_CNT;
					}
					
					//ページ送り
					if(pageTop >= 12){
						menuCurPoint -= 12;
						pageTop -= 12;
						inputCnt = INPUT_KEY_CNT;
					}else if(pageTop < 12){
						menuCurPoint -= pageTop;
						pageTop = 0;
						inputCnt = INPUT_KEY_CNT;
					}
					
				}
			
				
			}else if(gKey == Display.KEY_SELECT && intputMenuCnt <= 0){

					if(item.usePoint == 0 || item.usePoint == mode){
						if(item.tag == 0){
							/*
							batlingFlg = FLG_CMD_ATK_SKILL;
							Battle.ptm[batSetChar].skillNo = skill.no;
							selectChar = 0;
							for(int i = 0; i < Battle.ENE_MAX_NUM; i++){
								if(Battle.ene[i].live == 1){
									selectChar = i;
									break;
								}
							}
							c.setSoftLabel(Canvas.SOFT_KEY_1, "");
							inputCnt = INPUT_KEY_CNT;
						*/
							
						}else if(item.tag == 1){
							/*
							for(int i = batSetChar; i < ptNum; i++){
								Battle.ptm[batSetChar].skillNo = skill.no;
								Battle.ptm[batSetChar].tage = 0;
								Battle.ptm[selectChar].rectView = 0;
								batSetChar++;
								if(batSetChar > ptNum - 1){
									batlingFlg = FLG_CMD_LAST;
								}else{
									if(Battle.ptm[batSetChar].live == STAT_LIVE){
										batlingFlg = FLG_CMD_PC;
										break;
									}else{
										
									}
								}
							}
							c.setSoftLabel(Canvas.SOFT_KEY_1, "");
							inputCnt = INPUT_KEY_CNT;
							*/
							
						}else if(item.tag == 10){
							if(item.no == 52 &&terepNot != 0){
								//テレポ禁止中なら脱出アイテムは使用不可
							}else{
								if(mode == 1){
									Battle.ptm[batSetChar].itemNo = item.no;
									batlingFlg = MENU_ITEM_SUP;
									c.setSoftLabel(Canvas.SOFT_KEY_1, "");		
									
								}else{
									menuCmnd = MENU_ITEM_SUP;
									batSetChar = 0;
								}
								
								selectChar = 0;
								
								if(item.type != Item.REC_DEAD_REC){
									for(int i = 0; i < 4; i++){
										if(Battle.ptm[i].live != STAT_DEAD){
											selectChar = i;
											break;
										}
									}
								}
								
								Battle.ptm[selectChar].rectView = 1;
								intputMenuCnt = INPUT_CNT;
							}
						}
					}
					
				}	
		
		
			
		}else if(flg == MENU_ITEM_SUP){
			if(gKey == Display.KEY_UP){
					if(mode == 1){
						
						batlingFlg = MENU_ITEM;
						
					}else{
						menuCmnd = MENU_ITEM;
					}
				
				Battle.ptm[selectChar].rectView = 0;
				Battle.ptm[batSetChar].rectView = 0;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_LEFT){
				if(item.type != Item.MOVE_ETC){
					if(item.type != Item.REC_DEAD_REC){
						CheckSelectPt(0, 0);
					}else{
						CheckSelectPt(0, 1);
					}
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if(gKey == Display.KEY_RIGHT){
				if(item.type != Item.MOVE_ETC){
					if(item.type != Item.REC_DEAD_REC){
						CheckSelectPt(1, 0);
					}else{
						CheckSelectPt(1, 1);
					}
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if((gKey() == Display.KEY_DOWN || gKey() == Display.KEY_SELECT)
					&& intputMenuCnt <= 0){
				//ターゲット決定
				Battle.ptm[batSetChar].tage = selectChar;
				
				if(mode == 1){
					itemList[item.no]--;	//アイテムの数を減らす
					
					//戦闘中なら次のキャラへ以降、もしくは最終決定コマンド表示に以降
					for(int i = batSetChar; i < ptNum; i++){
						batSetChar++;
						if(batSetChar > ptNum - 1){
							batlingFlg = FLG_CMD_LAST;
						}else{
							if(Battle.ptm[batSetChar].live == STAT_LIVE){
								batlingFlg = FLG_CMD_PC;
								break;
							}else{
								
							}
						}
					}
					Battle.ptm[selectChar].rectView = 0;
					inputCnt = INPUT_KEY_CNT;
					
				}else{
					//移動中ならアイテム使用
					if(item.type == Item.REC_HP_REC){
						//HP回復アイテム使用
						ItemEvent.HealMoveCraete(batSetChar, item.atk);
					}else if(item.type == Item.REC_MP_REC){
						//MP回復アイテム使用
						ItemEvent.HealMpMoveCraete(batSetChar, item.atk);
					}else if(item.type == Item.REC_DEAD_REC){
						//復活アイテム使用
						ItemEvent.HealDeadMoveCraete(batSetChar, item.atk);
					}else if(item.type == Item.MOVE_ETC){
						//エンカウント率上昇
						if(item.no == 50){
							encUp = 1;
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
						}else if(item.no == 51){
							encUp = -1;
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
						}else if(item.no == 52){
							//脱出スキル使用
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
							MoveEve(1, wordPointNowIn, 0, 0);
						}
						
						Battle.ptm[selectChar].rectView = 0;
						Battle.ptm[batSetChar].rectView = 0;
					}
					
					if(item.useOut == 1){
						//1回で壊れるものなら減らす
						itemList[item.no]--;
					}
					if(itemList[item.no] <= 0){
						menuCmnd = MENU_ITEM;
						Battle.ptm[selectChar].rectView = 0;
						Battle.ptm[batSetChar].rectView = 0;
					}
					itemEvent.Reflesh();
					intputMenuCnt = INPUT_CNT;
				}
			}
			
		}
		
		if(gKey == Display.KEY_SOFT1){
			
			if(mode == 1){
				batlingFlg = FLG_CMD_PC;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "");
				
				intputMenuCnt = INPUT_KEY_CNT;
			}
		}
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 石変更中の入力
	 * @param flg どの入力状態か
	 */
	private void CheckStoneInput(int gKey, int flg){
		
		if(flg == MENU_STONE_LIST){
			if(gKey == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCurPoint = MENU_STONE_2 - MENU_STONE_1;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
				inputCnt = INPUT_KEY_CNT;
				
				if(stoneViewMode > 2){
					//スキル表示が2ページ目以降なら1ページ目に戻す
					stoneViewMode = 2;
				}
				
			}else if(gKey == Display.KEY_DOWN){
				menuCurPoint++;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint > MENU_STONE_2 - MENU_STONE_1){
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_SHORT;
				}
				inputCnt = INPUT_KEY_CNT;
				
				if(stoneViewMode > 2){
					//スキル表示が2ページ目以降なら1ページ目に戻す
					stoneViewMode = 2;
				}
				
			}else if((gKey == Display.KEY_SELECT || gKey == Display.KEY_RIGHT)
					&& intputMenuCnt <= 0){
				
				menuCmnd = menuCurPoint + MENU_STONE_1;
				menuCurPoint = 0;
				pageTop = 0;
				RECT_SPEED = RECT_SPEED_SHORT;
				inputCnt = INPUT_KEY_CNT;
				intputMenuCnt = INPUT_CNT;
				
				if(stoneViewMode > 2){
					//スキル表示が2ページ目以降なら1ページ目に戻す
					stoneViewMode = 2;
				}
				
				//石一覧更新
				Stone.Reflesh(0);
				
			}else if(gKey == Display.KEY_LEFT){	
				Battle.ptm[batSetChar].rectView = 1;
				menuCmnd = MENU_STONE;
				inputCnt = INPUT_CNT;
				
				if(stoneViewMode > 2){
					//スキル表示が2ページ目以降なら1ページ目に戻す
					stoneViewMode = 2;
				}
			
			}
			
		}else if(flg >= MENU_STONE_1 && flg <= MENU_STONE_2){
			if(gKey == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCmnd = MENU_STONE_LIST;
					menuCurPoint = flg - MENU_STONE_1;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				}else{
					inputCnt = INPUT_KEY_CNT;
					
				}
				if(menuCurPoint - pageTop < 0){
					pageTop--;
				}
				
				if(stoneViewMode > 2){
					//スキル表示が2ページ目以降なら1ページ目に戻す
					stoneViewMode = 2;
				}
				
				
			}else if(gKey == Display.KEY_DOWN){
				if(menuCurPoint < stoneHave){
					RECT_SPEED = RECT_SPEED_SHORT;
					menuCurPoint++;
					
					if(menuCurPoint - pageTop > 6){
						pageTop++;
					}
					
					inputCnt = INPUT_KEY_CNT;
					
					if(stoneViewMode > 2){
						//スキル表示が2ページ目以降なら1ページ目に戻す
						stoneViewMode = 2;
					}
					
				}
				
			}else if(gKey == Display.KEY_RIGHT){
				if(menuCurPoint < stoneHave){
					//カーソルを一番下に移動する
					if(stoneHave - pageTop <= 6){
						RECT_SPEED = RECT_SPEED_MIDLE;
						menuCurPoint = stoneHave ;
						inputCnt = INPUT_KEY_CNT;
					}
					
					//ページ送り
					if(stoneHave - pageTop > 12){
						menuCurPoint += 6;
						pageTop += 6;
						inputCnt = INPUT_KEY_CNT;
					}else if(stoneHave >= 6){
						menuCurPoint += stoneHave - pageTop - 6;
						pageTop += stoneHave - pageTop - 6;
						inputCnt = INPUT_KEY_CNT;
						if(menuCurPoint >= stoneHave){
							menuCurPoint = stoneHave;
						}
					}
					
					if(stoneViewMode > 2){
						//スキル表示が2ページ目以降なら1ページ目に戻す
						stoneViewMode = 2;
					}
					
				}
				
			}else if(gKey == Display.KEY_LEFT){
				//戻る
				if(pageTop == 0 && menuCurPoint <= 0){
					menuCmnd = MENU_STONE_LIST;
					menuCurPoint = flg - MENU_STONE_1;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				//カーソルを一番上に移動する
				}else if(pageTop == 0){
					RECT_SPEED = RECT_SPEED_MIDLE;
					menuCurPoint = 0;
					inputCnt = INPUT_KEY_CNT;
				}
				
				//ページ送り
				if(pageTop >= 7){
					menuCurPoint -= 7;
					pageTop -= 7;
					inputCnt = INPUT_KEY_CNT;
				}else if(pageTop < 7){
					RECT_SPEED = RECT_SPEED_MIDLE;
					menuCurPoint -= pageTop;
					pageTop = 0;
					inputCnt = INPUT_KEY_CNT;
				}
				
				if(stoneViewMode > 2){
					//スキル表示が2ページ目以降なら1ページ目に戻す
					stoneViewMode = 2;
				}
				
			}else if(gKey == Display.KEY_SELECT && intputMenuCnt <= 0){
				if(menuCurPoint == 0){
					//石解除
					if(flg == MENU_STONE_1){
						Battle.ptm[batSetChar].eStone[0] = 0;
					}else if(flg == MENU_STONE_2){
						Battle.ptm[batSetChar].eStone[1] = 0;
					}
					
					Title.StatCheck(batSetChar, 0);
					skill.PtSkill(batSetChar);
					menuCmnd = MENU_STONE_LIST;
					menuCurPoint = flg - MENU_STONE_1;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				}else{
					//石変更
					//同じものを装備してる場合は変更できない
					if(Battle.ptm[batSetChar].eStone[0] == stoneViewList[menuCurPoint - 1] ||
							Battle.ptm[batSetChar].eStone[1] == stoneViewList[menuCurPoint - 1]){
					}else{
						if(menuCmnd == MENU_STONE_1){
							Battle.ptm[batSetChar].eStone[0] = stoneViewList[menuCurPoint - 1];
						}else if(flg == MENU_STONE_2){
							Battle.ptm[batSetChar].eStone[1] = stoneViewList[menuCurPoint - 1];
						}
						
						Title.StatCheck(batSetChar, 0);
						skill.PtSkill(batSetChar);
						menuCmnd = MENU_STONE_LIST;
						menuCurPoint = flg - MENU_STONE_1;
						RECT_SPEED = RECT_SPEED_MIDLE;
						inputCnt = INPUT_KEY_CNT;
						intputMenuCnt = INPUT_CNT;
					}
				}
				
			}
		}
		
		if(gKey() == Display.KEY_SOFT2 || gKey() == Display.KEY_3){
			StoneStatChangeCheck(0);
			
			inputCnt = INPUT_CNT;
		}else if(gKey() == Display.KEY_1){
			StoneStatChangeCheck(1);
			
			inputCnt = INPUT_CNT;
		}
		
		if(gKey() == Display.KEY_5){
			sortMode++;
			if(sortMode > SORT_KIND){
				sortMode = 0;
			}
			StoneViewListReflesh(sortMode);
			inputCnt = INPUT_CNT;
		}else if(gKey() == Display.KEY_2){
			sortMode--;
			if(sortMode < 0){
				sortMode = SORT_KIND;
			}
			StoneViewListReflesh(sortMode);
			inputCnt = INPUT_CNT;
		}
		
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 石の表示リストを更新する
	 * @param mode=0 標準
	 * @param mode=1 レベル順
	 * @param mode=2 STR順
	 * @param mode=3 AGI順
	 * @param mode=4 VIT順
	 * @param mode=5 INT順
	 * @param mode=6 LUK順
	 */
	public static void StoneViewListReflesh(int mode){
		
		int j;
		switch(mode){
		case 0:
			//ソートせずに格納
			for(int i = 0; i < ALL_STONE; i++){
				stoneViewList[i] = stoneHaveList[i];
			}
			break;
			
		case 1:
			//レベル（経験値）順でソート
			j = 0;
			for(int chk = Stone.STONE_MAX_LEVEL; chk > 0; chk--){
				for(int i = 0; i < stoneHave; i++){
					if(stoneList[stoneHaveList[i]] == chk){
						stoneViewList[j] = stoneHaveList[i];
						j++;
					}
				}
			}
			break;
			
		case 2:
			//STR順でソート
			j = 0;
			for(int chk = 51; chk > -51; chk--){
				for(int i = 0; i < stoneHave; i++){
					stone.StoneList(stoneHaveList[i]);
					if(stone.str == chk){
						stoneViewList[j] = stoneHaveList[i];
						j++;
					}
				}
			}
			break;
			
		case 3:
			//AGI順でソート
			j = 0;
			for(int chk = 51; chk > -51; chk--){
				for(int i = 0; i < stoneHave; i++){
					stone.StoneList(stoneHaveList[i]);
					if(stone.agi == chk){
						stoneViewList[j] = stoneHaveList[i];
						j++;
					}
				}
			}
			break;
			
		case 4:
			//VIT順でソート
			j = 0;
			for(int chk = 51; chk > -51; chk--){
				for(int i = 0; i < stoneHave; i++){
					stone.StoneList(stoneHaveList[i]);
					if(stone.vit == chk){
						stoneViewList[j] = stoneHaveList[i];
						j++;
					}
				}
			}
			break;
			
		case 5:
			//STR順でソート
			j = 0;
			for(int chk = 51; chk > -51; chk--){
				for(int i = 0; i < stoneHave; i++){
					stone.StoneList(stoneHaveList[i]);
					if(stone.inte == chk){
						stoneViewList[j] = stoneHaveList[i];
						j++;
					}
				}
			}
			break;
			
		case 6:
			//STR順でソート
			j = 0;
			for(int chk = 51; chk > -51; chk--){
				for(int i = 0; i < stoneHave; i++){
					stone.StoneList(stoneHaveList[i]);
					if(stone.luk == chk){
						stoneViewList[j] = stoneHaveList[i];
						j++;
					}
				}
			}
			break;
		}
		
		
	}
	

	
//------------------------------------------------------------------------------------------------------
	/**
	 * 石ステータス表示の切り替え入力チェック
	 */
	private void StoneStatChangeCheck(int mode){
		
		//石のスキル数をカウント
		int c = 0;
		for(int i = 0; i < Stone.STONE_MAX_LEVEL; i++){
			if(stone.skill[i] > 0){
				c++;
			}
		}
		
		//modeが0なら順送り
		if(mode == 0){
			stoneViewMode++;
			if(stoneViewMode > 2 + ((c - 1) / 8)){
				stoneViewMode = 0;
			}
		}else{
			stoneViewMode--;
			if(stoneViewMode < 0){
				stoneViewMode = 2 + ((c - 1) / 8);
			}
		}
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 装備変更中の入力
	 * @param flg どの入力状態か
	 */
	private void CheckEqInput(int gKey, int flg){
		
		if(flg == MENU_EQ_LIST){
			if(gKey == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCurPoint = MENU_EQ_ACS2 - MENU_EQ_WEP;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_DOWN){
				menuCurPoint++;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint > MENU_EQ_ACS2 - MENU_EQ_WEP){
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey == Display.KEY_SELECT || gKey == Display.KEY_RIGHT)
					&& intputMenuCnt <= 0){
			
				menuCmnd = menuCurPoint + MENU_EQ_WEP;
				menuCurPoint = 0;
				pageTop = 0;
				RECT_SPEED = RECT_SPEED_SHORT;
				inputCnt = INPUT_KEY_CNT;
				intputMenuCnt = INPUT_CNT;
				
				//装備一覧を表示するために一時的にそれらを格納しておく
				itemEvent.Reflesh();
				showNum = 1;
				showItems[0] = 0;
				for(int i = item.haveItem[0] - 1 ;i > 0; i--){
					if(itemList[itemAllList[i]] > 0){
						item.ItemList(itemAllList[i]);
						if(menuCmnd == MENU_EQ_WEP){
							if(item.type >= 10 && item.type < 30){
								showItems[showNum] = item.no;
								showNum++;
							}
						}else if(menuCmnd == MENU_EQ_ARM){
							if(item.type == Item.GUD_ARMOR || item.type == Item.GUD_CLOTH){
								showItems[showNum] = item.no;
								showNum++;
							}
						}else if(menuCmnd == MENU_EQ_GUD){
							if(item.type == Item.GUD_GURD){
								showItems[showNum] = item.no;
								showNum++;
							}
						}else if(menuCmnd == MENU_EQ_HELM){
							if(item.type == Item.GUD_HELM || item.type == Item.GUD_HATR){
								showItems[showNum] = item.no;
								showNum++;
							}
						}else if(menuCmnd == MENU_EQ_ACS1 || menuCmnd == MENU_EQ_ACS2){
							if(item.type == Item.GUD_ACCE){
								showItems[showNum] = item.no;
								showNum++;
							}
						}
					}
				}
				
			}else if(gKey == Display.KEY_LEFT){	
				Battle.ptm[batSetChar].rectView = 1;
				menuCmnd = MENU_EQ;
				inputCnt = INPUT_CNT;
			
			}
			
			
		}else if(flg >= MENU_EQ_WEP && flg <= MENU_EQ_ACS2){
			if(gKey == Display.KEY_UP){
				menuCurPoint--;
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint < 0){
					menuCmnd = MENU_EQ_LIST;
					menuCurPoint = flg - MENU_EQ_WEP;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				}else{
					inputCnt = INPUT_KEY_CNT;
					
				}
				if(menuCurPoint - pageTop < 0){
					pageTop--;
				}
	
				
			}else if(gKey == Display.KEY_DOWN){
				if(menuCurPoint < showNum - 1){
					RECT_SPEED = RECT_SPEED_SHORT;
					menuCurPoint++;
					
					if(menuCurPoint - pageTop > 6){
						pageTop++;
					}
					
					inputCnt = INPUT_KEY_CNT;					
				}
				
			}else if(gKey == Display.KEY_RIGHT){
				if(menuCurPoint < showNum){
					//カーソルを一番下に移動する
					if(showNum - pageTop <= 7){
						RECT_SPEED = RECT_SPEED_MIDLE;
						menuCurPoint = showNum - 1;
						inputCnt = INPUT_KEY_CNT;
					}
					
					//ページ送り
					if(showNum - pageTop > 12){
						menuCurPoint += 6;
						pageTop += 6;
						inputCnt = INPUT_KEY_CNT;
					}else if(showNum >= 7){
						menuCurPoint += showNum - pageTop - 7;
						pageTop += showNum - pageTop - 7;
						inputCnt = INPUT_KEY_CNT;
					}
				}
				
			}else if(gKey == Display.KEY_LEFT){
				//戻る
				if(pageTop == 0 && menuCurPoint <= 0){
					menuCmnd = MENU_EQ_LIST;
					menuCurPoint = flg - MENU_EQ_WEP;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				//カーソルを一番上に移動する
				}else if(pageTop == 0){
					menuCurPoint = 0;
					RECT_SPEED = RECT_SPEED_MIDLE;
					inputCnt = INPUT_KEY_CNT;
				}
				
				//ページ送り
				if(pageTop >= 7){
					menuCurPoint -= 7;
					pageTop -= 7;
					inputCnt = INPUT_KEY_CNT;
				}else if(pageTop < 7){
					menuCurPoint -= pageTop;
					pageTop = 0;
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if(gKey == Display.KEY_SELECT && intputMenuCnt <= 0){
				if(menuCurPoint == 0){
					//装備解除
					if(flg == MENU_EQ_WEP){
						if(Battle.ptm[batSetChar].eWep != 0){
							itemList[Battle.ptm[batSetChar].eWep]++;
							Battle.ptm[batSetChar].eWep = 0;
						}
					}else if(flg == MENU_EQ_ARM){
						if(Battle.ptm[batSetChar].eArm != 0){
							itemList[Battle.ptm[batSetChar].eArm]++;
							Battle.ptm[batSetChar].eArm = 0;
						}
					}else if(flg == MENU_EQ_GUD){
						if(Battle.ptm[batSetChar].eGud != 0){
							itemList[Battle.ptm[batSetChar].eGud]++;
							Battle.ptm[batSetChar].eGud = 0;
						}
					}else if(flg == MENU_EQ_HELM){
						if(Battle.ptm[batSetChar].eHel != 0){
							itemList[Battle.ptm[batSetChar].eHel]++;
							Battle.ptm[batSetChar].eHel = 0;
						}
					}else if(flg == MENU_EQ_ACS1){
						if(Battle.ptm[batSetChar].eAc1 != 0){
							itemList[Battle.ptm[batSetChar].eAc1]++;
							Battle.ptm[batSetChar].eAc1 = 0;
						}
					}else if(flg == MENU_EQ_ACS2){
						if(Battle.ptm[batSetChar].eAc2 != 0){
							itemList[Battle.ptm[batSetChar].eAc2]++;
							Battle.ptm[batSetChar].eAc2 = 0;
						}
					}
					
					itemEvent.Reflesh();
					Title.StatCheck(batSetChar, 0);
					menuCmnd = MENU_EQ_LIST;
					menuCurPoint = flg - MENU_EQ_WEP;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				}else{
					//装備変更
					if(menuCmnd == MENU_EQ_WEP){
						itemList[Battle.ptm[batSetChar].eWep]++;
						Battle.ptm[batSetChar].eWep = showItems[menuCurPoint];
						itemList[Battle.ptm[batSetChar].eWep]--;
					}else if(flg == MENU_EQ_ARM){
						itemList[Battle.ptm[batSetChar].eArm]++;
						Battle.ptm[batSetChar].eArm = showItems[menuCurPoint];
						itemList[Battle.ptm[batSetChar].eArm]--;
					}else if(flg == MENU_EQ_GUD){
						itemList[Battle.ptm[batSetChar].eGud]++;
						Battle.ptm[batSetChar].eGud = showItems[menuCurPoint];
						itemList[Battle.ptm[batSetChar].eGud]--;
					}else if(flg == MENU_EQ_HELM){
						itemList[Battle.ptm[batSetChar].eHel]++;
						Battle.ptm[batSetChar].eHel = showItems[menuCurPoint];
						itemList[Battle.ptm[batSetChar].eHel]--;
					}else if(flg == MENU_EQ_ACS1){
						itemList[Battle.ptm[batSetChar].eAc1]++;
						Battle.ptm[batSetChar].eAc1 = showItems[menuCurPoint];
						itemList[Battle.ptm[batSetChar].eAc1]--;
					}else if(flg == MENU_EQ_ACS2){
						itemList[Battle.ptm[batSetChar].eAc2]++;
						Battle.ptm[batSetChar].eAc2 = showItems[menuCurPoint];
						itemList[Battle.ptm[batSetChar].eAc2]--;
					}
					
					itemList[0] = 0;
					itemEvent.Reflesh();
					Title.StatCheck(batSetChar, 0);
					menuCmnd = MENU_EQ_LIST;
					menuCurPoint = flg - MENU_EQ_WEP;
					RECT_SPEED = RECT_SPEED_MIDLE;
					inputCnt = INPUT_KEY_CNT;
					intputMenuCnt = INPUT_CNT;
					
				}
				
			}
		}
					
	
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * スキルリスト表示中の入力
	 * @param gkey キー番号
	 * @param mode 戦闘中1か移動中2か
	 * @param flg どの入力状態か
	 */
	private void CheckSkillInput(int gKey, int mode, int flg){
		
		if(flg == FLG_CMD_SKILL_USE_OR_SET){
			//使用かセットかの選択中-----------------------------------
			if(gKey == Display.KEY_UP){
				RECT_SPEED = RECT_SPEED_SHORT;
				if(mode == 1){
					batlingFlg = FLG_CMD_SKILL;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "");
						
				}else{
					Battle.ptm[batSetChar].rectView = 1;
					menuCmnd = MENU_SKILL;
				}
				SkillSetOn = 0;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_DOWN || gKey == Display.KEY_SELECT){
				if(mode == 1){
					if(menuCurPoint == 0){
						batlingFlg = FLG_CMD_SKILL_LIST;
					}else{
						batlingFlg = FLG_CMD_SKILL_SET;
					}
				}else{
					if(menuCurPoint == 0){
						menuCmnd = FLG_CMD_SKILL_LIST;
					}else{
						menuCmnd = FLG_CMD_SKILL_SET;
					}
				}
				
				actRctX = 16;
				actRctY = 62;
				menuCurPoint = 0;
				
				intputMenuCnt = INPUT_CNT;
				inputCnt = INPUT_KEY_CNT;
			
			}else if(gKey == Display.KEY_RIGHT || gKey == Display.KEY_LEFT){
				if(menuCurPoint == 0){
					menuCurPoint = 1;
					SkillSetOn = 1;
				}else{
					menuCurPoint = 0;
					SkillSetOn = 0;
				}
				
				RECT_SPEED = RECT_SPEED_MIDLE;
				inputCnt = INPUT_KEY_CNT;
			}
		
		}else if(flg == FLG_CMD_SKILL_SET){
			//ショートカット設定中の入力------------------------------------
			if(gKey == Display.KEY_LEFT){
				if(mode == 1){
					batlingFlg = FLG_CMD_SKILL_USE_OR_SET;
				}else{
					menuCmnd = FLG_CMD_SKILL_USE_OR_SET;
				}
				menuCurPoint = 1;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_UP){
				if(menuCurPoint == 0){
					menuCurPoint = 2;
				}else{
					menuCurPoint--;
				}
				RECT_SPEED = RECT_SPEED_SHORT;
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_DOWN){
				if(menuCurPoint == 2){
					menuCurPoint = 0;
				}else{
					menuCurPoint++;
				}
				RECT_SPEED = RECT_SPEED_SHORT;
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey == Display.KEY_RIGHT || gKey == Display.KEY_SELECT)
					&& intputMenuCnt <= 0){
				if(mode == 1){
					batlingFlg = FLG_CMD_SKILL_LIST;
					SkillSetOn = menuCurPoint + 1;
				}else{
					menuCmnd = FLG_CMD_SKILL_LIST;
					SkillSetOn = menuCurPoint + 1;
				}
				
				actRctX = 16;
				actRctY = 62;
				menuCurPoint = 0;
				
				intputMenuCnt = INPUT_CNT;
				
			}
					
		}else if(flg == FLG_CMD_SKILL_LIST){
			//スキル一覧表示中の入力----------------------------------------
			if(gKey == Display.KEY_UP){
				RECT_SPEED = RECT_SPEED_SHORT;
				if(menuCurPoint <= 1){
					if(mode == 1){
						if(SkillSetOn == 0){
							batlingFlg = FLG_CMD_SKILL_USE_OR_SET;
							menuCurPoint = 0;
						}else{
							batlingFlg = FLG_CMD_SKILL_SET;
							menuCurPoint = SkillSetOn - 1;
						}
					}else{
						if(SkillSetOn == 0){
							menuCmnd = FLG_CMD_SKILL_USE_OR_SET;
							menuCurPoint = 0;
						}else{
							menuCmnd = FLG_CMD_SKILL_SET;
							menuCurPoint = SkillSetOn - 1;
						}
					}
					
					RECT_SPEED = RECT_SPEED_MIDLE;
					
				}else{
					menuCurPoint -= 2;
					
					if(menuCurPoint - pageTop < 0){
						pageTop -= 2;
					}
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_DOWN){
				if(menuCurPoint < Battle.ptm[batSetChar].haveSkill - 1){
					menuCurPoint += 2;
					RECT_SPEED = RECT_SPEED_SHORT;
					
					if(menuCurPoint  == Battle.ptm[batSetChar].haveSkill && menuCurPoint % 2 == 1){
						menuCurPoint--;
						RECT_SPEED = RECT_SPEED_MIDLE;
					}else if(menuCurPoint  == Battle.ptm[batSetChar].haveSkill && menuCurPoint % 2 == 0){
						menuCurPoint -= 2;
					}
					
					if(menuCurPoint - pageTop > 11){
						pageTop += 2;
					}
					
					inputCnt = INPUT_KEY_CNT;
				}
				
			}else if(gKey == Display.KEY_RIGHT){
				if(menuCurPoint < Battle.ptm[batSetChar].haveSkill - 1){
					RECT_SPEED = RECT_SPEED_MIDLE;
					if(menuCurPoint % 2 == 0){
						menuCurPoint++;
						inputCnt = INPUT_KEY_CNT;
						
					}else{
						//カーソルを一番下に移動する
						if(Battle.ptm[batSetChar].haveSkill - pageTop < 13){
							if(Battle.ptm[batSetChar].haveSkill % 2 == 1){
								menuCurPoint = Battle.ptm[batSetChar].haveSkill - 2;
							}else{
								menuCurPoint = Battle.ptm[batSetChar].haveSkill - 1;
							}
							inputCnt = INPUT_KEY_CNT;
						}
						
						//ページ送り
						if(Battle.ptm[batSetChar].haveSkill - pageTop > 24){
							menuCurPoint += 12;
							pageTop += 12;
							if(menuCurPoint >= Battle.ptm[batSetChar].haveSkill){
								menuCurPoint -= 2;
							}
							inputCnt = INPUT_KEY_CNT;
						}else if(Battle.ptm[batSetChar].haveSkill - pageTop >= 12){
							menuCurPoint += Battle.ptm[batSetChar].haveSkill - pageTop - 12 + (Battle.ptm[batSetChar].haveSkill % 2);
							pageTop += Battle.ptm[batSetChar].haveSkill - pageTop - 12 + (Battle.ptm[batSetChar].haveSkill % 2);
							if(menuCurPoint >= Battle.ptm[batSetChar].haveSkill){
								menuCurPoint -= 2;
							}
							inputCnt = INPUT_KEY_CNT;
						}
					}
					
				}else if(menuCurPoint == Battle.ptm[batSetChar].haveSkill - 1){
					RECT_SPEED = RECT_SPEED_MIDLE;
					if(menuCurPoint % 2 == 0){
						if(menuCurPoint > 0){
							menuCurPoint--;
							inputCnt = INPUT_KEY_CNT;
						}
					}
				}
				
			}else if(gKey == Display.KEY_LEFT){	
				RECT_SPEED = RECT_SPEED_MIDLE;
				if(menuCurPoint % 2 == 1){
					menuCurPoint--;
					inputCnt = INPUT_KEY_CNT;	
				}else{
					//カーソルを一番上に移動する
					if(pageTop == 0){
						menuCurPoint = 0;
						inputCnt = INPUT_KEY_CNT;
					}
					
					//ページ送り
					if(pageTop >= 12){
						menuCurPoint -= 12;
						pageTop -= 12;
						inputCnt = INPUT_KEY_CNT;
					}else if(pageTop < 12){
						menuCurPoint -= pageTop;
						pageTop = 0;
						inputCnt = INPUT_KEY_CNT;
					}
					
				}
			
			}else if(gKey == Display.KEY_SELECT && intputMenuCnt <= 0){
				//ショートカット設定中の動き-----------------
				if(SkillSetOn > 0 && Battle.ptm[batSetChar].haveSkill > 0){
					if(skill.usePoint == 0 || skill.usePoint == 1){
						if(mode == 1){
							batlingFlg = FLG_CMD_SKILL_SET;
						}else{
							menuCmnd = FLG_CMD_SKILL_SET;
						}
						Battle.ptm[batSetChar].setSkill[SkillSetOn - 1] = skill.no;
						Battle.ptm[batSetChar].setSkillView[SkillSetOn - 1] = 1;
						
						pageTop = 0;
						menuCurPoint = SkillSetOn - 1;
						inputCnt = INPUT_CNT;
						
					}
					
				}else{
				//スキル使用するときの動き
					//MPが必要量あれば選択できる
					if(Battle.ptm[batSetChar].mp >= skill.mp && Battle.ptm[batSetChar].haveSkill > 0){
						if(skill.usePoint == 0 || skill.usePoint == mode){
							if(skill.tag == 0){
								batlingFlg = FLG_CMD_ATK_SKILL;
								Battle.ptm[batSetChar].skillNo = skill.no;
								selectChar = 0;
								for(int i = 0; i < Battle.ENE_MAX_NUM; i++){
									if(Battle.ene[i].live == 1){
										selectChar = i;
										break;
									}
								}
								c.setSoftLabel(Canvas.SOFT_KEY_1, "");
								inputCnt = INPUT_KEY_CNT;
							
							}else if(skill.tag == 1){
								for(int i = batSetChar; i < ptNum; i++){
									Battle.ptm[batSetChar].skillNo = skill.no;
									Battle.ptm[batSetChar].tage = 0;
									Battle.ptm[selectChar].rectView = 0;
									batSetChar++;
									if(batSetChar > ptNum - 1){
										batlingFlg = FLG_CMD_LAST;
									}else{
										if(Battle.ptm[batSetChar].live == STAT_LIVE){
											batlingFlg = FLG_CMD_PC;
											break;
										}else{
											
										}
									}
								}
								c.setSoftLabel(Canvas.SOFT_KEY_1, "");
								inputCnt = INPUT_KEY_CNT;
								
							}else if(skill.tag == 10){
								if(mode == 1){
									batlingFlg = FLG_CMD_SUP_SKILL;
									c.setSoftLabel(Canvas.SOFT_KEY_1, "");		
								}else{
									menuCmnd = FLG_CMD_SUP_SKILL;
									Battle.ptm[batSetChar].rectView = 0;
								}
								Battle.ptm[batSetChar].skillNo = skill.no;
								selectChar = 0;
								
								if(skill.no != 31 && skill.no != 32){
									for(int i = 0; i < 4; i++){
										if(Battle.ptm[i].live != STAT_DEAD){
											selectChar = i;
											break;
										}
									}
								}
								
								Battle.ptm[selectChar].rectView = 1;
								intputMenuCnt = INPUT_KEY_CNT;
								
							}else if(skill.tag == 20){
								if(skill.no == 482 && terepNot != 0){
									//テレポ禁止中なら脱出不可
								}else{
									menuCmnd = FLG_CMD_SUP_SKILL;
									
									Battle.ptm[batSetChar].skillNo = skill.no;
									selectChar = 0;
									for(int i = 0; i < 4; i++){
										if(Battle.ptm[i].live != STAT_DEAD){
											selectChar = i;
											break;
										}
									}
									
									if(skill.no >= 481 && skill.no <= 483){
										Battle.ptm[batSetChar].rectView = 1;
									}
									
									intputMenuCnt = INPUT_KEY_CNT;
								}
								
							}else if(skill.tag == 11){
								if(mode == 1){
									for(int i = batSetChar; i < ptNum; i++){
										Battle.ptm[batSetChar].skillNo = skill.no;
										Battle.ptm[batSetChar].tage = 0;
										Battle.ptm[selectChar].rectView = 0;
										batSetChar++;
										if(batSetChar > ptNum - 1){
											batlingFlg = FLG_CMD_LAST;
										}else{
											if(Battle.ptm[batSetChar].live == STAT_LIVE){
												batlingFlg = FLG_CMD_PC;
												break;
											}else{
												
											}
										}
									}
									c.setSoftLabel(Canvas.SOFT_KEY_1, "");
									inputCnt = INPUT_KEY_CNT;
									
								}else{
									Battle.ptm[batSetChar].mp -= skill.mp;
									Skill.HealMoveCraeteAll(batSetChar, Skill.HealCalc(0, batSetChar, skill.atk));
									if(Battle.ptm[batSetChar].mp < skill.mp){
										menuCmnd = FLG_CMD_SKILL_LIST;
										Battle.ptm[selectChar].rectView = 0;
										Battle.ptm[batSetChar].rectView = 1;
									}
									inputCnt = INPUT_CNT;
								}
								
							}
						}
					}	
				}
			}	
		
		}else if(flg == FLG_CMD_SUP_SKILL || flg == FLG_CMD_SUP_SKILL_SC){
			if(gKey == Display.KEY_UP){
				if(flg == FLG_CMD_SUP_SKILL){
					if(mode == 1){
						batlingFlg = FLG_CMD_SKILL_LIST;
					}else{
						menuCmnd = FLG_CMD_SKILL_LIST;
					}
				}else{
					batlingFlg = FLG_CMD_SKILL;
					c.setSoftLabel(Canvas.SOFT_KEY_1, "");
				}
				
				if(skill.no == 481 && skill.no <= 490){
					Battle.ptm[0].rectView = 0;
					Battle.ptm[1].rectView = 0;
					Battle.ptm[2].rectView = 0;
					Battle.ptm[3].rectView = 0;
				}else{
					Battle.ptm[selectChar].rectView = 0;
					Battle.ptm[batSetChar].rectView = 0;
				}
				
				RECT_SPEED = RECT_SPEED_MIDLE;
				
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_LEFT){
				
				if(skill.no == 481 && skill.no <= 490){
					//キャラ指定できない
				}else if(skill.no == 31 || skill.no == 32){
					CheckSelectPt(0, 1);
				}else{
					CheckSelectPt(0, 0);
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if(gKey == Display.KEY_RIGHT){
				
				if(skill.no >= 481 && skill.no <= 490){
					//キャラ指定できない
				}else if(skill.no == 31 || skill.no == 32){
					CheckSelectPt(1, 1);
				}else{
					CheckSelectPt(1, 0);
				}
				inputCnt = INPUT_KEY_CNT;
				
			}else if((gKey() == Display.KEY_DOWN && intputMenuCnt <= 0) || 
					(gKey() == Display.KEY_SELECT && intputMenuCnt <= 0)){
				//ターゲット決定
				Battle.ptm[batSetChar].tage = selectChar;
				
				if(mode == 1){
					//戦闘中なら次のキャラへ以降、もしくは最終決定コマンド表示に以降
					for(int i = batSetChar; i < ptNum; i++){
						batSetChar++;
						if(batSetChar > ptNum - 1){
							batlingFlg = FLG_CMD_LAST;
						}else{
							if(Battle.ptm[batSetChar].live == STAT_LIVE){
								batlingFlg = FLG_CMD_PC;
								break;
							}else{
								
							}
						}
					}
					Battle.ptm[selectChar].rectView = 0;
					inputCnt = INPUT_KEY_CNT;
					
				}else{
					//移動中ならスキル使用
					if(skill.tag == 10){
						//回復スキル使用
						//対象のHPが減っているときのみ使用可能
						if(Battle.ptm[selectChar].hp < Battle.ptm[selectChar].mhp){
							Battle.ptm[batSetChar].mp -= skill.mp;
							Skill.HealMoveCraete(batSetChar, Skill.HealCalc(0, batSetChar, skill.atk));
							if(Battle.ptm[batSetChar].mp < skill.mp){
								menuCmnd = FLG_CMD_SKILL_LIST;
								Battle.ptm[selectChar].rectView = 0;
								Battle.ptm[batSetChar].rectView = 0;
							}
						}
						
					}else if(skill.tag == 20){
						if(skill.no == 481){
							//次のレベルまでの経験値表示
							Battle.ptm[batSetChar].mp -= skill.mp;
							if(showNext > 0){
								showNext = 0;
							}else{
								showNext = 1;
							}
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
							Battle.ptm[0].rectView = 0;
							Battle.ptm[1].rectView = 0;
							Battle.ptm[2].rectView = 0;
							Battle.ptm[3].rectView = 0;
							
						}else if(skill.no == 482){
							//脱出スキル使用
							Battle.ptm[batSetChar].mp -= skill.mp;
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
							Battle.ptm[0].rectView = 0;
							Battle.ptm[1].rectView = 0;
							Battle.ptm[2].rectView = 0;
							Battle.ptm[3].rectView = 0;
							
							MoveEve(1, wordPointNowIn, 0, 0);
							
						}else if(skill.no == 483){
							//エンカウント率上昇スキル使用
							Battle.ptm[batSetChar].mp -= skill.mp;
							if(encUp > 0){
								encUp = 0;
							}else{
								encUp = 1;
							}
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
							Battle.ptm[0].rectView = 0;
							Battle.ptm[1].rectView = 0;
							Battle.ptm[2].rectView = 0;
							Battle.ptm[3].rectView = 0;
							
						}else if(skill.no == 484){
							//エンカウント率下降スキル使用
							Battle.ptm[batSetChar].mp -= skill.mp;
							if(encUp < 0){
								encUp = 0;
							}else{
								encUp = -1;
							}
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
							Battle.ptm[0].rectView = 0;
							Battle.ptm[1].rectView = 0;
							Battle.ptm[2].rectView = 0;
							Battle.ptm[3].rectView = 0;
							
						}else if(skill.no == 490){
							//エンカウント無効スキル使用
							Battle.ptm[batSetChar].mp -= skill.mp;
							if(encUp <= -100){
								encUp = 0;
							}else{
								encUp = -100 -batSetChar; //誰が使ったかを一緒にセット（MP減少に使用
							}
							menuVisible = 0;
							menuClose();
							menuCmnd = MENU_MAIN;
							Battle.ptm[0].rectView = 0;
							Battle.ptm[1].rectView = 0;
							Battle.ptm[2].rectView = 0;
							Battle.ptm[3].rectView = 0;
							
						}
					}
					
					intputMenuCnt = INPUT_CNT;
				}
			}
			
		}
		
		if(gKey == Display.KEY_SOFT1){
			
			if(mode == 1){
				batlingFlg = FLG_CMD_SKILL;
				c.setSoftLabel(Canvas.SOFT_KEY_1, "");
				
				inputCnt = INPUT_KEY_CNT;
			}
		}

	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * メニューを閉じたときのラベル変更処理
	 */
	private static void menuClose(){
		c.setSoftLabel(Canvas.SOFT_KEY_1, "メニュー");
		
		if(mID >= WORLD_MAP){
			c.setSoftLabel(Canvas.SOFT_KEY_2, "表示切替");
		}else{
			c.setSoftLabel(Canvas.SOFT_KEY_2, "");
		}
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 戦闘終了中
	 */
	public static void batEnd(){
		
		if(batlingFlg == FLG_BAT_END){
			//経験値ゲット
			Battle.GetExp();
		
			//PTパネルの枠表示を戻す
			Battle.ptm[0].rectView = 0;
			Battle.ptm[1].rectView = 0;
			Battle.ptm[2].rectView = 0;
			Battle.ptm[3].rectView = 0;
			
			//レベルアップ処理とか
			
		}
		
		inputCnt = INPUT_CNT;
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * 戦闘終了処理
	 */
	public static void batEnded(){
		
		//戦闘終了
		//batlingFlg = FLG_BAT_END;
		eveBatFlg = 0;
		
		batMoveFlg = 11;
		
		System.gc();
		c.setSoftLabel(Canvas.SOFT_KEY_1, "メニュー");
		c.setSoftLabel(Canvas.SOFT_KEY_2, "");
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * Map間移動処理
	 */
	private void MapToMove(){
			

			if(systemMove == 1){	//エフェ終了後に読み込む場合
				NewMap(nextMID, useMap);	//新しいマップを作成
			}
			
			if(nextMapLoadFinish == 1){
				DelMap(useMap);			//古いマップを解放
				
				//使っているMapの切り替え
				if(useMap == 0){
					useMap = 1;
				}else{
					useMap = 0;
				}
				
				//全体マップの場合、移動ポイントを登録していく
				if(nextMID >= WORLD_MAP){
					m[useMap].wordPointset.MovePointRegMap(nextMID);
					wordPointMode = 0;
					
					if(nextX == 0 && nextY == 0){
						nextX = worldPoint[wordPointSelect].x;
						nextY = worldPoint[wordPointSelect].y;
					}
					for(int i = 0; i < WorldPointSet.movePointNum; i++){
						if(worldPoint[i].x == nextX && worldPoint[i].y == nextY){
							wordPointSelect = i;
						}
					}
					
					//エンカウント率変動の初期化
					encUp = 0;
					//次のレベルまでの経験値表示初期化
					showNext = 0;
					
					//ソフトキー２に文字を設定
					c.setSoftLabel(Canvas.SOFT_KEY_2, "表示切替");
					
				}
				
				//セーブ禁止状態を解除
				saveNot = 0;
				terepNot = 0;
				
				//heroだけは前Mapを消したあとに追加
				hero = new Chara(HeX, HeY, HERO, DOWN, 0, m[useMap], HeSpeed,
						0, 0, 0, 0, 0,   0, 0, 0, 0, 0,   0, 0, 0, 0, 0);
				m[useMap].AddChara(hero);
				
				hero.SetX(nextX);
				hero.SetY(nextY);
				hero.SetpX(nextX * CHA_SIZE);
				hero.SetpY(nextY * CHA_SIZE);
				
				mID = nextMID;
				
				moveFlg = 3;
				
				//移動後のマップに自動開始イベントがあれば発動-----------------
				ObjEvent obj = m[useMap].ObjCheckAutoAct();	
				if(obj != null){
					//メッセージをセットする
					int check = msgWin.SetMsg(obj.GetMsg(), hero);
					//メッセージウインドウを表示
					if(check != 0){
						msgWin.show();
					}

					inputCnt = INPUT_CNT;
				}
				
				
			}
			
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 新しいマップを作成する
	 */
	private void NewMap(int mID, int mUseMap){
		
		//int nMap = useMap;
		
		if(useMap == 0){
			m[1] = new Map(mID, mID);
		}else{
			m[0] = new Map(mID, mID);
		}		
	}

//------------------------------------------------------------------------------------------------------
	/**
	 * 指定したMapを解放する
	 */
	private void DelMap(int mUseMap){
		
		//以前のMap情報を全てクリアする
		/*
		for(int i = 0; i < m[useMap].events.size(); i++){
			Event eve = (Event)m[useMap].events.elementAt(i);
			eve = null;
		}
		*/
		
		m[useMap].events.removeAllElements();
		for(int i = 0; i < m[useMap].charas.size(); i++){
			Chara chr = (Chara)m[useMap].charas.elementAt(i);
			chr.runnning = 0;
			chr = null;
		}		
		m[useMap].charas.removeAllElements();
		m[useMap].chNum = 0;
		m[useMap].objNum = 0;
		m[useMap].trNum = 0;
		
		m[useMap].RemoveChara(hero);
		
		m[useMap] = null;
		hero = null;
		System.gc();	
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * メインメニューを表示する
	 */
	private void MenuShow(){
		if(menuVisible == 1){
			
			//説明部分描画-----------------------------
			if((menuCmnd >= MENU_SKILL && menuCmnd <= MENU_SKILL + 20) || 
					(menuCmnd >= MENU_ITEM && menuCmnd <= MENU_ITEM_CUT) ||
					(menuCmnd == MENU_QUE)){
			}else{
				DrawWin(0, 0, WIDTH, 40, g);
				HelpMsg(menuCmnd);
			}
			
			//コマンド部分描画--------------------------
			int tagX = rctX;
			int y = 40;
			
			if(menuCmnd == MENU_MAIN){
				tagX = 0;
			}else if(menuCmnd != MENU_MAIN){
				tagX = -80 + 16;
			}
			
			if(rctX - tagX < WIN_SPEED && rctX - tagX > -WIN_SPEED){
				rctX = tagX;
			}else if(rctX > tagX){
				rctX -= WIN_SPEED;
			}else if(rctX < tagX){
				rctX += WIN_SPEED;
			}
						
			DrawWin(rctX, y, 80, 100, g);
	
			String[] mainMenu = new String[8];
			int newQuePos;
			
			if(stoneHave > 0){
				mainMenu[0] = "アイテム";
				mainMenu[1] = "スキル";
				mainMenu[2] = "精霊石";
				mainMenu[3] = "装備";
				mainMenu[4] = "ステータス";
				mainMenu[5] = "クエスト";
				mainMenu[6] = "設定";
				mainMenu[7] = "セーブ";
				newQuePos = 5;
			}else{
				mainMenu[0] = "アイテム";
				mainMenu[1] = "スキル";
				mainMenu[2] = "装備";
				mainMenu[3] = "ステータス";
				mainMenu[4] = "クエスト";
				mainMenu[5] = "設定";
				mainMenu[6] = "セーブ";
				newQuePos = 4;
			}
			
			for(int i = 0; i < 6; i++){
				if(saveNot != 0 && (i + menuPageTop == 7)){
					DrawMessage(rctX + 4, y + 2 + fntH * (i + 1), mainMenu[7], 128, 128, 128, g);
				}else{
					DrawMessage(rctX + 4, y + 2 + fntH * (i + 1), mainMenu[i + menuPageTop], 255, 255, 255, g);
				}
			}
			
			
			//各モード時の各ウィンドウを描画----------------
			ModeCmnd(menuCmnd);
			
			//レベルEXP表示-----------------------------------
			if(menuCmnd == MENU_MAIN || menuCmnd == MENU_STAT){
				LvExpShow();
			}
			
			//PTパネル表示------------------------------------
			if(menuCmnd != MENU_SAVE){
				Battle.PanelPt(0, g);
			}
			
			//選択しているコマンドを囲む
			if((menuCmnd >= MENU_SKILL && menuCmnd <= MENU_SKILL + 30) || 
					(menuCmnd >= MENU_STAT && menuCmnd <= MENU_STAT + 10) ||
					(menuCmnd >= MENU_STONE && menuCmnd <= MENU_STONE + 50) ||
					(menuCmnd >= MENU_ITEM && menuCmnd <= MENU_ITEM_CUT) ||
					(menuCmnd >= MENU_EQ && menuCmnd <= MENU_EQ + 50)){
				//スキル、ステータス選択なら緑枠表示なし
			}else{
				CmdRctDraw(rctX, y + 2);
			}
			
			//NEWを表示
			if(newQuest > 0){
				g.drawImage(sysImg, rctX + 60, y + 7 + (newQuePos - menuPageTop) * fntH, 60, 71, 19, 9);
			}
			if(newStone > 0 && menuPageTop < 3){
				g.drawImage(sysImg, rctX + 60, y + 7 + (2 - menuPageTop) * fntH, 60, 71, 19, 9);
			}
			
		}
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * コマンドウィンドウを緑に光らせる
	 */
	private void CmdRctDraw(int x, int y){
		int tagX = x;
		int tagY = 0;		//緑枠の移動先の位置
		
		if(menuCmnd == MENU_QUE){
		//クエスト
		tagX = x + 80;
		tagY = y + fntH * (menuCurPoint - pageTop);
		
		
		}else if(menuCurPoint >= MENU_MAIN_ITEM && menuCurPoint <= MENU_MAIN_SAVE){
			if(stoneHave > 0){
				tagY = y + fntH * (menuCurPoint - 1) - (menuPageTop * fntH);
				
			}else{
				if(menuCurPoint == MENU_MAIN_ITEM){
					tagY = y + fntH * (menuCurPoint - 1) - (menuPageTop * fntH);
					
				}else if(menuCurPoint == MENU_MAIN_SKILL){
					tagY = y + fntH * (menuCurPoint - 1) - (menuPageTop * fntH);
					
				}else if(menuCurPoint == MENU_MAIN_EQ){
					tagY = y + fntH * (menuCurPoint - 2) - (menuPageTop * fntH);
					
				}else if(menuCurPoint == MENU_MAIN_STAT){
					tagY = y + fntH * (menuCurPoint - 2) - (menuPageTop * fntH);
					
				}else if(menuCurPoint == MENU_MAIN_QUE){
					tagY = y + fntH * (menuCurPoint - 2) - (menuPageTop * fntH);
					
				}else if(menuCurPoint == MENU_MAIN_CNF){
					tagY = y + fntH * (menuCurPoint - 2) - (menuPageTop * fntH);
					
				}else if(menuCurPoint == MENU_MAIN_SAVE){
					tagY = y + fntH * (menuCurPoint - 2) - (menuPageTop * fntH);
					
				}
			}

			
		}else if(menuCurPoint >= MENU_CNF_1 && menuCurPoint <= MENU_CNF_1 + MENU_CNF_NUM){
			//コンフィグ詳細
			tagX = x + 80;
			tagY = y + fntH * (menuCurPoint - MENU_CNF - pageTop - 1);
			
			
		}else if(menuCurPoint >= MENU_SAVE && menuCurPoint <= MENU_SAVE + 2){
			tagX = x + 80;
			tagY = y + 66 * (menuCurPoint - MENU_SAVE);
		}
		
		tagY -= 2;
		
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		
		if(menuCurPoint >= MENU_CNF_1 && menuCurPoint <= MENU_CNF_1 + MENU_CNF_NUM){
			DrawActRect(actRctX, actRctY, 118, 20, g);
		}else if(menuCmnd == MENU_QUE){
			DrawActRect(actRctX, actRctY, 204, 20, g);
		}else if(menuCurPoint >= MENU_SAVE && menuCurPoint <= MENU_SAVE + 2){
			DrawActRect(actRctX, actRctY, 224, 66, g);
		}else{
			DrawActRect(actRctX, actRctY, 70, 20, g);
		}
		
		
		//カーソル表示
		if(menuCmnd == MENU_QUE){
			
		}else if(menuCurPoint >= MENU_MAIN_ITEM && menuCurPoint <= MENU_MAIN_SAVE){
			DrawCur(68, tagY + 4, RIGHT);
			if(stoneHave == 0){
				if(menuPageTop < MENU_MAIN_SAVE - 7){
					DrawCur(30, y + 90, DOWN);
				}
			}else{
				if(menuPageTop < MENU_MAIN_SAVE - 6){
					DrawCur(30, y + 90, DOWN);
				}
			}
			if(menuPageTop > 0){
				DrawCur(30, y - 8, UP);
			}
			
		}else if(menuCurPoint >= MENU_CNF_1 && menuCurPoint <= MENU_CNF_1 + MENU_CNF_NUM){
			DrawCur(134, tagY + 4, LEFT);
			DrawCur(228, tagY + 4, RIGHT);
			if(pageTop < MENU_CNF_NUM - MENU_CNF_PAGE_NUM){
				DrawCur(x + 187, y + 132, DOWN);
			}
			if(pageTop > 0){
				DrawCur(x + 187, y - 8, UP);
			}
			
		}
	}
	
//-----------------------------------------------------------------------------------------------------
	private void ModeCmnd(int mode){
		int x;
		int y = 40;
		if(mode == MENU_MAIN){
			//メイン画面---------------------------------
			x = 80;
			DrawWin(x, y, 160, 100, g);
			
			//所持金
			DrawMessage(x + 4, y + 2 + fntH, "所持金", 255, 255, 255, g);
			NumDraw(x + 160 - 20, y + 7, money);
			DrawMessage(x + 160 - 16, y + 2 + fntH, "円", 255, 255, 255, g);
			
			//エンカウント数
			DrawMessage(x + 4, y + 2 + fntH * 2, "エンカウント", 255, 255, 255, g);
			NumDraw(x + 160 - 20, y + 7 + fntH, encount);
			DrawMessage(x + 160 - 16, y + 2 + fntH * 2, "回", 255, 255, 255, g);
			
			//プレイ時間
			long nowTime = System.currentTimeMillis();
			playTime += nowTime - startTime;
			startTime = nowTime;
			DrawMessage(x + 4, y + 2 + fntH * 3, "プレイ時間", 255, 255, 255, g);
			Title.DrawTime(playTime, x + 100, y + 7 + fntH * 2, g);
			
			//マップ名
			DrawMessage(x + 4, y + 2 + fntH * 6, m[useMap].name, 255, 255, 255, g);
			
		}else if(mode >= MENU_ITEM && mode <= MENU_ITEM_CUT){
			//アイテムリスト表示
			DrawItem(16, y, 2, viewMode);
			
		}else if(mode >= MENU_STONE && mode <= MENU_STONE + 50){
			//石リスト表示
			DrawStone(16, y, batSetChar, menuCmnd);
			
		}else if(mode >= MENU_EQ && mode <= MENU_EQ + 50){
			//装備リスト表示
			DrawEq(16, y, batSetChar, menuCmnd);
			
		}else if(mode >= MENU_STAT && mode <= MENU_STAT + 20){
			//ステータス表示
			x = 16;
			DrawWin(x, y, 224, 100, g);
			
			//名前
			DrawMessage(x + 4, y + 1 + fntH, Battle.ptm[batSetChar].name, 255, 255, 255, g);
			//str,agi,vit,int,luk
			g.drawImage(Cmn.sysImg, x + 4, y + 2 + fntH + 20, 0, 33, 18, 9);
			g.drawImage(Cmn.sysImg, x + 4, y + 2 + fntH + 32, 18, 33, 18, 9);
			g.drawImage(Cmn.sysImg, x + 4, y + 2 + fntH + 44, 36, 33, 18, 9);
			g.drawImage(Cmn.sysImg, x + 4, y + 2 + fntH + 56, 54, 33, 18, 9);
			g.drawImage(Cmn.sysImg, x + 4, y + 2 + fntH + 68, 72, 33, 18, 9);
			NumDraw(x + 4 + 40, y + 2 + fntH + 20, Battle.ptm[batSetChar].str);
			NumDraw(x + 4 + 40, y + 2 + fntH + 32, Battle.ptm[batSetChar].agi);
			NumDraw(x + 4 + 40, y + 2 + fntH + 44, Battle.ptm[batSetChar].vit);
			NumDraw(x + 4 + 40, y + 2 + fntH + 56, Battle.ptm[batSetChar].inte);
			NumDraw(x + 4 + 40, y + 2 + fntH + 68, Battle.ptm[batSetChar].luk);
			//atk,def
			g.drawImage(Cmn.sysImg, x + 60, y + 2 + fntH + 20, 0, 42, 18, 9);
			g.drawImage(Cmn.sysImg, x + 60, y + 2 + fntH + 32, 18, 42, 18, 9);
			NumDraw(x + 4 + 96, y + 2 + fntH + 20, Battle.ptm[batSetChar].atk);
			NumDraw(x + 4 + 96, y + 2 + fntH + 32, Battle.ptm[batSetChar].def);
			
			//属性表示
			DrawMessage(x + 134, y + 1 + fntH, "火", 255, 255, 255, g);
			DrawMessage(x + 134, y + 1 + fntH * 2, "水", 255, 255, 255, g);
			DrawMessage(x + 134, y + 1 + fntH * 3, "風", 255, 255, 255, g);
			DrawMessage(x + 134, y + 1 + fntH * 4, "土", 255, 255, 255, g);
			DrawMessage(x + 134, y + 1 + fntH * 5, "光", 255, 255, 255, g);
			DrawMessage(x + 134, y + 1 + fntH * 6, "闇", 255, 255, 255, g);
			int gw = 0;
			for(int i = 1; i < 7; i++){
				
				gw = (100 - Battle.ptm[batSetChar].elm[i] / 2) * 75 / 100;
				if(gw < 0){
					gw = 0;
				}else if(gw > 79){
					gw = 79;
				}
				g.drawImage(Cmn.sysImg, x + 149, y + 5 + (i * 16) - 16, 2, 62, gw, 9);	
				NumDraw(x + 4 + 162, y + 5 + (i * 16) - 16, 200 - Battle.ptm[batSetChar].elm[i]);		
			}
			
			//装備石
			stone.StoneList(Battle.ptm[batSetChar].eStone[0]);
			int no1 = stone.no;
			//int stoneEle1 = stone.elm;
			String name1 = stone.name;
			stone.StoneList(Battle.ptm[batSetChar].eStone[1]);
			int no2 = stone.no;
			//int stoneEle2 = stone.elm;
			String name2 = stone.name;
			
			if(no1 > 0){
				DrawMessage(x + 60, y + 1 + fntH, name1, 255, 255, 255, g);
			}
			if(no2 > 0){
				DrawMessage(x + 60, y + 1 + fntH * 2, name2, 255, 255, 255, g);
			}
			
			//DrawMessage(x + 100, y + 1 + fntH, Element.ElmToString(stoneEle1), 255, 255, 255, g);
			//DrawMessage(x + 100, y + 1 + fntH * 2, Element.ElmToString(stoneEle2), 255, 255, 255, g);
			
		}else if(mode >= MENU_SKILL && mode <= MENU_SKILL + 20){
			//スキルリスト表示
			DrawSkill(16, y, batSetChar, 2);
		
		}else if(mode == MENU_QUE){
			//クエスト表示----------------------------------------
			x = 16;
			DrawWin(x, y, 224, 122, g);
			int nr, ng, nb;
			int fihishNum = 0;
			//クエストを表示していく
			for(int i = 0; i < Quest.QUE_ID_NUM; i++){
				if(questViewList[i] == 0) break;
				que.QuestList(questViewList[i]);
				if(que.finish == 1 && que.id != 0) fihishNum++;
			}
			
			for(int i = pageTop; i < pageTop + 7; i++){
				if(questViewList[i] == 0){
					break;	
				}
				
				que.QuestList(questViewList[i]);
				
				if(i == 0){
					nr = 255;
					ng = 255;
					nb = 100;
					if(que.finish == 1){
						nr = 255;
						ng = 200;
						nb = 200;
						g.drawImage(sysImg, x + 180, y + fntH * (i - pageTop) + 3, 80, 62, 14, 14);
					}
				}else if(que.finish == 1){
					nr = 255;
					ng = 200;
					nb = 200;
					g.drawImage(sysImg, x + 180, y + fntH * (i - pageTop) + 3, 80, 62, 14, 14);
					
				}else{
					nr = 255;
					ng = 255;
					nb = 255;
				}
				
				DrawMessage(x + 2, y + 1 + fntH * (i - pageTop + 1), que.title, nr, ng, nb, g);
			}
			//コメントの描画
			DrawWin(0, 0, WIDTH, 40, g);
			HelpMsg(menuCmnd);
			
			//クエストの統計情報を表示
			DrawWin(x, y + 122, 224, 20, g);
			DrawMessage(x + 2, y + 122 + fntH, "クエスト達成率", 255, 255, 255, g);
			
			NumDraw(x + 107, y + 128, fihishNum);
			g.drawImage(Cmn.sysImg, x + 108, y + 128, 60, 0, 5, 9);
			NumDraw(x + 133, y + 128, queNum - 1);
			
			NumDraw(x + 179, y + 128, fihishNum * 100 / Quest.QUE_REG_NUM);
			g.drawImage(Cmn.sysImg, x + 180, y + 128, 60, 0, 5, 9);
			NumDraw(x + 205, y + 128, (queNum - 1)  * 100 / Quest.QUE_REG_NUM);
			DrawMessage(x + 210, y + 122 + fntH, "％", 255, 255, 255, g);
			
			//ゲージ表示---------------------------------------
			if(queNum > 7){
				g.setColor(Graphics.getColorOfRGB(100, 100, 100));
				g.fillRect(x + 208, y + 8, 6, 108);
				g.setColor(Graphics.getColorOfRGB(220, 220, 220));
				g.fillRect(x + 208, y + 6, 6, 2);
				g.fillRect(x + 208, y + 114, 6, 2);
				
				int gy = pageTop * 108 / queNum;
				int gh = 7 * 108 / queNum;
				g.fillRect(x + 208, y + 8 + gy, 6, gh);
				
			}
			
			
		}else if(mode == MENU_CNF){
			//設定画面---------------------------------------------
			x = 16;
			DrawWin(x, y, 224, 142, g);
			
			String[] conf = new String[MENU_CNF_NUM];
			
			conf[0] = "移動速度";
			conf[1] = "戦闘速度";
			conf[2] = "キーレスポンス";
			conf[3] = "ボタンレスポンス";
			conf[4] = "文字の影";
			conf[5] = "ウィンドウ枠色　Ｒ";
			conf[6] = "　　　　　　　　Ｇ";
			conf[7] = "　　　　　　　　Ｂ";
			conf[8] = "　　　　　　透明度";
			conf[9] = "ウィンドウ色　　Ｒ";
			conf[10] = "　　　　　　　　Ｇ";
			conf[11] = "　　　　　　　　Ｂ";
			conf[12] = "　　　　　　透明度";
			conf[13] = "ＰＴパネル枠色　Ｒ";
			conf[14] = "　　　　　　　　Ｇ";
			conf[15] = "　　　　　　　　Ｂ";
			conf[16] = "　　　　　　透明度";
			conf[17] = "ＰＴパネル色　　Ｒ";
			conf[18] = "　　　　　　　　Ｇ";
			conf[19] = "　　　　　　　　Ｂ";
			conf[20] = "　　　　　　透明度";
			
			for(int i = 0; i < MENU_CNF_PAGE_NUM; i++){
				DrawMessage(x + 4, y + 2 + fntH * (i + 1), conf[i + pageTop], 255, 255, 255, g);
				
			}

			int cy = -pageTop * fntH;
			int cx;
			
			//移動速度
			if(cy >= 0){
				cx = (10 - HeSpeed) * 10;
				g.setColor(Graphics.getColorOfRGB(120, 120, 245));
				g.fillRect(x + 132 + cx, y + cy + 6, 8, 10);
				g.setColor(Graphics.getColorOfRGB(120, 225, 120));
				g.drawRect(x + 131 + cx, y + cy + 5, 9, 11);
				for(int i = 0; i < 8; i++){
					NumDraw(x + 140 + i * 10, y + cy + 8, i + 1);
				}
			}
			//戦闘速度
			if(cy >= - fntH){
				cx = (Battle.actInterval - 1) / 3 * 10;
				g.setColor(Graphics.getColorOfRGB(120, 120, 245));
				g.fillRect(x + 132 + cx, y + cy + 6 + fntH, 8, 10);
				g.setColor(Graphics.getColorOfRGB(120, 225, 120));
				g.drawRect(x + 131 + cx, y + cy + 5 + fntH, 9, 11);
				for(int i = 0; i < 8; i++){
					NumDraw(x + 140 + i * 10, y + cy + 7 + fntH, i + 1);
				}
			}
			//キーレスポンス
			if(cy >= - fntH * 2){
				cx = (INPUT_KEY_CNT - 3) * 10;
				g.setColor(Graphics.getColorOfRGB(120, 120, 245));
				g.fillRect(x + 132 + cx, y + cy + 6 + fntH * 2, 8, 10);
				g.setColor(Graphics.getColorOfRGB(120, 225, 120));
				g.drawRect(x + 131 + cx, y + cy + 5 + fntH * 2, 9, 11);
				for(int i = 0; i < 8; i++){
					NumDraw(x + 140 + i * 10, y + cy + 7 + fntH * 2, i + 1);
				}
			}
			//ボタンレスポンス
			if(cy >= - fntH * 3){
				cx = (INPUT_CNT - 7) * 10;
				g.setColor(Graphics.getColorOfRGB(120, 120, 245));
				g.fillRect(x + 132 + cx, y + cy + 6 + fntH * 3, 8, 10);
				g.setColor(Graphics.getColorOfRGB(120, 225, 120));
				g.drawRect(x + 131 + cx, y + cy + 5 + fntH * 3, 9, 11);
				for(int i = 0; i < 8; i++){
					NumDraw(x + 140 + i * 10, y + cy + 7 + fntH * 3, i + 1);
				}
			}
			//文字シェイド
			if(cy >= - fntH * 4){
				cx = (fontShadowDraw) * 40;
				g.setColor(Graphics.getColorOfRGB(120, 120, 245));
				g.fillRect(x + 132 + cx, y + cy + 6 + fntH * 4, 40, 10);
				g.setColor(Graphics.getColorOfRGB(120, 225, 120));
				g.drawRect(x + 131 + cx, y + cy + 5 + fntH * 4, 41, 11);
				DrawMessage(x + 132, y + cy + 1 + fntH * (4 + 1), "ＯＦＦ", 255, 255, 255, g);
				DrawMessage(x + 172, y + cy + 1 + fntH * (4 + 1), "ＯＮ", 255, 255, 255, g);
			}
			//ウィンドウ枠色
			for(int i = 0; i < 3; i++){
				if(cy >= - fntH * (5 + i)){
					g.setColor(Graphics.getColorOfRGB(0, 0, 0));
					g.fillRect(x + 132, y + cy + 9 + fntH * (5 + i), winMsgRecCol[i] * 80 / 255, 7);
					g.setColor(Graphics.getColorOfRGB(220, 220, 220));
					g.fillRect(x + 131, y + cy + 8 + fntH * (5 + i), winMsgRecCol[i] * 80 / 255, 7);
				}
			}
			//ウィンドウ枠透明度
			if(cy >= - fntH * 8 && cy <= - fntH){
				g.setColor(Graphics.getColorOfRGB(0, 0, 0));
				g.fillRect(x + 132, y + cy + 9 + fntH * 8, (255 - winMsgRecAlpha) * 80 / 255, 7);
				g.setColor(Graphics.getColorOfRGB(220, 220, 220));
				g.fillRect(x + 131, y + cy + 8 + fntH * 8, (255 - winMsgRecAlpha) * 80 / 255, 7);
			}
			//ウィンドウ色
			for(int i = 0; i < 3; i++){
				if(cy >= - fntH * (9 + i) && cy <= - fntH * (2 + i)){
					g.setColor(Graphics.getColorOfRGB(0, 0, 0));
					g.fillRect(x + 132, y + cy + 9 + fntH * (9 + i), winMsgCol[i] * 80 / 255, 7);
					g.setColor(Graphics.getColorOfRGB(220, 220, 220));
					g.fillRect(x + 131, y + cy + 8 + fntH * (9 + i), winMsgCol[i] * 80 / 255, 7);
				}
			}
			//ウィンドウ透明度
			if(cy >= - fntH * 12 && cy <= - fntH * 5){
				g.setColor(Graphics.getColorOfRGB(0, 0, 0));
				g.fillRect(x + 132, y + cy + 9 + fntH * 12, (255 - winMsgAlpha) * 80 / 255, 7);
				g.setColor(Graphics.getColorOfRGB(220, 220, 220));
				g.fillRect(x + 131, y + cy + 8 + fntH * 12, (255 - winMsgAlpha) * 80 / 255, 7);
			}
			//PTウィンドウ枠色
			for(int i = 0; i < 3; i++){
				if(cy >= - fntH * (13 + i) && cy <= - fntH * (6 + i)){
					g.setColor(Graphics.getColorOfRGB(0, 0, 0));
					g.fillRect(x + 132, y + cy + 9 + fntH * (13 + i), Battle.winMBtlRecCol[i] * 80 / 255, 7);
					g.setColor(Graphics.getColorOfRGB(220, 220, 220));
					g.fillRect(x + 131, y + cy + 8 + fntH * (13 + i), Battle.winMBtlRecCol[i] * 80 / 255, 7);
				}
			}
			//PTウィンドウ枠透明度
			if(cy >= - fntH * 16 && cy <= - fntH * 9){
				g.setColor(Graphics.getColorOfRGB(0, 0, 0));
				g.fillRect(x + 132, y + cy + 9 + fntH * 16, (255 - Battle.winBtlRecAlpha) * 80 / 255, 7);
				g.setColor(Graphics.getColorOfRGB(220, 220, 220));
				g.fillRect(x + 131, y + cy + 8 + fntH * 16, (255 - Battle.winBtlRecAlpha) * 80 / 255, 7);
			}
			//PTウィンドウ色
			for(int i = 0; i < 3; i++){
				if(cy >= - fntH * (17 + i) && cy <= - fntH * (10 + i)){
					g.setColor(Graphics.getColorOfRGB(0, 0, 0));
					g.fillRect(x + 132, y + cy + 9 + fntH * (17 + i), Battle.winBtlCol[i] * 80 / 255, 7);
					g.setColor(Graphics.getColorOfRGB(220, 220, 220));
					g.fillRect(x + 131, y + cy + 8 + fntH * (17 + i), Battle.winBtlCol[i] * 80 / 255, 7);
				}
			}
			//PTウィンドウ透明度
			if(cy >= - fntH * 20 && cy <= - fntH * 13){
				g.setColor(Graphics.getColorOfRGB(0, 0, 0));
				g.fillRect(x + 132, y + cy + 9 + fntH * 20, (255 - Battle.winBtlAlpha) * 80 / 255, 7);
				g.setColor(Graphics.getColorOfRGB(220, 220, 220));
				g.fillRect(x + 131, y + cy + 8 + fntH * 20, (255 - Battle.winBtlAlpha) * 80 / 255, 7);
			}
			
		}else if(mode == MENU_SAVE){
			//セーブ画面-------------------------------------
			x = 16;
			DrawSave(x, y, g);
		}
		
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * アイテム画面の描画
	 * @param x 表示座標
	 * @param y 表示座標
	 * @param mode 移動中2か戦闘中1か
	 * @param viewMode どの種類のアイテムを表示させているか,100ALL,101回復、102武器、103防具、104その他
	 */
	
	public static void DrawItem(int x, int y, int mode, int viewMode){
		
		//カテゴリ表示
		if(viewMode == Item.VIEW_ALL){
			DrawWin(x, y, 32, 20, g);
			DrawWin(x + 32, y, 16, 20, g);
			DrawWin(x + 48, y, 16, 20, g);
			DrawWin(x + 64, y, 16, 20, g);
			DrawWin(x + 80, y, 16, 20, g);
			DrawMessage(x + 1, y + Cmn.fntH + 1, "全て", 255, 255, 255, g);
			DrawMessage(x + 32 + 2, y + Cmn.fntH + 1, "回", 255, 255, 255, g);
			DrawMessage(x + 48 + 2, y + Cmn.fntH + 1, "特", 255, 255, 255, g);
			DrawMessage(x + 64 + 2, y + Cmn.fntH + 1, "武", 255, 255, 255, g);
			DrawMessage(x + 80 + 2, y + Cmn.fntH + 1, "防", 255, 255, 255, g);
		}else if(viewMode == Item.TYPE_ITEM){
			DrawWin(x, y, 16, 20, g);
			DrawWin(x + 16, y, 32, 20, g);
			DrawWin(x + 48, y, 16, 20, g);
			DrawWin(x + 64, y, 16, 20, g);
			DrawWin(x + 80, y, 16, 20, g);
			DrawMessage(x + 1, y + Cmn.fntH + 1, "全", 255, 255, 255, g);
			DrawMessage(x + 16 + 2, y + Cmn.fntH + 1, "回復", 255, 255, 255, g);
			DrawMessage(x + 48 + 2, y + Cmn.fntH + 1, "特", 255, 255, 255, g);
			DrawMessage(x + 64 + 2, y + Cmn.fntH + 1, "武", 255, 255, 255, g);
			DrawMessage(x + 80 + 2, y + Cmn.fntH + 1, "防", 255, 255, 255, g);
		}else if(viewMode == Item.TYPE_ETC){
			DrawWin(x, y, 16, 20, g);
			DrawWin(x + 16, y, 16, 20, g);
			DrawWin(x + 32, y, 32, 20, g);
			DrawWin(x + 64, y, 16, 20, g);
			DrawWin(x + 80, y, 16, 20, g);
			DrawMessage(x + 1, y + Cmn.fntH + 1, "全", 255, 255, 255, g);
			DrawMessage(x + 16 + 2, y + Cmn.fntH + 1, "回", 255, 255, 255, g);
			DrawMessage(x + 32 + 2, y + Cmn.fntH + 1, "特殊", 255, 255, 255, g);
			DrawMessage(x + 64 + 2, y + Cmn.fntH + 1, "武", 255, 255, 255, g);
			DrawMessage(x + 80 + 2, y + Cmn.fntH + 1, "防", 255, 255, 255, g);
		}else if(viewMode == Item.TYPE_WEP){
			DrawWin(x, y, 16, 20, g);
			DrawWin(x + 16, y, 16, 20, g);
			DrawWin(x + 32, y, 16, 20, g);
			DrawWin(x + 48, y, 32, 20, g);
			DrawWin(x + 80, y, 16, 20, g);
			DrawMessage(x + 1, y + Cmn.fntH + 1, "全", 255, 255, 255, g);
			DrawMessage(x + 16 + 2, y + Cmn.fntH + 1, "回", 255, 255, 255, g);
			DrawMessage(x + 32 + 2, y + Cmn.fntH + 1, "特", 255, 255, 255, g);
			DrawMessage(x + 48 + 2, y + Cmn.fntH + 1, "武器", 255, 255, 255, g);
			DrawMessage(x + 80 + 2, y + Cmn.fntH + 1, "防", 255, 255, 255, g);
		}else if(viewMode == Item.TYPE_GURD){
			DrawWin(x, y, 16, 20, g);
			DrawWin(x + 16, y, 16, 20, g);
			DrawWin(x + 32, y, 16, 20, g);
			DrawWin(x + 48, y, 16, 20, g);
			DrawWin(x + 64, y, 32, 20, g);
			DrawMessage(x + 1, y + Cmn.fntH + 1, "全", 255, 255, 255, g);
			DrawMessage(x + 16 + 2, y + Cmn.fntH + 1, "回", 255, 255, 255, g);
			DrawMessage(x + 32 + 2, y + Cmn.fntH + 1, "特", 255, 255, 255, g);
			DrawMessage(x + 48 + 2, y + Cmn.fntH + 1, "武", 255, 255, 255, g);
			DrawMessage(x + 64 + 2, y + Cmn.fntH + 1, "防具", 255, 255, 255, g);
		}
		

		DrawWin(x, y + 20, 224, 122, g);		
		
		int numView = 0;
		int showModeNum = 0;
		
		for(int i = pageTop; i < pageTop + 12; i++){
			if(i == item.haveItem[viewMode - Item.VIEW_ALL]){
				break;
			}else{
				if(viewMode == Item.VIEW_ALL){
					item.ItemList(itemAllList[i]);
					numView = itemList[itemAllList[i]];
					showModeNum = item.haveItem[0];
				}else if(viewMode == Item.TYPE_ITEM){
					item.ItemList(itemRecList[i]);
					numView = itemList[itemRecList[i]];
					showModeNum = item.haveItem[1];
				}else if(viewMode == Item.TYPE_WEP){
					item.ItemList(itemWepList[i]);
					numView = itemList[itemWepList[i]];
					showModeNum = item.haveItem[3];
				}else if(viewMode == Item.TYPE_GURD){
					item.ItemList(itemGudList[i]);
					numView = itemList[itemGudList[i]];
					showModeNum = item.haveItem[4];
				}else if(viewMode == Item.TYPE_ETC){
					item.ItemList(itemEtcList[i]);
					numView = itemList[itemEtcList[i]];
					showModeNum = item.haveItem[2];
				}
				
				if(numView > 0){
					if(item.usePoint == 0 || item.usePoint == mode){
						int nr, ng, nb;
						if(item.typeMode == Item.TYPE_ITEM){
							nr = 200; ng = 255; nb = 225;
						}else if(item.typeMode == Item.TYPE_ETC){
							nr = 255; ng = 220; nb = 220;
						}else{	
							nr = 255; ng = 255; nb = 255;
						}
						if(terepNot != 0 && item.no == 52){
							nr = 160; ng = 160; nb = 160;
						}
						DrawMessage(x + 3 + (i - pageTop) % 2 * 110, y + 22 + fntH + fntH * ((i - pageTop) / 2), item.name, nr, ng, nb, g);
						NumDraw(x + 105 + (i - pageTop) % 2 * 110, y + 27 + fntH * ((i - pageTop) / 2), numView);
					}else{
						DrawMessage(x + 3 + (i - pageTop) % 2 * 110, y + 22 + fntH + fntH * ((i - pageTop) / 2), item.name, 160, 160, 160, g);
						NumDraw(x + 105 + (i - pageTop) % 2 * 110, y + 27 + fntH * ((i - pageTop) / 2), numView);
					}
				}
			}
		}	
		
		
		//ゲージ表示---------------------------------------
		if(showModeNum > 12){
			g.setColor(Graphics.getColorOfRGB(100, 100, 100));
			g.fillRect(x + 8, y + 132, 210, 6);
			g.setColor(Graphics.getColorOfRGB(220, 220, 220));
			g.fillRect(x + 6, y + 132, 2, 6);
			g.fillRect(x + 216, y + 132, 2, 6);
			int gx = pageTop * 210 / (showModeNum + showModeNum % 2);
			int gw = 12 * 210 / (showModeNum + showModeNum % 2);
			g.fillRect(x + 8 + gx, y + 132, gw, 6);
		}
		
		//緑枠表示----------------------------------------------
		int tagX = x;
		int tagY = y + 22;		//緑枠の移動先の位置
		
		int flg;
		if(mode == 1){
			flg = batlingFlg;
		}else{
			flg = menuCmnd;
		}
		
		if(flg >= MENU_ITEM && flg <= MENU_ITEM + 4){
			tagX = x + (menuCurPoint - pageTop) % 2 * 110;
			tagY = y + 22 + fntH * ((menuCurPoint - pageTop) / 2);
		}else if(flg == MENU_ITEM_CUT){
			tagX = x + (viewMode - Item.VIEW_ALL) * 16;
			tagY = y ;
		}
		
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		
		if(flg >= MENU_ITEM && flg <= MENU_ITEM + 4){
			DrawActRect(actRctX, actRctY, 112, 20, g);
		}else if(flg == MENU_ITEM_CUT){
			DrawActRect(actRctX, actRctY, 32, 20, g);
		}
		
		//カーソル表示--------------------------------------
		if(pageTop > 0){
			DrawCur(x, y + 120, LEFT);
		}
		if(showModeNum - pageTop > 12){
			DrawCur(x + 212, y + 120, RIGHT);
		}
		
		//説明表示------------------------------------------
		if(viewMode == Item.VIEW_ALL){
			item.ItemList(itemAllList[menuCurPoint]);
		}else if(viewMode == Item.TYPE_ITEM){
			item.ItemList(itemRecList[menuCurPoint]);
		}else if(viewMode == Item.TYPE_WEP){
			item.ItemList(itemWepList[menuCurPoint]);
		}else if(viewMode == Item.TYPE_GURD){
			item.ItemList(itemGudList[menuCurPoint]);
		}else if(viewMode == Item.TYPE_ETC){
			item.ItemList(itemEtcList[menuCurPoint]);
		}
		DrawWin(0, 0, WIDTH, 40, g);
		HelpMsg(flg);
		
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * 石画面の描画
	 * @param x 表示座標
	 * @param y 表示座標
	 * @param no どのキャラの装備を表示するか
	 * @param mode 装備リスト表示中か装備選択中かとかいろいろ
	 */
	public static void DrawStone(int x, int y, int no, int mode){
		
		String st = "";
		
		//石一覧表示モード
		if(mode == MENU_STONE || mode == MENU_STONE_LIST){
			DrawWin(x, y, 120, 36, g);		//装備一覧
			for(int i = 0; i < 2; i++){
				if(i == 0){
					stone.StoneList(Battle.ptm[no].eStone[0]);
					if(stone.no == 0) st = "精霊石１";
				}
				if(i == 1){
					stone.StoneList(Battle.ptm[no].eStone[1]);
					if(stone.no == 0) st = "精霊石２";
				}
				
				if(stone.no == 0){
					DrawMessage(x + 3, y + 1 + fntH * (1 + i), st, 128, 128, 128, g);
				}else{
					DrawMessage(x + 3, y + 1 + fntH * (1 + i), stone.name, 255, 255, 255, g);
					NumDraw(x + 106, y + 6 + fntH * i, stoneList[stone.no]);
				}
				
				//EXPの描画------------------------------
				DrawWin(x + (i * 60), y + 36, 60, 25, g);
				
				if(stone.no > 0){
					int nx = x + (i * 60) + 3;
				
					int next = Stone.UpExp(stoneList[Battle.ptm[no].eStone[i]]) - stoneExp[Battle.ptm[no].eStone[i]];
					if(next < 0) next = 0;
					
					NumDraw(nx + (60 - 6), y + 39, stoneExp[Battle.ptm[no].eStone[i]]);
					NumDraw(nx + (60 - 6), y + 49, next);
					
					g.drawImage(Cmn.sysImg, nx, y + 49, 112, 0, 9, 10);
				}
				
			}

		//装着可能なもの一覧を表示モード
		}else if(mode >= MENU_STONE_1 && mode <= MENU_STONE_2){
			DrawWin(x, y, 120, 20, g);			//装備しているもの
			DrawWin(x, y + 20, 120, 124, g);	//装備可能なもの一覧
			
			
			if(mode == MENU_STONE_1){
				stone.StoneList(Battle.ptm[no].eStone[0]);
				if(stone.no == 0) st = "精霊石１";
			}else if(mode == MENU_STONE_2){
				stone.StoneList(Battle.ptm[no].eStone[1]);
				if(stone.no == 0) st = "精霊石２";
			}
			
			if(stone.no == 0){
				DrawMessage(x + 3, y + 1 + fntH, st, 128, 128, 128, g);
			}else{
				DrawMessage(x + 3, y + 1 + fntH, stone.name, 255, 255, 255, g);
				NumDraw(x + 106, y + 6, stoneList[stone.no]);
			}
			
			
			for(int i = pageTop; i < pageTop + 7; i++){
				if(i == stoneHave + 1){
					break;
				}else{
					if(i == 0){
						DrawMessage(x + 3, y + 21 + fntH * (i - pageTop + 1), "石解除", 200, 200, 200, g);
					}else{
						stone.StoneList(stoneViewList[i - 1]);
						if(stone.no == Battle.ptm[no].eStone[0] || stone.no == Battle.ptm[no].eStone[1]){
							//装備しているものはグレーアウト
							DrawMessage(x + 3, y + 21 + fntH * (i - pageTop + 1), stone.name, 200, 200, 200, g);
						}else{
							DrawMessage(x + 3, y + 21 + fntH * (i - pageTop + 1), stone.name, 255, 255, 255, g);
						}
						NumDraw(x + 106, y + 26 + fntH * (i - pageTop), stoneList[stone.no]);
					}

				}
			}
			
		}
		
		
		//ゲージ表示---------------------------------------
		if(stoneHave > 7 && (mode == MENU_STONE_1 || mode == MENU_STONE_2)){
			g.setColor(Graphics.getColorOfRGB(100, 100, 100));
			g.fillRect(x + 110, y + 28, 6, 108);
			g.setColor(Graphics.getColorOfRGB(220, 220, 220));
			g.fillRect(x + 110, y + 26, 6, 2);
			g.fillRect(x + 110, y + 134, 6, 2);
			
			int gy = pageTop * 108 / stoneHave;
			int gh = 6 * 108 / stoneHave;
			g.fillRect(x + 110, y + 28 + gy, 6, gh);
			
		}
		
		
		
		//各表示モードでの石ステータス表示----------------------------
		DrawWin(x + 120, y, 104, 144, g);
		
		//石の総合ステータス表示
		if(stoneViewMode == 0){
			
			if(mode != MENU_STONE){				
				if(mode == MENU_STONE_LIST){
					stone.StoneList(Battle.ptm[no].eStone[menuCurPoint]);
				}else{
					if(menuCurPoint > 0){
						stone.StoneList(stoneViewList[menuCurPoint - 1]);
					}else{
						stone.StoneList(0);
					}
				}
				
				//ここからメイン描画部分
				if(stone.no > 0){
					//属性表示
					DrawMessage(x + 123, y + 1 + fntH, "属性", 255, 255, 255, g);
					DrawMessage(x + 206, y + 1 + fntH, Element.ElmToString(stone.elm), 255, 255, 255, g);
					
					//EXP表示
					int next = Stone.UpExp(stoneList[stone.no]) - stoneExp[stone.no];
					if(next < 0) next = 0;
					
					NumDraw(x + 218, y + 20, stoneExp[stone.no]);
					NumDraw(x + 218, y + 30, next);
					
					g.drawImage(Cmn.sysImg, x + 123, y + 30, 112, 0, 9, 10);
					
					//石ステータスの表示
					g.drawImage(sysImg, x + 123, y + 46, 0, 33, 18, 9);		//str
					g.drawImage(sysImg, x + 123, y + 58, 18, 33, 18, 9);	//agi
					g.drawImage(sysImg, x + 123, y + 70, 36, 33, 18, 9);	//vit
					g.drawImage(sysImg, x + 123, y + 82, 54, 33, 18, 9);	//int
					g.drawImage(sysImg, x + 123, y + 94, 72, 33, 18, 9);	//luk
					
					int gw = 0;
					
					for(int i = 0; i < 5; i++){
						if(i == 0) gw = (50 + stone.str) * 79 / 100;
						if(i == 1) gw = (50 + stone.agi) * 79 / 100;
						if(i == 2) gw = (50 + stone.vit) * 79 / 100;
						if(i == 3) gw = (50 + stone.inte) * 79 / 100;
						if(i == 4) gw = (50 + stone.luk) * 79 / 100;
						g.drawImage(Cmn.sysImg, x + 143, y + 46 + (i * 12), 0, 62, gw, 9);	
					}
					
					//装備してるキャラを表示
					for(int i = 0; i < ptNum; i++){
						if(stone.no == Battle.ptm[i].eStone[0] ||
								stone.no == Battle.ptm[i].eStone[1]){
							DrawChara(x + 123 + i * 16, y + 116, Battle.ptm[i].name.charAt(0), 255, 255, 255, g);
						}
					}
					
					
				}else{
					DrawMessage(x + 123, y + 1 + fntH, "精霊石情報", 128, 128, 128, g);
				}
			}else{
				DrawMessage(x + 123, y + 1 + fntH, "精霊石情報", 128, 128, 128, g);
			}
			
			//石ステータス表示部分に１，３キーでページ切替できますよ表示
			DrawCur(x + 123, y + 130, LEFT);
			g.drawImage(sysImg, x + 140, y + 130, 50, 51, 8, 11);
			DrawCur(x + 210, y + 130, RIGHT);
			g.drawImage(sysImg, x + 200, y + 130, 58, 51, 8, 11);
			
			//ソート情報表示
			g.drawImage(sysImg, x + 164, y + 130, 66, 51, 8, 11);
			g.drawImage(sysImg, x + 177, y + 130, 74, 51, 8, 11);
			g.drawImage(sysImg, x + 146, y + 120, 48, 42, 24, 9);
			g.drawImage(sysImg, x + 171, y + 120, 65, 0, 3, 9);
			switch(sortMode){
			case 0:
				g.drawImage(sysImg, x + 176, y + 120, 60, 33, 6, 9);
				g.drawImage(sysImg, x + 182, y + 120, 54, 42, 6, 9);
				g.drawImage(sysImg, x + 188, y + 120, 60, 33, 6, 9);
				g.drawImage(sysImg, x + 194, y + 120, 72, 42, 6, 9);
				break;
			case 1:
				g.drawImage(sysImg, x + 176, y + 120, 36, 42, 12, 9);
				break;
			case 2:
				g.drawImage(sysImg, x + 176, y + 120, 0, 33, 18, 9);
				break;
			case 3:
				g.drawImage(sysImg, x + 176, y + 120, 18, 33, 18, 9);
				break;
			case 4:
				g.drawImage(sysImg, x + 176, y + 120, 36, 33, 18, 9);
				break;
			case 5:
				g.drawImage(sysImg, x + 176, y + 120, 54, 33, 18, 9);
				break;
			case 6:
				g.drawImage(sysImg, x + 176, y + 120, 72, 33, 18, 9);
				break;
			}
			
		//ステータス表示-----------------------------------
		}else if(stoneViewMode == 1){
			
			//今装備している石のうち、選択いている方の石でのステータス上昇分
			int[] eqStoneParm = new int[6];
			int eqSt;
			if(mode == MENU_STONE_1){
				stone.StoneList(Battle.ptm[batSetChar].eStone[0]);
				eqSt = 0;
			}else{
				stone.StoneList(Battle.ptm[batSetChar].eStone[1]);
				eqSt = 1;
			}
			
			eqStoneParm[0] =(Battle.ptm[batSetChar].str - Battle.ptm[batSetChar].sStr) * stone.str / 100 + stoneList[stone.no];
			eqStoneParm[1] =(Battle.ptm[batSetChar].agi - Battle.ptm[batSetChar].sAgi) * stone.agi / 100 + stoneList[stone.no];
			eqStoneParm[2] =(Battle.ptm[batSetChar].vit - Battle.ptm[batSetChar].sVit) * stone.vit / 100 + stoneList[stone.no];
			eqStoneParm[3] =(Battle.ptm[batSetChar].inte - Battle.ptm[batSetChar].sInt) * stone.inte / 100 + stoneList[stone.no];
			eqStoneParm[4] =(Battle.ptm[batSetChar].luk - Battle.ptm[batSetChar].sLuk) * stone.luk / 100 + stoneList[stone.no];

			
			if(menuCurPoint > 0){
				stone.StoneList(stoneViewList[menuCurPoint - 1]);
			}else{
				stone.StoneList(0);
			}
	
			g.drawImage(sysImg, x + 123, y + 3, 0, 42, 18, 9);		//atk
			g.drawImage(sysImg, x + 123, y + 15, 18, 42, 18, 9);	//def
			
			g.drawImage(sysImg, x + 123, y + 32, 0, 33, 18, 9);		//str
			g.drawImage(sysImg, x + 123, y + 44, 18, 33, 18, 9);	//agi
			g.drawImage(sysImg, x + 123, y + 56, 36, 33, 18, 9);	//vit
			g.drawImage(sysImg, x + 123, y + 68, 54, 33, 18, 9);	//int
			g.drawImage(sysImg, x + 123, y + 80, 72, 33, 18, 9);	//luk
			
			NumDraw(x + 165, y + 3, Battle.ptm[batSetChar].atk);
			NumDraw(x + 165, y + 15, Battle.ptm[batSetChar].def);
			
			NumDraw(x + 165, y + 32, Battle.ptm[batSetChar].str);
			NumDraw(x + 165, y + 44, Battle.ptm[batSetChar].agi);
			NumDraw(x + 165, y + 56, Battle.ptm[batSetChar].vit);
			NumDraw(x + 165, y + 68, Battle.ptm[batSetChar].inte);
			NumDraw(x + 165, y + 80, Battle.ptm[batSetChar].luk);
			
			g.drawImage(sysImg, x + 165, y + 2, 22, 51, 8, 11);
			g.drawImage(sysImg, x + 165, y + 14, 22, 51, 8, 11);
			
			g.drawImage(sysImg, x + 165, y + 31, 22, 51, 8, 11);
			g.drawImage(sysImg, x + 165, y + 43, 22, 51, 8, 11);
			g.drawImage(sysImg, x + 165, y + 55, 22, 51, 8, 11);
			g.drawImage(sysImg, x + 165, y + 67, 22, 51, 8, 11);
			g.drawImage(sysImg, x + 165, y + 79, 22, 51, 8, 11);
	
			DrawMessage(x + 122, y + 92 + fntH * 1, "火", 255, 255, 255, g);
			DrawMessage(x + 172, y + 92 + fntH * 1, "水", 255, 255, 255, g);
			DrawMessage(x + 122, y + 92 + fntH * 2, "風", 255, 255, 255, g);
			DrawMessage(x + 172, y + 92 + fntH * 2, "土", 255, 255, 255, g);
			DrawMessage(x + 122, y + 92 + fntH * 3, "光", 255, 255, 255, g);
			DrawMessage(x + 172, y + 92 + fntH * 3, "闇", 255, 255, 255, g);
			
			for(int i = 1; i < 7; i++){
				int gw = (100 - Battle.ptm[batSetChar].elm[i] / 2) * 38 / 100;
				if(gw < 0){
					gw = 0;
				}else if(gw > 38){
					gw = 38;
				}
				g.drawImage(Cmn.sysImg, x + 134 + ((i - 1) % 2 * 50), y + 95 + ((i - 1 )/ 2 * fntH), 20, 62, gw, 5);	
			}

			//装着後のステ表示
			if((mode == MENU_STONE_1 || mode == MENU_STONE_2) &&
					((stone.no == 0 || stone.no != Battle.ptm[no].eStone[0]) && (stone.no == 0 || stone.no != Battle.ptm[no].eStone[1]))){
					
				//int j;
				int oriParm = 0;
				int eqParm = 0;
				int checkParm = 0;
				int afterParm = 0;
				
				
				for(int i = 0; i < 2; i++){
					if(i == 0){
						oriParm = Battle.ptm[batSetChar].atk;
						eqParm = Battle.ptm[batSetChar].atk - Battle.ptm[batSetChar].str;
						checkParm = Battle.ptm[batSetChar].str - Battle.ptm[batSetChar].sStr;
						afterParm = Battle.ptm[batSetChar].sStr - eqStoneParm[0] + checkParm + (checkParm * stone.str / 100) + eqParm + stoneList[stone.no];}
					if(i == 1){
						oriParm = Battle.ptm[batSetChar].def;
						eqParm = Battle.ptm[batSetChar].def - (Battle.ptm[batSetChar].vit / 2);
						checkParm = Battle.ptm[batSetChar].vit - Battle.ptm[batSetChar].sVit;
						afterParm = (Battle.ptm[batSetChar].sVit - eqStoneParm[2] + checkParm + (checkParm * stone.vit / 100) + stoneList[stone.no]) / 2 + eqParm;
					}
					if(oriParm != afterParm){
						if(oriParm > afterParm){
							//ステダウン
							g.drawImage(Cmn.sysImg, x + 196, y + 3 + (i * 12), 0, 51, 11, 8);
							NumDrawC(x + 194, y + 3 + (i * 12), afterParm, 1);
						}else{
							//ステアップ
							g.drawImage(Cmn.sysImg, x + 196, y + 3 + (i * 12), 11, 51, 11, 8);
							NumDraw(x + 194, y + 3 + (i * 12), afterParm);
						}
					}
				}				
				for(int i = 0; i < 5; i++){
					if(i == 0){
						oriParm = Battle.ptm[batSetChar].str;
						
						checkParm = Battle.ptm[batSetChar].str - Battle.ptm[batSetChar].sStr;
						afterParm = Battle.ptm[batSetChar].sStr - eqStoneParm[0] + checkParm + (checkParm * stone.str / 100) + stoneList[stone.no];}
					if(i == 1){
						oriParm = Battle.ptm[batSetChar].agi;
						checkParm = Battle.ptm[batSetChar].agi - Battle.ptm[batSetChar].sAgi;
						afterParm = Battle.ptm[batSetChar].sAgi - eqStoneParm[1] + checkParm + (checkParm * stone.agi / 100) + stoneList[stone.no];}
					if(i == 2){
						oriParm = Battle.ptm[batSetChar].vit;
						checkParm = Battle.ptm[batSetChar].vit - Battle.ptm[batSetChar].sVit;
						afterParm = Battle.ptm[batSetChar].sVit - eqStoneParm[2] + checkParm + (checkParm * stone.vit / 100) + stoneList[stone.no];}
					if(i == 3){
						oriParm = Battle.ptm[batSetChar].inte;
						checkParm = Battle.ptm[batSetChar].inte - Battle.ptm[batSetChar].sInt;
						afterParm = Battle.ptm[batSetChar].sInt - eqStoneParm[3] + checkParm + (checkParm * stone.inte / 100) + stoneList[stone.no];}
					if(i == 4){
						oriParm = Battle.ptm[batSetChar].luk;
						checkParm = Battle.ptm[batSetChar].luk - Battle.ptm[batSetChar].sLuk;
						afterParm = Battle.ptm[batSetChar].sLuk - eqStoneParm[4] + checkParm + (checkParm * stone.luk / 100) + stoneList[stone.no];
					}
				
					if(oriParm != afterParm){
						if(oriParm > afterParm){
							//ステダウン
							g.drawImage(Cmn.sysImg, x + 196, y + 32 + (i * 12), 0, 51, 11, 8);
							NumDrawC(x + 194, y + 32 + (i * 12), afterParm, 1);
						}else{
							//ステアップ
							g.drawImage(Cmn.sysImg, x + 196, y + 32 + (i * 12), 11, 51, 11, 8);
							NumDraw(x + 194, y + 32 + (i * 12), afterParm);
						}
					}
				}
				
				//属性関係-----------------------------
				int stoneEle1 = Cmn.stone.elm;
				Cmn.stone.StoneList(Battle.ptm[batSetChar].eStone[1 - eqSt]);
				int stoneEle2 = Cmn.stone.elm;
				
				int[] eqElm = new int[5];
				Cmn.item.ItemList(Battle.ptm[batSetChar].eArm);
				eqElm[0] = Cmn.item.elm;
				Cmn.item.ItemList(Battle.ptm[batSetChar].eGud);
				eqElm[1] = Cmn.item.elm;
				Cmn.item.ItemList(Battle.ptm[batSetChar].eHel);
				eqElm[2] = Cmn.item.elm;
				Cmn.item.ItemList(Battle.ptm[batSetChar].eAc1);
				eqElm[3] = Cmn.item.elm;
				Cmn.item.ItemList(Battle.ptm[batSetChar].eAc2);
				eqElm[4] = Cmn.item.elm;
				
				int[] viewElm = new int[7];
				for(int i = 0; i < 7; i++){
					if(i == 0){
						viewElm[i] = Element.Elements(Battle.ELM_NULL, stoneEle1) + Element.Elements(Battle.ELM_NULL, stoneEle2) - 100;
						viewElm[i] += Element.Elements(Battle.ELM_NULL, eqElm[0]) + Element.Elements(Battle.ELM_NULL, eqElm[1]) + Element.Elements(Battle.ELM_NULL, eqElm[2]) + Element.Elements(Battle.ELM_NULL, eqElm[3]) + Element.Elements(Battle.ELM_NULL, eqElm[4]) - 500;
						
					}else{
						viewElm[i] = Element.Elements((i + 1) * 10, stoneEle1) + Element.Elements((i + 1) * 10, stoneEle2) - 100;
						viewElm[i] += Element.Elements((i + 1) * 10, eqElm[0]) + Element.Elements((i + 1) * 10, eqElm[1]) + Element.Elements((i + 1) * 10, eqElm[2])  + Element.Elements((i + 1) * 10, eqElm[3]) + Element.Elements((i + 1) * 10, eqElm[4]) - 500;
						
					}
					if(viewElm[i] < 0){
						viewElm[i] = 0;
					}else if(viewElm[i] > 200){
						viewElm[i] = 200;
					}
				}
				
				for(int i = 1; i < 7; i++){
					int gw = (100 - viewElm[i] / 2) * 38 / 100;
					if(gw < 0){
						gw = 0;
					}else if(gw > 38){
						gw = 38;
					}
					g.drawImage(Cmn.sysImg, x + 134 + ((i - 1) % 2 * 50), y + 101 + ((i - 1 )/ 2 * fntH), 20, 62, gw, 5);	
				}
				
			}
			
			
		//スキル表示-----------------------------------
		}else if(stoneViewMode > 1){
			if(mode != MENU_STONE){
				if(mode == MENU_STONE_LIST){
					stone.StoneList(Battle.ptm[no].eStone[menuCurPoint]);
				}else{
					if(menuCurPoint > 0){
						stone.StoneList(stoneViewList[menuCurPoint - 1]);
					}else{
						stone.StoneList(0);
					}
				}
				
				//ここからメイン描画部分
				int nr, ng, nb;
				if(stone.no > 0){
					//石のスキルを表示用にリストに格納
					int[] sList = new int[Stone.STONE_MAX_LEVEL];
					int[] sLv = new int[Stone.STONE_MAX_LEVEL];
					int c = 0;
					
					for(int i = 0; i < Stone.STONE_MAX_LEVEL; i++){
						sList[i] = 0;
						sLv[i] = 0;
					}
					for(int i = 0; i < Stone.STONE_MAX_LEVEL; i++){
						if(stone.skill[i] > 0){
							sList[c] = stone.skill[i];
							sLv[c] = i;
							c++;
						}
					}
					
					//スキル一覧を描画
					for(int i = (stoneViewMode - 2) * 8; i < (stoneViewMode - 2) * 8 + 8; i++){
						if(i >= 20) break;
						skill.SkillList(sList[i]);
						if(skill.no > 0){
							if(sLv[i] >= Cmn.stoneList[stone.no]){
								nr = 128; ng = 128; nb = 128;
							}else if(skill.orPhiMag == Skill.OR_PHI){
								nr = 255; ng = 200; nb = 200;
							}else if(skill.no >= 421 && skill.no <= 440){
								nr = 200; ng = 200; nb = 255;
							}else if(skill.tag <= 1){
								nr = 255; ng = 255; nb = 255;
							}else if(skill.tag >= 20){
								nr = 255; ng = 220; nb = 255;
							}else{
								nr = 180; ng = 255; nb = 225;
							}
							
							int ny = (i - (stoneViewMode - 2) * 8) * fntH;
							DrawMessage(x + 123, y + 1 + ny + fntH, skill.name, nr, ng, nb, g);
							if(sLv[i] < Cmn.stoneList[stone.no]){
								NumDraw(x + 222, y + 7 + ny, skill.mp);
							}
						}
					}
					
					//スキルが9個以上ある場合、改ページのマーク描画
					if(c > 8){
						int ny;
						if(cntCur < 15){
							ny = (15 - cntCur) / 4;
						}else{
							ny = (cntCur -15) / 4;
						}
						g.drawImage(sysImg, x + 210, y + 130 + ny, 38, 51, 12, 10);
						
						NumDraw(x + 194, y + 7 + 126, stoneViewMode - 1);
						g.drawImage(sysImg, x + 195, y + 7 + 126, 60, 0, 5, 9);
						NumDraw(x + 208, y + 7 + 126, 1 + (c - 1) / 8);
						
					}
				
					
				}else{
					DrawMessage(x + 123, y + 1 + fntH, "スキル表示", 128, 128, 128, g);
				}
			}else{
				DrawMessage(x + 123, y + 1 + fntH, "スキル表示", 128, 128, 128, g);
			}
		}		
		
		
		//緑枠表示----------------------------------------------
		int tagX = x;
		int tagY = y;		//緑枠の移動先の位置
		
		if(mode == MENU_STONE_LIST){
			tagX = x;
			tagY = y + 1 + fntH * (menuCurPoint);
		}else if(mode >= MENU_STONE_1 && mode <= MENU_STONE_2){
			tagX = x;
			tagY = y + 21 + fntH * (menuCurPoint - pageTop);
		}
		
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		
		if(mode > MENU_STONE && mode <= MENU_STONE + 50){
			DrawActRect(actRctX, actRctY, 110, 20, g);
		}
		
		if(mode == MENU_STONE_LIST){
			DrawCur(x + 108, tagY + 4, RIGHT);
		}
		
		//カーソル表示--------------------------------------
		if(mode == MENU_STONE_1 || mode == MENU_STONE_2){
			if(pageTop > 0){
				DrawCur(x - 10, y + 73, LEFT);
			}
			if(stoneHave - pageTop > 6){
				DrawCur(x + 114, y + 73, RIGHT);
			}
		}
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * 装備画面の描画
	 * @param x 表示座標
	 * @param y 表示座標
	 * @param no どのキャラの装備を表示するか
	 * @param mode 装備リスト表示中か装備選択中かとかいろいろ
	 */
	public static void DrawEq(int x, int y, int no, int mode){
		
		String st = "";
		int[] eqAftParm = new int[7];
		
		//装備一覧表示モード
		if(mode == MENU_EQ || mode == MENU_EQ_LIST){
			DrawWin(x, y, 120, 100, g);		//装備一覧
			for(int i = 0; i < 6; i++){
				if(i == 0){
					item.ItemList(Battle.ptm[no].eWep);
					if(item.no == 0) st = "武器";
				}
				if(i == 1){
					item.ItemList(Battle.ptm[no].eArm);
					if(item.no == 0) st = "体";
				}
				if(i == 2){
					item.ItemList(Battle.ptm[no].eGud);
					if(item.no == 0) st = "腕";
				}
				if(i == 3){
					item.ItemList(Battle.ptm[no].eHel);
					if(item.no == 0) st = "頭";
				}
				if(i == 4){
					item.ItemList(Battle.ptm[no].eAc1);
					if(item.no == 0) st = "アクセサリ";
				}
				if(i == 5){
					item.ItemList(Battle.ptm[no].eAc2);
					if(item.no == 0) st = "アクセサリ";
				}
				if(item.no == 0){
					DrawMessage(x + 3, y + 1 + fntH * (1 + i), st, 128, 128, 128, g);
				}else{
					DrawMessage(x + 3, y + 1 + fntH * (1 + i), item.name, 255, 255, 255, g);
				}
			}

		//装備可能なもの一覧を表示モード
		}else if(mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2){
			DrawWin(x, y, 120, 20, g);			//装備しているもの
			DrawWin(x, y + 20, 120, 124, g);	//装備可能なもの一覧
			
			
			if(mode == MENU_EQ_WEP){
				item.ItemList(Battle.ptm[no].eWep);
				if(item.no == 0) st = "武器";
			}else if(mode == MENU_EQ_ARM){
				item.ItemList(Battle.ptm[no].eArm);
				if(item.no == 0) st = "体";
			}else if(mode == MENU_EQ_GUD){
				item.ItemList(Battle.ptm[no].eGud);
				if(item.no == 0) st = "腕";
			}else if(mode == MENU_EQ_HELM){
				item.ItemList(Battle.ptm[no].eHel);
				if(item.no == 0) st = "頭";
			}else if(mode == MENU_EQ_ACS1){
				item.ItemList(Battle.ptm[no].eAc1);
				if(item.no == 0) st = "アクセサリ";
			}else if(mode == MENU_EQ_ACS2){
				item.ItemList(Battle.ptm[no].eAc2);
				if(item.no == 0) st = "アクセサリ";
			}
			if(item.no == 0){
				DrawMessage(x + 3, y + 1 + fntH, st, 128, 128, 128, g);
			}else{
				DrawMessage(x + 3, y + 1 + fntH, item.name, 255, 255, 255, g);
			}
			
			//現在装備しているアイテムの補正パラメータを格納
			item.AnotherParm(item.anoter);
			eqAftParm[0] = item.str;
			eqAftParm[1] = item.agi;
			eqAftParm[2] = item.vit;
			eqAftParm[3] = item.inte;
			eqAftParm[4] = item.luk;
			eqAftParm[5] = item.iatk;
			eqAftParm[6] = item.idef;
			
			
			for(int i = pageTop; i < pageTop + 7; i++){
				if(i == showNum){
					break;
				}else{
					item.ItemList(showItems[i]);
					if(i == 0){
						DrawMessage(x + 3, y + 21 + fntH * (i - pageTop + 1), "装備解除", 200, 200, 200, g);
					}else{
						DrawMessage(x + 3, y + 21 + fntH * (i - pageTop + 1), item.name, 255, 255, 255, g);
						NumDraw(x + 106, y + 26 + fntH * (i - pageTop), itemList[item.no]);
					}

				}
			}
			
		}
		
		
		//ゲージ表示---------------------------------------
		if(showNum > 7 && (mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2)){
			g.setColor(Graphics.getColorOfRGB(100, 100, 100));
			g.fillRect(x + 110, y + 28, 6, 108);
			g.setColor(Graphics.getColorOfRGB(220, 220, 220));
			g.fillRect(x + 110, y + 26, 6, 2);
			g.fillRect(x + 110, y + 134, 6, 2);
			
			int gy = pageTop * 108 / showNum;
			int gh = 7 * 108 / showNum;
			g.fillRect(x + 110, y + 28 + gy, 6, gh);
			
		}

		
		//ステータス表示------------------------------------------
		DrawWin(x + 120, y, 104, 144, g);

		int eqGudAtk = 0;	//装備変更するときのステ上下の表示に使用
		
		if(item.typeMode == Item.TYPE_GURD){
			if(mode == MENU_EQ_ARM){
				item.ItemList(Battle.ptm[batSetChar].eArm);
			}else if(mode == MENU_EQ_GUD){
				item.ItemList(Battle.ptm[batSetChar].eGud);
			}else if(mode == MENU_EQ_HELM){
				item.ItemList(Battle.ptm[batSetChar].eHel);
			}else{
				item.ItemList(0);
			}
			eqGudAtk = item.atk;
		
		}
		
		//選択中の装備のパラメータ
		item.ItemList(showItems[menuCurPoint]);
		
		//選択中装備の属性を格納（装備変更するときのステ上下に使用
		int nowGudElm = item.elm;
		
		g.drawImage(sysImg, x + 123, y + 3, 0, 42, 18, 9);		//atk
		g.drawImage(sysImg, x + 123, y + 15, 18, 42, 18, 9);	//def
		
		g.drawImage(sysImg, x + 123, y + 32, 0, 33, 18, 9);		//str
		g.drawImage(sysImg, x + 123, y + 44, 18, 33, 18, 9);	//agi
		g.drawImage(sysImg, x + 123, y + 56, 36, 33, 18, 9);	//vit
		g.drawImage(sysImg, x + 123, y + 68, 54, 33, 18, 9);	//int
		g.drawImage(sysImg, x + 123, y + 80, 72, 33, 18, 9);	//luk
		
		NumDraw(x + 165, y + 3, Battle.ptm[batSetChar].atk);
		NumDraw(x + 165, y + 15, Battle.ptm[batSetChar].def);
		
		NumDraw(x + 165, y + 32, Battle.ptm[batSetChar].str);
		NumDraw(x + 165, y + 44, Battle.ptm[batSetChar].agi);
		NumDraw(x + 165, y + 56, Battle.ptm[batSetChar].vit);
		NumDraw(x + 165, y + 68, Battle.ptm[batSetChar].inte);
		NumDraw(x + 165, y + 80, Battle.ptm[batSetChar].luk);
		
		g.drawImage(sysImg, x + 165, y + 2, 22, 51, 8, 11);
		g.drawImage(sysImg, x + 165, y + 14, 22, 51, 8, 11);
		
		g.drawImage(sysImg, x + 165, y + 31, 22, 51, 8, 11);
		g.drawImage(sysImg, x + 165, y + 43, 22, 51, 8, 11);
		g.drawImage(sysImg, x + 165, y + 55, 22, 51, 8, 11);
		g.drawImage(sysImg, x + 165, y + 67, 22, 51, 8, 11);
		g.drawImage(sysImg, x + 165, y + 79, 22, 51, 8, 11);

		DrawMessage(x + 122, y + 92 + fntH * 1, "火", 255, 255, 255, g);
		DrawMessage(x + 172, y + 92 + fntH * 1, "水", 255, 255, 255, g);
		DrawMessage(x + 122, y + 92 + fntH * 2, "風", 255, 255, 255, g);
		DrawMessage(x + 172, y + 92 + fntH * 2, "土", 255, 255, 255, g);
		DrawMessage(x + 122, y + 92 + fntH * 3, "光", 255, 255, 255, g);
		DrawMessage(x + 172, y + 92 + fntH * 3, "闇", 255, 255, 255, g);
		
		for(int i = 1; i < 7; i++){
			int gw = (100 - Battle.ptm[batSetChar].elm[i] / 2) * 38 / 100;
			if(gw < 0){
				gw = 0;
			}else if(gw > 38){
				gw = 38;
			}
			g.drawImage(Cmn.sysImg, x + 134 + ((i - 1) % 2 * 50), y + 95 + ((i - 1 )/ 2 * fntH), 20, 62, gw, 5);	
		}
		
		if(mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2){
			int oriParm = 0;
			int checkParm = 0;
			int afterParm = 0;
			
			if((item.typeMode == Item.TYPE_WEP && (mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2)) || (item.no == 0 && item.typeMode == Item.TYPE_WEP)){
				oriParm = Battle.ptm[batSetChar].atk;
				afterParm = Battle.ptm[batSetChar].str + item.atk;
				if(oriParm == afterParm){
					NumDraw(x + 194, y + 3, afterParm);
				}else if(oriParm > afterParm){
					//ステダウン
					g.drawImage(Cmn.sysImg, x + 196, y + 3, 0, 51, 11, 8);
					NumDrawC(x + 194, y + 3, afterParm, 1);
				}else{
					//ステアップ
					g.drawImage(Cmn.sysImg, x + 196, y + 3, 11, 51, 11, 8);
					NumDraw(x + 194, y + 3, afterParm);
				}
			}else if((item.typeMode == Item.TYPE_GURD && (mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2)) || (item.no == 0 && item.typeMode == Item.TYPE_GURD)){
				oriParm = Battle.ptm[batSetChar].def;
				afterParm = Battle.ptm[batSetChar].def - eqGudAtk + item.atk;
				if(oriParm == afterParm){
					NumDraw(x + 194, y + 15, afterParm);
				}else if(oriParm > afterParm){
					//ステダウン
					g.drawImage(Cmn.sysImg, x + 196, y + 15, 0, 51, 11, 8);
					NumDrawC(x + 194, y + 15, afterParm, 1);
				}else{
					//ステアップ
					g.drawImage(Cmn.sysImg, x + 196, y + 15, 11, 51, 11, 8);
					NumDraw(x + 194, y + 15, afterParm);
				}
			}
			
			
			//装備変更後のパラメータを格納
			item.AnotherParm(item.anoter);
			
			for(int i = 0; i < 5; i++){
				if(i == 0){
					oriParm = Battle.ptm[batSetChar].str;
					
					checkParm = Battle.ptm[batSetChar].str - eqAftParm[0];
					afterParm = checkParm + item.str;}
				if(i == 1){
					oriParm = Battle.ptm[batSetChar].agi;
					checkParm = Battle.ptm[batSetChar].agi - eqAftParm[1];
					afterParm = checkParm + item.agi;}
				if(i == 2){
					oriParm = Battle.ptm[batSetChar].vit;
					checkParm = Battle.ptm[batSetChar].vit - eqAftParm[2];
					afterParm = checkParm + item.vit;}
				if(i == 3){
					oriParm = Battle.ptm[batSetChar].inte;
					checkParm = Battle.ptm[batSetChar].inte - eqAftParm[3];
					afterParm = checkParm + item.inte;}
				if(i == 4){
					oriParm = Battle.ptm[batSetChar].luk;
					checkParm = Battle.ptm[batSetChar].luk - eqAftParm[4];
					afterParm = checkParm + item.luk;
				}
			
				if(oriParm != afterParm){
					if(oriParm > afterParm){
						//ステダウン
						g.drawImage(Cmn.sysImg, x + 196, y + 32 + (i * 12), 0, 51, 11, 8);
						NumDrawC(x + 194, y + 32 + (i * 12), afterParm, 1);
					}else{
						//ステアップ
						g.drawImage(Cmn.sysImg, x + 196, y + 32 + (i * 12), 11, 51, 11, 8);
						NumDraw(x + 194, y + 32 + (i * 12), afterParm);
					}
				}
			}
			
			
			//属性関係----------------------------------------
			if((item.typeMode == Item.TYPE_GURD && (mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2)) || (item.no == 0 && item.typeMode == Item.TYPE_GURD)){
				//防具のとき限定
				stone.StoneList(Battle.ptm[batSetChar].eStone[0]);
				int stoneEle1 = Cmn.stone.elm;
				stone.StoneList(Battle.ptm[batSetChar].eStone[1]);
				int stoneEle2 = Cmn.stone.elm;
	
				int[] eqElm = new int[5];
				item.ItemList(Battle.ptm[batSetChar].eArm);
				eqElm[0] = item.elm;
				item.ItemList(Battle.ptm[batSetChar].eGud);
				eqElm[1] = item.elm;
				item.ItemList(Battle.ptm[batSetChar].eHel);
				eqElm[2] = item.elm;
				item.ItemList(Battle.ptm[batSetChar].eAc1);
				eqElm[3] = item.elm;
				item.ItemList(Battle.ptm[batSetChar].eAc2);
				eqElm[4] = item.elm;
	
				if(mode == MENU_EQ_ARM){
					item.ItemList(Battle.ptm[batSetChar].eArm);
					eqElm[0] = nowGudElm;
				}else if(mode == MENU_EQ_GUD){
					item.ItemList(Battle.ptm[batSetChar].eGud);
					eqElm[1] = nowGudElm;
				}else if(mode == MENU_EQ_HELM){
					item.ItemList(Battle.ptm[batSetChar].eHel);
					eqElm[2] = nowGudElm;
				}else if(mode == MENU_EQ_ACS1){
					item.ItemList(Battle.ptm[batSetChar].eAc1);
					eqElm[3] = nowGudElm;
				}else if(mode == MENU_EQ_ACS2){
					item.ItemList(Battle.ptm[batSetChar].eAc2);
					eqElm[4] = nowGudElm;
				}else{
					item.ItemList(0);
				}
				
				int[] viewElm = new int[7];
				for(int i = 0; i < 7; i++){
					if(i == 0){
						viewElm[i] = Element.Elements(Battle.ELM_NULL, stoneEle1) + Element.Elements(Battle.ELM_NULL, stoneEle2) - 100;
						viewElm[i] += Element.Elements(Battle.ELM_NULL, eqElm[0]) + Element.Elements(Battle.ELM_NULL, eqElm[1]) + Element.Elements(Battle.ELM_NULL, eqElm[2]) + Element.Elements(Battle.ELM_NULL, eqElm[3]) + Element.Elements(Battle.ELM_NULL, eqElm[4]) - 500;
						
					}else{
						viewElm[i] = Element.Elements((i + 1) * 10, stoneEle1) + Element.Elements((i + 1) * 10, stoneEle2) - 100;
						viewElm[i] += Element.Elements((i + 1) * 10, eqElm[0]) + Element.Elements((i + 1) * 10, eqElm[1]) + Element.Elements((i + 1) * 10, eqElm[2])  + Element.Elements((i + 1) * 10, eqElm[3]) + Element.Elements((i + 1) * 10, eqElm[4]) - 500;
						
					}
					if(viewElm[i] < 0){
						viewElm[i] = 0;
					}else if(viewElm[i] > 200){
						viewElm[i] = 200;
					}
				}
	
				for(int i = 1; i < 7; i++){
					int gw = (100 - viewElm[i] / 2) * 38 / 100;
					if(gw < 0){
						gw = 0;
					}else if(gw > 38){
						gw = 38;
					}
					g.drawImage(Cmn.sysImg, x + 134 + ((i - 1) % 2 * 50), y + 101 + ((i - 1 )/ 2 * fntH), 20, 62, gw, 5);	
				}
			}
			
		}
			
		
		//緑枠表示----------------------------------------------
		int tagX = x;
		int tagY = y;		//緑枠の移動先の位置
		
		if(mode == MENU_EQ_LIST){
			tagX = x;
			tagY = y + 1 + fntH * (menuCurPoint);
		}else if(mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2){
			tagX = x;
			tagY = y + 21 + fntH * (menuCurPoint - pageTop);
		}
		
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		
		if(mode > MENU_EQ && mode <= MENU_EQ_LIST){
			DrawActRect(actRctX, actRctY, 110, 20, g);
		}
		if(mode == MENU_EQ_LIST){
			DrawCur(x + 108, tagY + 4, RIGHT);
		}
		
		//カーソル表示--------------------------------------
		if(mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2){
			if(pageTop > 0){
				DrawCur(x - 10, y + 73, LEFT);
			}
			if(showNum - pageTop > 7){
				DrawCur(x + 114, y + 73, RIGHT);
			}
		}
		
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * スキル画面の描画
	 * @param x 表示座標
	 * @param y 表示座標
	 * @param no どのキャラのスキルを表示するか
	 * @param mode 移動中2か戦闘中1か
	 */
	public static void DrawSkill(int x, int y, int no, int mode){
		DrawWin(x, y, 120, 20, g);
		
		int flgs;
		if(mode == 1){
			flgs = batlingFlg;
		}else{
			flgs = menuCmnd;
		}
		
		if(flgs == FLG_CMD_SKILL_LIST && SkillSetOn == 0){
			DrawMessage(x + 3 , y + 1 + fntH, "使用", 255, 255, 255, g);
			DrawMessage(x + 72 , y + 1 + fntH, "セット", 128, 128, 128, g);
		}else if(flgs == FLG_CMD_SKILL_LIST && SkillSetOn > 0 || flgs == FLG_CMD_SKILL_SET){
			DrawMessage(x + 3 , y + 1 + fntH, "使用", 128, 128, 128, g);
			DrawMessage(x + 72 , y + 1 + fntH, "セット", 255, 255, 255, g);
		}else{
			DrawMessage(x + 3 , y + 1 + fntH, "使用", 255, 255, 255, g);
			DrawMessage(x + 72 , y + 1 + fntH, "セット", 255, 255, 255, g);
		}
			
		//ショートカット設定ウィンドウを表示-------------------------------------------------
		if(flgs == FLG_CMD_SKILL_SET || (flgs != FLG_CMD_SKILL_LIST && SkillSetOn > 0)){
			DrawWin(x, y + 20, 160, 52, g);
			
			for(int i = 0; i < 3; i++){
				int nx = x + 18 + i % 2 * 16;
				int ny = y + 22 + i * fntH + fntH;
				if(Battle.ptm[no].setSkillView[i] == 1){
					skill.SkillList(Battle.ptm[no].setSkill[i]);
					DrawMessage(nx , ny, skill.name, 255, 255, 255, g);
				}
			}
			
		}else{
			//スキルの一覧を表示-------------------------------------------------
			DrawWin(x, y + 20, 224, 122, g);
			
			for(int i = pageTop; i < pageTop + 12; i++){
				if(i == Battle.ptm[no].haveSkill){
					break;
				}else{
					skill.SkillList(Battle.ptm[no].skill[i]);
					
					//属性アイコンとかALLアイコンとかを描画
					int flgY = 0;
					if(cntIcon <= 11){flgY = 0;
					}else if((cntIcon > 11 && cntIcon <= 17) || (cntIcon > 53 && cntIcon <= 60)){flgY = 1;
					}else if((cntIcon > 17 && cntIcon <= 23) || (cntIcon > 47 && cntIcon <= 53)){flgY = 2;
					}else if((cntIcon > 23 && cntIcon <= 29) || (cntIcon > 41 && cntIcon <= 47)){flgY = 3;
					}else if(cntIcon > 29 && cntIcon <= 41) {flgY = 4;
					}
					if(skill.tag == 11 || skill.tag == 1){
						g.drawImage(sysImg, x + 79 + (i - pageTop) % 2 * 110, y + 32 + fntH * ((i - pageTop) / 2), 83, 78 + flgY * 7, 20, 7);
					}
					if(skill.elm >= Battle.ELM_FIRE){
						g.drawImage(sysImg, x + (i - pageTop) % 2 * 110, y + 31 + fntH * ((i - pageTop) / 2), 72 + (skill.elm / 10 - 2) * 8, 113 + flgY * 8, 8, 8);
					}
					
					
					if(SkillSetOn > 0){
						if((skill.usePoint == 0 || skill.usePoint == 1)){
							int nr, ng, nb;
							if(skill.tag <= 1){
								if(skill.orPhiMag == Skill.OR_PHI){
									nr = 255; ng = 200; nb = 200;
								}else if(skill.no >= 421 && skill.no <= 440){
									nr = 200; ng = 200; nb = 255;
								}else{
									nr = 255; ng = 255; nb = 255;
								}
							}else if(skill.tag >= 20){
								nr = 255; ng = 220; nb = 255;
							}else{
								nr = 200; ng = 255; nb = 200;
							}
							DrawMessage(x + 7 + (i - pageTop) % 2 * 110, y + 22 + fntH + fntH * ((i - pageTop) / 2), skill.name, nr, ng, nb, g);
							NumDraw(x + 109 + (i - pageTop) % 2 * 110, y + 27 + + fntH * ((i - pageTop) / 2), skill.mp);
						}else{
							DrawMessage(x + 7 + (i - pageTop) % 2 * 110, y + 22 + fntH + fntH * ((i - pageTop) / 2), skill.name, 160, 160, 160, g);
							NumDraw(x + 109 + (i - pageTop) % 2 * 110, y + 27 + fntH * ((i - pageTop) / 2), skill.mp);
						}
					}else{
						if((skill.usePoint == 0 || skill.usePoint == mode)){
							int nr, ng, nb;
							if(skill.tag <= 1){
								if(skill.orPhiMag == Skill.OR_PHI){
									nr = 255; ng = 200; nb = 200;
								}else if(skill.no >= 421 && skill.no <= 440){
									nr = 200; ng = 200; nb = 255;
								}else{
									nr = 255; ng = 255; nb = 255;
								}
							}else if(skill.tag >= 20){
								nr = 255; ng = 220; nb = 255;
							}else{
								nr = 200; ng = 255; nb = 200;
							}
							if(terepNot != 0 && skill.no == 482){
								nr = 160; ng = 160; nb = 160;
							}
							DrawMessage(x + 7 + (i - pageTop) % 2 * 110, y + 22 + fntH + fntH * ((i - pageTop) / 2), skill.name, nr, ng, nb, g);
							NumDraw(x + 109 + (i - pageTop) % 2 * 110, y + 27 + + fntH * ((i - pageTop) / 2), skill.mp);
						}else{
							DrawMessage(x + 7 + (i - pageTop) % 2 * 110, y + 22 + fntH + fntH * ((i - pageTop) / 2), skill.name, 160, 160, 160, g);
							NumDraw(x + 109 + (i - pageTop) % 2 * 110, y + 27 + fntH * ((i - pageTop) / 2), skill.mp);
						}
					}
				}
			}
			
			//ゲージ表示---------------------------------------
			if(Battle.ptm[no].haveSkill > 12){
				g.setColor(Graphics.getColorOfRGB(100, 100, 100));
				g.fillRect(x + 8, y + 132, 210, 6);
				g.setColor(Graphics.getColorOfRGB(220, 220, 220));
				g.fillRect(x + 6, y + 132, 2, 6);
				g.fillRect(x + 216, y + 132, 2, 6);
				int gx = pageTop * 210 / (Battle.ptm[no].haveSkill + Battle.ptm[no].haveSkill % 2);
				int gw = 12 * 210 / (Battle.ptm[no].haveSkill + Battle.ptm[no].haveSkill % 2);
				g.fillRect(x + 8 + gx, y + 132, gw, 6);
			}
		}
		
		//説明表示------------------------------------------
		skill.SkillList(Battle.ptm[no].skill[menuCurPoint]);
		DrawWin(0, 0, WIDTH, 40, g);
		if(mode == 1){
			HelpMsg(batlingFlg);
		}else{
			HelpMsg(menuCmnd);
		}
		
		//緑枠表示----------------------------------------------
		int tagX = x;
		int tagY = y + 22;		//緑枠の移動先の位置
		
		int flg;
		if(mode == 1){
			flg = batlingFlg;
		}else{
			flg = menuCmnd;
		}
		
		if(flg == FLG_CMD_SKILL_LIST){
			tagX = x + (menuCurPoint - pageTop) % 2 * 110;
			tagY = y + 22 + fntH * ((menuCurPoint - pageTop) / 2);
		}else if(flg == FLG_CMD_SKILL_USE_OR_SET){
			tagX = x + menuCurPoint * 70;
			tagY = y;
		}else if(flg == FLG_CMD_SKILL_SET){
			tagX = x + 16 + menuCurPoint % 2 * 16;
			tagY = y + 20 + menuCurPoint * fntH;
		}
		
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		
		if(flg == FLG_CMD_SKILL_LIST || flg == FLG_CMD_SKILL_SET){
			DrawActRect(actRctX, actRctY, 112, 20, g);
		}else if(flg == FLG_CMD_SKILL_USE_OR_SET){
			DrawActRect(actRctX, actRctY, 50, 20, g);
		}
		
		//カーソル表示--------------------------------------
		if(pageTop > 0 && flg != FLG_CMD_SKILL_SET && flgs != FLG_CMD_SKILL_USE_OR_SET && flgs != MENU_SKILL){
			DrawCur(x, y + 120, LEFT);
		}
		if(Battle.ptm[no].haveSkill - pageTop > 12 && flg != FLG_CMD_SKILL_SET && flgs != FLG_CMD_SKILL_USE_OR_SET && flgs != MENU_SKILL){
			DrawCur(x + 212, y + 120, RIGHT);
		}
		if(flg == FLG_CMD_SKILL_USE_OR_SET){
			if(menuCurPoint == 0){
				DrawCur(x + 50, y + 4, RIGHT);
				DrawCur(x + 20, y + 16, DOWN);
			}else{
				DrawCur(x + 50, y + 4, LEFT);
				DrawCur(x + 90, y + 16, DOWN);
			}
		}
		if(flg == FLG_CMD_SKILL_SET){
			DrawCur(x + 132 + menuCurPoint % 2 * 16, y + 24 + menuCurPoint * fntH, RIGHT);
			DrawCur(x, y + 42, LEFT);
		}
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * 説明メッセージ描画
	 */
	private static void HelpMsg(int mode){
		
		String msg1 = "ここに";
		String msg2 = "説明が入ります" ;
			
		if(mode == MENU_MAIN){
			//メインメニュー
			if(menuCurPoint == MENU_MAIN_ITEM){
				msg1 = "アイテムを使用します";
				msg2 = "";
			}else if(menuCurPoint == MENU_MAIN_SKILL){
				msg1 = "スキルを使用、セットします";
				msg2 = "";
			}else if(menuCurPoint == MENU_MAIN_STONE){
				msg1 = "精霊石をセットします";
				msg2 = "";
			}else if(menuCurPoint == MENU_MAIN_STAT){
				msg1 = "ステータスを表示します";
				msg2 = "";
			}else if(menuCurPoint == MENU_MAIN_EQ){
				msg1 = "装備を表示、変更します";
				msg2 = "";
			}else if(menuCurPoint == MENU_MAIN_QUE){
				msg1 = "現在進行中のクエストと";
				msg2 = "完了済みクエストの確認をします";
			}else if(menuCurPoint == MENU_MAIN_CNF){
				msg1 = "各種設定を行います";
				msg2 = "";
			}else if(menuCurPoint == MENU_MAIN_SAVE){
				if(saveNot != 0){
					msg1 = "現在セーブ禁止状態です";
					msg2 = "";
				}else{
					msg1 = "現在の状態を保存します";
					msg2 = "";
				}
			}
		
		}else if(mode >= MENU_STAT && mode <= MENU_STAT + 10){
			msg1 = "決定キーでページの切り替えを行います";
			msg2 = "でもそれは未実装";
		}else if(mode == MENU_CNF){
			//設定メニュー
			if(menuCurPoint == MENU_CNF_1){
				msg1 = "移動時の速度を設定";
				msg2 = "早い　1←　→８　遅い";
			}else if(menuCurPoint == MENU_CNF_1 + 1){
				msg1 = "戦闘のテンポを設定";
				msg2 = "早い　1←　→８　遅い";
			}else if(menuCurPoint == MENU_CNF_1 + 2){
				msg1 = "カーソルが連続で入力される間隔を設定";
				msg2 = "狭い　1←　→８　広い";
			}else if(menuCurPoint == MENU_CNF_1 + 3){
				msg1 = "決定キーが連続で入力される間隔を設定";
				msg2 = "狭い　1←　→８　広い";
			}else if(menuCurPoint == MENU_CNF_1 + 4){
				msg1 = "文字の影の描画を設定";
				msg2 = "処理が重い場合にＯＦＦに";
			}else if(menuCurPoint >= MENU_CNF_1 + 5 && menuCurPoint <= MENU_CNF_1 + 8){
				msg1 = "ウィンドウの外枠の色を設定";
				msg2 = "色及び透明度を設定する事ができます";
			}else if(menuCurPoint >= MENU_CNF_1 + 9 && menuCurPoint <= MENU_CNF_1 + 12){
				msg1 = "ウィンドウの内側の色を設定";
				msg2 = "色及び透明度を設定する事ができます";
			}else if(menuCurPoint >= MENU_CNF_1 + 13 && menuCurPoint <= MENU_CNF_1 + 16){
				msg1 = "キャラクタ情報パネルの外枠の色を設定";
				msg2 = "色及び透明度を設定する事ができます";
			}else if(menuCurPoint >= MENU_CNF_1 + 17 && menuCurPoint <= MENU_CNF_1 + 20){
				msg1 = "キャラクタ情報パネルの内側の色を設定";
				msg2 = "色及び透明度を設定する事ができます";
			}
			
		}else if(menuCmnd == MENU_SKILL){
			msg1 = "スキルを使用するキャラを選択";
			msg2 = "";
		
		}else if(menuCmnd == FLG_CMD_SUP_SKILL){
			if(skill.no == 481){
				msg1 = "↓ｏｒ決定　経験値表示";
				msg2 = "↑　　　　　キャンセル";
			}else if(skill.no == 482){
				msg1 = "↓ｏｒ決定　ダンジョンから脱出";
				msg2 = "↑　　　　　キャンセル";
			}else if(skill.no == 483){
				msg1 = "↓ｏｒ決定　エンカウント率上昇";
				msg2 = "↑　　　　　キャンセル";
			}else if(skill.no == 484){
				msg1 = "↓ｏｒ決定　エンカウント率減少";
				msg2 = "↑　　　　　キャンセル";
			}else if(skill.no == 490){
					msg1 = "↓ｏｒ決定　エンカウント無効";
					msg2 = "↑　　　　　キャンセル";
			}else{
				msg1 = "スキルを使用する対象を選択";
				msg2 = "";
			}
			
		}else if(mode == FLG_CMD_SKILL_LIST){
			msg1 = skill.msg1;
			msg2 = skill.msg2;
			
			if(Battle.ptm[batSetChar].haveSkill <= 0){
				msg1 = "";
				msg2 = "";
			}
			if(skill.no == 482 && terepNot != 0){
				msg1 = "現在テレポート不可状態です";
				msg2 = "";
			}
			
		}else if(mode == FLG_CMD_SKILL_USE_OR_SET){
			if(menuCurPoint == 0){
				msg1 = "スキルを使用";
				msg2 = "";
			}else{
				msg1 = "スキルをショートカットに設定";
				msg2 = "";
			}
			
		}else if(mode == FLG_CMD_SKILL_SET){
			msg1 = "ショートカットを設定する箇所を選択";
			msg2 = "";
			
		}else if((mode >= MENU_ITEM && mode < MENU_ITEM_CUT)){
			msg1 = item.msg1;
			msg2 = item.msg2;
			if(item.haveItem[0] <= 0){
				msg1 = "";
				msg2 = "";
			}
			if(item.no == 52 && terepNot != 0){
				msg1 = "現在テレポート不可状態です";
				msg2 = "";
			}
								
		}else if(mode == MENU_STONE){
			msg1 = "精霊石を変更するキャラを選択";
			msg2 = "";
			
		}else if(mode == MENU_STONE_LIST){
			msg1 = "精霊石の変更箇所を選択";
			msg2 = "";
			
		}else if(mode >= MENU_STONE_1 && mode <= MENU_STONE_2){
			if(menuCurPoint > 0){
				stone.StoneList(stoneViewList[menuCurPoint - 1]);
				msg1 = stone.msg1;
				msg2 = stone.msg2;
			}else{
				msg1 = "精霊石を外します";
				msg2 = "";
			}
			
		}else if(mode == MENU_EQ){
			msg1 = "装備を変更するキャラを選択";
			msg2 = "";
			
		}else if(mode == MENU_EQ_LIST){
			if(menuCurPoint == 0){
				item.ItemList(Battle.ptm[batSetChar].eWep);
				if(item.no == 0){
					msg1 = "武器を装備します";
					msg2 = "";
				}
			}else if(menuCurPoint == 1){
				item.ItemList(Battle.ptm[batSetChar].eArm);
				if(item.no == 0){
					msg1 = "服、鎧を装備します";
					msg2 = "";
				}
			}else if(menuCurPoint == 2){
				item.ItemList(Battle.ptm[batSetChar].eGud);
				if(item.no == 0){
					msg1 = "腕輪、盾の装備を装備します";
					msg2 = "";
				}
			}else if(menuCurPoint == 3){
				item.ItemList(Battle.ptm[batSetChar].eHel);
				if(item.no == 0){
					msg1 = "帽子、兜を装備します";
					msg2 = "";
				}
			}else if(menuCurPoint == 4){
				item.ItemList(Battle.ptm[batSetChar].eAc1);
				if(item.no == 0){
					msg1 = "アクセサリを装備します";
					msg2 = "";
				}
			}else if(menuCurPoint == 5){
				item.ItemList(Battle.ptm[batSetChar].eAc2);
				if(item.no == 0){
					msg1 = "アクセサリを装備します";
					msg2 = "";
				}
			}
			
			if(item.no != 0){
				msg1 = item.msg1;
				msg2 = item.msg2;
			}
			
			
		}else if(mode >= MENU_EQ_WEP && mode <= MENU_EQ_ACS2){
			item.ItemList(showItems[menuCurPoint]);
			msg1 = item.msg1;
			msg2 = item.msg2;
			if(item.no == 0){
				msg1 = "装備してるアイテムを外します";
				msg2 = "";
			}
			
		}else if(mode == MENU_QUE){
			que.QuestList(questViewList[menuCurPoint]);
			msg1 = que.msg1;
			msg2 = que.msg2;
			
		}else if(mode == MENU_ITEM_CUT){
			msg1 = "←→でアイテムカテゴリの選択";
			msg2 = "↓でアイテム選択へ　↑で戻る";		
			
		}else if(mode == SHOP_BUY_SEAL){
			msg1 = "アイテムを購入するか売却するかを選択";
			msg2 = "";
			
		}else if(mode == SHOP_LIST || mode == SHOP_SEAL_LIST){
			msg1 = item.msg1;
			msg2 = item.msg2;
			
		}else if(mode == SHOP_BUY_NUM){
			msg1 = "↑↓でアイテムの数を１個ずつ調整";
			msg2 = "←→で１０個ずつ調整　決定キーで購入";
			
		}else if(mode == MENU_SAVE){
			msg1 = "セーブする箇所を選択してください";
			msg2 = "";
		}
		
		
		DrawMessage(3, 3 + fntH, msg1, 255, 255, 255, g);
		DrawMessage(3, 3 + fntH * 2, msg2, 255, 255, 255, g);
		
	}
//------------------------------------------------------------------------------------------------------
	/**
	 * LvExpを描画
	 */
	private static void LvExpShow(){
		
		int x =  (WIDTH - (Battle.ptW * ptNum)) / 2 ;
		int nHi = 42;
		for(int i = 0; i < ptNum; i++){
			DrawWin(x + (i * Battle.ptW), Battle.ptY - nHi, Battle.ptW, nHi, g);
			
			//値を表示
			int nx = x + (i * Battle.ptW);
			int y = Battle.ptY - nHi + 4;
			int nj = 0;
			int ni = 0;
			
			//Lvの描画------------------------------
			g.drawImage(Cmn.sysImg, nx + 8, y, 80, 14, 14, 10);
			
			nx = nx + (Battle.ptW - 16) - 10;
			nj = (Battle.ptm[i].lv - Battle.ptm[i].lv % 10) / 10;
			if(Battle.ptm[i].lv >= 10){
				g.drawImage(Cmn.sysImg, nx, y, nj * 8, 9, 8, 12);
			}
			nj = Battle.ptm[i].lv - nj * 10;
			nx += 8;
			ni = nj;
			g.drawImage(Cmn.sysImg, nx, y, ni * 8, 9, 8, 12);

			//EXPの描画------------------------------
			nx = x + (i * Battle.ptW) + 3;
			
			int next = Battle.ptm[i].next - Battle.ptm[i].exp;
			if(next < 0) next = 0;
			
			NumDraw(nx + (Battle.ptW - 6), y + nHi - 27, Battle.ptm[i].exp);
			NumDraw(nx + (Battle.ptW - 6), y + nHi - 16, next);
			
			g.drawImage(Cmn.sysImg, nx, y + nHi - 17, 112, 0, 9, 10);
			
		}
		
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * セーブ画面の描画
	 */
	public static void DrawSave(int x, int y, Graphics g){
		
		DrawWin(x, y, 224, 66, g);
		DrawWin(x, y + 66, 224, 66, g);
		DrawWin(x, y + 132, 224, 66, g);
		
		for(int i = 0;i < 3; i++){
			if(Title.saveAt[i] == 1){
				//サマリ表示
				//名前
				DrawMessage(x + 4, y + 1 + fntH + (i * 66), Title.samName[i], 255, 255, 255, g);
				
				//クエストタイトル
				que.QuestList(Title.samTitle[i]);
				DrawMessage(x + 60, y + 1 + fntH + (i * 66), que.title, 255, 255, 255, g);
				
				//Lvの描画
				int ny = y + 4 + fntH + (i * 66);
				g.drawImage(Cmn.sysImg, x + 4, ny, 80, 14, 14, 10);
				
				int nx = x + 4 + 20;
				int nj = 0;
				int ni = 0;
				nj = (Title.samLv[i] -Title.samLv[i] % 10) / 10;
				if(Title.samLv[i] >= 10){
					g.drawImage(Cmn.sysImg, nx, ny, nj * 8, 9, 8, 12);
				}
				nj = Title.samLv[i] - nj * 10;
				nx += 8;
				ni = nj;
				g.drawImage(Cmn.sysImg, nx, ny, ni * 8, 9, 8, 12);
				
				//HPの描画
				ny += 12;
				g.drawImage(Cmn.sysImg, x + 4, ny + 2, 80, 0, 7, 10);
				NumDraw(x + 14 + 6 * 3, ny + 3, Title.samHp[i]);
				g.drawImage(Cmn.sysImg, x + 14 + 6 * 3, ny + 2, 60, 0, 5, 9);
				NumDraw(x + 14 + 6 * 7, ny + 3, Title.samMhp[i]);
				
				//Map
				ny += 13;
				DrawMessage(x + 4, ny + fntH, Title.samMap[i], 255, 255, 255, g);
				
				//プレイ時間
				if(Title.samTime[i] < 0) Title.samTime[i] = 0;
				Title.DrawTime(Title.samTime[i], x + 160, ny + 5, g);
				
			}else{
				DrawMessage(x + 8, y + 6 + fntH + (i * 66), "Ｅｍｐｔｙ", 255, 255, 255, g);
				
			}
		}	
	}
	
//-----------------------------------------------------------------------------------------------------
	/**
	 * 名前変更の描画
	 */
	public static void DrawNameChange(int x, int y, int mode, Graphics g){
		DrawWin(x, y, 60, 20, g);
		DrawWin(x + 60, y, 144, 20, g);
		DrawWin(x, y + 20, 224, 220, g);
		if(mode == 0){
			DrawMessage(x + 1, y + 21 + fntH * 1, "あいうえお　かきくけこ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 2, "さしすせそ　たちつてと", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 3, "なにぬねの　はひふへほ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 4, "まみむめも　や　ゆ　よ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 5, "らりるれろ　わをんーっ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 6, "がぎぐげご　ざじずぜぞ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 7, "だぢづでど　ばびぶべぼ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 8, "ぱぴぷぺぽ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 9, "ぁぃぅぇぉ　ゃゅょゎ　", 255, 255, 255, g);
			DrawMessage(x + 176, y + 21 + fntH * 1, "カタカナ", 255, 255, 255, g);
		}else{
			DrawMessage(x + 1, y + 21 + fntH * 1, "アイウエオ　カキクケコ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 2, "サシスセソ　タチツテト", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 3, "ナニヌネノ　ハヒフヘホ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 4, "マミムメモ　ヤ　ユ　ヨ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 5, "ラリルレロ　ワヲンーッ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 6, "ガギグゲゴ　ザジズゼゾ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 7, "ダヂヅデド　バビブベボ", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 8, "パピプペポ　", 255, 255, 255, g);
			DrawMessage(x + 1, y + 21 + fntH * 9, "ァィゥェォ　ャュョヮヴ", 255, 255, 255, g);
			DrawMessage(x + 176, y + 21 + fntH * 1, "ひらがな", 255, 255, 255, g);
		}
		DrawMessage(x + 1, y + 21 + fntH * 10, "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮ", 255, 255, 255, g);
		DrawMessage(x + 1, y + 21 + fntH * 11, "ＯＰＱＲＳＴＵＶＷＸＹＺ！―", 255, 255, 255, g);
		DrawMessage(x + 1, y + 21 + fntH * 12, "ａｂｃｄｅｆｇｈｉｊｋｌｍｎ", 255, 255, 255, g);
		DrawMessage(x + 1, y + 21 + fntH * 13, "ｏｐｑｒｓｔｕｖｗｘｙｚ？＋", 255, 255, 255, g);
		
		DrawMessage(x + 176, y + 21 + fntH * 2, "もどる", 255, 255, 255, g);
		DrawMessage(x + 176, y + 21 + fntH * 3, "入力完了", 255, 255, 255, g);
		
		
		DrawMessage(x + 1, y + 1 + fntH, HeName, 255, 255, 255, g);
		DrawMessage(x + 61, y + 1 + fntH, "主人公の名前を入力", 255, 255, 255, g);
		
		//選択枠表示
		int tagX = 0;
		int tagY = 0;		//緑枠の移動先の位置
		
		tagX = x + (int)(menuCurPoint / 100) * fntW;
		tagY = y + 20 + (menuCurPoint - (int)(menuCurPoint / 100) * 100) * fntH;

		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(menuCurPoint < 1400){
			Cmn.DrawActRect(actRctX, actRctY, 16, 20, g);
		}else{
			Cmn.DrawActRect(actRctX, actRctY, 60, 20, g);
		}

		
	}
//-------------------------------------------------------------------------------------------------------
	/**
	 * お店を表示
	 * @param no お店の番号（Item.javaのやつ）
	 * @param mode 買いモードか売りモードか
	 */
	public static void ShopDraw(int no, int mode, Graphics g){
		
		int x = 0;
		int y = 40;
		
		//買い、売りの選択表示
		DrawWin(x, y, 80, 20, g);
		if(menuCmnd == SHOP_BUY_SEAL){
			DrawMessage(x + 2, y + 1 + fntH, "買う", 255, 255, 255, g);
			DrawMessage(x + 52, y + 1 + fntH, "売る", 255, 255, 255, g);
		}else if(mode == 0){
			DrawMessage(x + 2, y + 1 + fntH, "買う", 255, 255, 255, g);
			DrawMessage(x + 52, y + 1 + fntH, "売る", 128, 128, 128, g);
		}else if(mode == 1){
			DrawMessage(x + 2, y + 1 + fntH, "買う", 128, 128, 128, g);
			DrawMessage(x + 52, y + 1 + fntH, "売る", 255, 255, 255, g);
		}
		
		DrawWin(x + 80, y, 160, 20, g);		//所持金
		DrawMessage(x + 84, y + 1 + fntH, "所持金", 255, 255, 255, g);
		NumDraw(x + 220, y + 6, money);
		DrawMessage(x + 224, y + 1 + fntH, "円", 255, 255, 255, g);
		
		y = 60;
		DrawWin(x, y, 166, 132, g);			//商品一覧
		DrawWin(x + 166, y, 74, 132, g);	//持ってる数表示
		
				
		//買いモード-----------------------------------------------------
		if(mode == 0){
			//商品一覧表示
			int nr, ng, nb;
			item.ShopList(no);
			for(int i = 0; i < 8; i++){
				item.ItemList(item.shop[i]);
				if(item.typeMode == Item.TYPE_ITEM){
					nr = 200; ng = 255; nb = 225;
				}else if(item.typeMode == Item.TYPE_ETC){
					nr = 255; ng = 220; nb = 220;
				}else{	
					nr = 255; ng = 255; nb = 255;
				}
				DrawMessage(x + 3, y + 1 + fntH * (1 + i), item.name, nr, ng, nb, g);
				if(item.no > 0 && menuCmnd != SHOP_BUY_NUM){
					NumDraw(x + 162, y + 6 + fntH * i, item.price);
				}
				if(item.no > 0){
					//持っている数
					NumDraw(206, y + 6 + fntH * i, itemList[item.no]);
					//装備してる数
					g.drawImage(Cmn.sysImg, 208, y + 6 + fntH * i, 60, 0, 5, 9);
					NumDraw(236, y + 6 + fntH * i, ItemEvent.CheckEqItem(item.no));
				}
			}
		
			//一度に買う数を設定しているときの描画
			if(menuCmnd == SHOP_BUY_NUM){
				item.ItemList(item.shop[menuCurPoint]);
				NumDraw(x + 105, y + 6 + fntH * menuCurPoint, goodsNum);
				NumDraw(x + 162, y + 6 + fntH * menuCurPoint, item.price * goodsNum);
			}
			
		}else{
		//売りモード-----------------------------------------------------
			//売るもの一覧表示
			int sealPrice;
			
			int nr, ng, nb;
			for(int i = pageTop; i < pageTop + 8; i++){
				if(i == item.haveItem[0]){
					break;
				}else{
					item.ItemList(itemAllList[i]);
					
					if(item.price == 0){
						nr = 128; ng = 128; nb = 128;
					}else if(item.typeMode == Item.TYPE_ITEM){
						nr = 200; ng = 255; nb = 225;
					}else if(item.typeMode == Item.TYPE_ETC){
						nr = 255; ng = 220; nb = 220;
					}else{	
						nr = 255; ng = 255; nb = 255;
					}
					DrawMessage(x + 3, y + 1 + fntH * (1 + i - pageTop), item.name, nr, ng, nb, g);
					
					if(item.price == 0){
						sealPrice = 0;
					}else{
						sealPrice = item.price / 2;
					}	
					
					if(item.no > 0 && menuCmnd != SHOP_SEAL_NUM){
						NumDraw(x + 162, y + 6 + fntH * (i - pageTop), sealPrice);
					}
					if(item.no > 0){
						//持っている数
						NumDraw(206, y + 6 + fntH * (i - pageTop), itemList[item.no]);
						//装備してる数
						g.drawImage(Cmn.sysImg, 208, y + 6 + fntH * (i - pageTop), 60, 0, 5, 9);
						NumDraw(236, y + 6 + fntH * (i - pageTop), ItemEvent.CheckEqItem(item.no));
					}
				}
			}
			
			//一度に売る数を設定しているときの描画
			if(menuCmnd == SHOP_SEAL_NUM){
				item.ItemList(itemAllList[menuCurPoint]);
				if(item.price == 0){
					sealPrice = 0;
				}else{
					sealPrice = item.price / 2;
				}	
				NumDraw(x + 105, y + 6 + fntH * (menuCurPoint - pageTop), goodsNum);
				NumDraw(x + 162, y + 6 + fntH * (menuCurPoint - pageTop), sealPrice * goodsNum);
			}
			
		}
		
		//ステータス表示		
		DrawWin(x, y + 132, 240, 48, g);
		g.drawImage(sysImg, x + 4, y + 156, 0, 42, 18, 9);
		g.drawImage(sysImg, x + 4, y + 168, 18, 42, 18, 9);
		
		int oriP = 0;
		int aftP = 0;
		
		if(mode == 0){
			for(int i = 0; i < ptNum; i++){
				item.ItemList(item.shop[menuCurPoint]);
				DrawMessage(x + 26 + i * 54, y + 134 + fntH, Battle.ptm[i].name, 255, 255, 255, g);
				NumDraw(x + 46 + i * 54, y + 156, Battle.ptm[i].atk);
				NumDraw(x + 46 + i * 54, y + 168, Battle.ptm[i].def);
				g.drawImage(sysImg, x + 46 + i * 54, y + 154, 22, 51, 8, 11);
				g.drawImage(sysImg, x + 46 + i * 54, y + 166, 22, 51, 8, 11);

				if(item.typeMode == Item.TYPE_WEP){
					oriP = Battle.ptm[i].atk;
					aftP = Battle.ptm[i].str + item.atk;
					if(oriP == aftP){
						NumDraw(x + 74 + i * 54, y + 156, aftP);
					}else if(oriP < aftP){
						NumDrawC(x + 74 + i * 54, y + 156, aftP, 2);
					}else{
						NumDrawC(x + 74 + i * 54, y + 156, aftP, 1);
					}
				}else if(item.typeMode == Item.TYPE_GURD){
					int eqAtk = item.atk;
					if(item.type >= Item.GUD_ARMOR && item.type <= Item.GUD_CLOTH){
						item.ItemList(Battle.ptm[i].eArm);
					}else if(item.type == Item.GUD_GURD){
						item.ItemList(Battle.ptm[i].eGud);
					}else if(item.type >= Item.GUD_HELM && item.type <= Item.GUD_HATR){
						item.ItemList(Battle.ptm[i].eHel);
					}
					oriP = Battle.ptm[i].def;
					aftP = Battle.ptm[i].def - item.atk + eqAtk;
					if(oriP == aftP){
						NumDraw(x + 74 + i * 54, y + 168, aftP);
					}else if(oriP < aftP){
						NumDrawC(x + 74 + i * 54, y + 168, aftP, 2);
					}else{
						NumDrawC(x + 74 + i * 54, y + 168, aftP, 1);
					}
					
				}	
			}
		}else{
			for(int i = 0; i < ptNum; i++){
				item.ItemList(itemAllList[menuCurPoint]);
				DrawMessage(x + 26 + i * 54, y + 134 + fntH, Battle.ptm[i].name, 255, 255, 255, g);
				NumDraw(x + 46 + i * 54, y + 156, Battle.ptm[i].atk);
				NumDraw(x + 46 + i * 54, y + 168, Battle.ptm[i].def);
				g.drawImage(sysImg, x + 46 + i * 54, y + 154, 22, 51, 8, 11);
				g.drawImage(sysImg, x + 46 + i * 54, y + 166, 22, 51, 8, 11);
				if(item.typeMode == Item.TYPE_WEP){
					oriP = Battle.ptm[i].atk;
					aftP = Battle.ptm[i].str + item.atk;
					if(oriP <= aftP){
						NumDraw(x + 74 + i * 54, y + 156, aftP);
					}else{
						NumDrawC(x + 74 + i * 54, y + 156, aftP, 1);
					}
					//NumDraw(x + 74 + i * 54, y + 156, Battle.ptm[i].str + item.atk);
				}else if(item.typeMode == Item.TYPE_GURD){
					int eqAtk = item.atk;
					if(item.type >= Item.GUD_ARMOR && item.type <= Item.GUD_CLOTH){
						item.ItemList(Battle.ptm[i].eArm);
					}else if(item.type == Item.GUD_GURD){
						item.ItemList(Battle.ptm[i].eGud);
					}else if(item.type >= Item.GUD_HELM && item.type <= Item.GUD_HATR){
						item.ItemList(Battle.ptm[i].eHel);
					}
					oriP = Battle.ptm[i].def;
					aftP = Battle.ptm[i].def - item.atk + eqAtk;
					if(oriP <= aftP){
						NumDraw(x + 74 + i * 54, y + 168, aftP);
					}else{
						NumDrawC(x + 74 + i * 54, y + 168, aftP, 1);
					}
					//NumDraw(x + 74 + i * 54, y + 168, Battle.ptm[i].def - item.atk + eqAtk);
				}	
			}
		}
		
		
		//ゲージ表示---------------------------------------
		if(item.haveItem[0] > 8 && (mode == 1)){
			g.setColor(Graphics.getColorOfRGB(100, 100, 100));
			g.fillRect(x + 168, y + 6, 6, 124);
			g.setColor(Graphics.getColorOfRGB(220, 220, 220));
			g.fillRect(x + 168, y + 4, 6, 2);
			g.fillRect(x + 168, y + 128, 6, 2);
			
			int gy = pageTop * 124 / item.haveItem[0];
			int gh = 8 * 124 / item.haveItem[0];
			g.fillRect(x + 168, y + 6 + gy, 6, gh);
			
		}
		
		
		//緑枠表示----------------------------------------------
		int tagX = x;
		int tagY = y;		//緑枠の移動先の位置
		
		int flg;
		flg = menuCmnd;

		
		if(flg == SHOP_LIST || flg == SHOP_BUY_NUM ||
				flg == SHOP_SEAL_LIST || flg == SHOP_SEAL_NUM){
			tagX = x;
			tagY = y + fntH * (menuCurPoint - pageTop);
		}else if(flg == SHOP_BUY_SEAL){
			tagX = x + 50 * menuCurPoint;
			tagY = y - 20;
		}
		
		if(actRctX - tagX < RECT_SPEED && actRctX - tagX > -RECT_SPEED){
			actRctX = tagX;
		}else if(actRctX > tagX){
			actRctX -= RECT_SPEED;
		}else if(actRctX < tagX){
			actRctX += RECT_SPEED;
		}
		
		if(actRctY - tagY < RECT_SPEED && actRctY - tagY > -RECT_SPEED){
			actRctY = tagY;
		}else if(actRctY > tagY){
			actRctY -= RECT_SPEED;
		}else if(actRctY < tagY){
			actRctY += RECT_SPEED;
		}
		
		if(flg == SHOP_LIST || flg == SHOP_BUY_NUM ||
				flg == SHOP_SEAL_LIST || flg == SHOP_SEAL_NUM){
			DrawActRect(actRctX, actRctY, 112, 20, g);
			
		}else if(flg == SHOP_BUY_SEAL){
			DrawActRect(actRctX, actRctY, 30, 20, g);
			if(menuCurPoint == 0){
				DrawCur(x + 34, y - 14, RIGHT);
			}else{
				DrawCur(x + 34, y - 14, LEFT);
			}
			DrawCur(x + 6 + 50 * menuCurPoint, y, DOWN);
		}

		//カーソル表示--------------------------------------
		if(flg == SHOP_SEAL_LIST){
			if(pageTop > 0){
				DrawCur(x - 5, y + 67, LEFT);
			}
			if(item.haveItem[0] - pageTop > 8){
				DrawCur(x + 168, y + 67, RIGHT);
			}
		}
		
		//説明表示------------------------------------------
		if(mode == 0){
			item.ItemList(item.shop[menuCurPoint]);
		}else{
			item.ItemList(itemAllList[menuCurPoint]);
		}
		DrawWin(0, 0, WIDTH, 40, g);
		HelpMsg(flg);
		
		
		
	}
	
//------------------------------------------------------------------------------------------------------
	/**
	 * カーソルを描画する
	 * @param x 左上の場所を指定
	 */
	public static void DrawCur(int x, int y, int dir){
	
		int nx = 0;
		int ny = 0;
		int cx = 0;
		int cy = 0;
		int w = 0;
		int h = 0;
		
		if(dir == LEFT){
			ny = y;
			if(cntCur < 15){
				nx = x + (15 - cntCur) / 3;
			}else{
				nx = x + (cntCur -15) / 3;
			}
			cx = 30;
			cy = 51;
			w = 8;
			h = 11;
		}else if(dir == RIGHT){
			ny = y;
			if(cntCur < 15){
				nx = x + cntCur / 3;
			}else{
				nx = x + (30 - cntCur) / 3;
			}
			cx = 22;
			cy = 51;
			w = 8;
			h = 11;
		}else if(dir == UP){
			nx = x;
			if(cntCur < 15){
				ny = y + (15 - cntCur) / 3;
			}else{
				ny = y + (cntCur -15) / 3;
			}
			cx = 11;
			cy = 51;
			w = 11;
			h = 8;
		}else if(dir == DOWN){
			nx = x;
			if(cntCur < 15){
				ny = y + cntCur / 3;
			}else{
				ny = y + (30 - cntCur) / 3;
			}
			cx = 0;
			cy = 51;
			w = 11;
			h = 8;
		}
		
		
		g.drawImage(Cmn.sysImg, nx, ny, cx, cy, w, h);
		
		
	}
	
//------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
//***********************共通処理　開始**********************
//-------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
	//キー状態の取得
	public static int gKey(){
		
		int a;
		int r;
		
		//スリープ　最初のスリープ処理ボタンを連続で押されたとき
		//メッセージがすぐ消えてしまう
		//try{
		//	Thread.sleep(100);
		//}catch(Exception e){}
		
		if((a =c.getKeypadState()) == 0) {
			r = 23;
			return r;
			
		}else{
			//キーが押されたら待機から抜ける
			for(int i =0;i <= 22;i++){
				if((1 << i & a) != 0){
					return i;
				}
			}
		}
		
		return 23;
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * メッセージを描画する
	 * @param x X座標
	 * @param y Y座標
	 * @param message メッセージ
	 * @param R,G,B 色指定
	 * @param g 描画オブジェクト
	 */
	public static void DrawMessage(int x, int y, String message, int R, int G, int B, Graphics g){
		for(int i = 0; i < message.length(); i++){
			char c = message.charAt(i);
			int dx = x + fntW * i;
			DrawChara(dx, y, c, R, G, B, g);
		}
	}
	
//-------------------------------------------------------------------------------------------------------
	public static void DrawChara(int dx, int y, char c, int R, int G, int B, Graphics g){
		char[] dc = new char[1];
		dc[0] = c;
		
		if(fontShadowDraw == 1){
			g.setColor(Graphics.getColorOfRGB(0, 0, 0));
			g.drawChars(dc, dx + 1, y, 0, 1);
		}
		
		g.setColor(Graphics.getColorOfRGB(R, G, B));
		g.drawChars(dc, dx, y, 0, 1);
	}
	
//-------------------------------------------------------------------------------------------------------
	public static void DrawWin(int x, int y, int w, int h, Graphics g){
		
		//枠を描画
		g.setColor(Graphics.getColorOfRGB(winMsgRecCol[0], winMsgRecCol[1], winMsgRecCol[2], winMsgRecAlpha));
		g.fillRect(x, y, MsgWin.EDGE_WIDHT, h);
		g.fillRect(x + MsgWin.EDGE_WIDHT, y, w - MsgWin.EDGE_WIDHT * 2, MsgWin.EDGE_WIDHT);
		g.fillRect(x + w - MsgWin.EDGE_WIDHT, y, MsgWin.EDGE_WIDHT, h);
		g.fillRect(x + MsgWin.EDGE_WIDHT, y + h - MsgWin.EDGE_WIDHT, w - MsgWin.EDGE_WIDHT * 2 , MsgWin.EDGE_WIDHT);
		
		//内側を描画
		g.setColor(Graphics.getColorOfRGB(winMsgCol[0], winMsgCol[1], winMsgCol[2], winMsgAlpha));
		g.fillRect(x + MsgWin.EDGE_WIDHT , y + MsgWin.EDGE_WIDHT, w - MsgWin.EDGE_WIDHT * 2, h - MsgWin.EDGE_WIDHT * 2);
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 指定したウィンドウの枠を緑にする 指定位置よりx、y方向にそれぞれ-1される
	 */
	public static void DrawActRect(int x, int y, int w, int h, Graphics g){
		
		g.setColor(Graphics.getColorOfRGB(150, 255, 150));
		g.fillRect(x, y, MsgWin.EDGE_WIDHT, h);
		g.fillRect(x + MsgWin.EDGE_WIDHT, y, w - MsgWin.EDGE_WIDHT * 2, MsgWin.EDGE_WIDHT);
		g.fillRect(x + w - MsgWin.EDGE_WIDHT, y, MsgWin.EDGE_WIDHT, h);
		g.fillRect(x + MsgWin.EDGE_WIDHT, y + h - MsgWin.EDGE_WIDHT, w - MsgWin.EDGE_WIDHT * 2 , MsgWin.EDGE_WIDHT);
		
		g.setColor(Graphics.getColorOfRGB(150, 150, 255));
		g.fillRect(x - 1, y - 1, 1, h + 2);
		g.fillRect(x, y - 1, w, 1);
		g.fillRect(x + w, y - 1, 1, h + 2);
		g.fillRect(x, y + h, w, 1);
	}
//-------------------------------------------------------------------------------------------------------
	/**
	 * Map間移動時のえっふぇくとを描く
	 */
	public void DrawEffe(int effNo){
		if(moveFlg == 1){
			
			//画面暗転の画像処理
			EffDrawClose(effNo,CLOSING_EF_NUM);
			
			contEfe++;
			if(contEfe > CLOSING_EF_NUM){
				contEfe = 0;
				moveFlg =2;
			}

		}else if(moveFlg == 3 && nextMapLoadFinish == 1){
			
			//暗転明けの画像処理
			EffDrawOpen(effNo, OPENING_EF_NUM);
			
			contEfe++;
			if(contEfe > OPENING_EF_NUM){
				contEfe = 0;
				moveFlg =0;
				nextMapLoadFinish = 0;
			}
			
		}else if(moveFlg >= 2){
			if(effNo == 99){
				//99はデータロード時
				g.drawScaledImage(loading, 0, 0, WIDTH, HEIGHT, 0, 0, 120, 120);
			}else if(effNo >= 50){
				//50番以降は白暗転
				g.setColor(Graphics.getColorOfName(Graphics.WHITE));
				g.fillRect(0, 0, WIDTH, HEIGHT);
			}else{
				g.setColor(Graphics.getColorOfName(Graphics.BLACK));
				g.fillRect(0, 0, WIDTH, HEIGHT);
			}
		}
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 戦闘移行時のえっふぇくとを描く
	 */
	public void DrawBatEffe(int effNo){
		if(batMoveFlg == 1){
			
			//画面暗転の画像処理			
			EffDrawClose(effNo,CLOSING_BAT_NUM);
			
			contEfe++;
			if(contEfe > CLOSING_BAT_NUM){
				contEfe = 0;
				batMoveFlg =2;
				battleOn = 1;
			}

		}else if(batMoveFlg == 2 && batLoadFinish == 1){
			
			//暗転明けの画像処理
			EffDrawOpen(effNo, OPENING_BAT_NUM);
			
			contEfe++;
			if(contEfe > OPENING_BAT_NUM){
				contEfe = 0;
				batMoveFlg =0;
				batLoadFinish = 0;
				batlingFlg = FLG_CMD_MAIN;		//メインカウント入力状態に
				inputCnt = batInterval;	//インプットカウントを多めに設定
			}
			
		}else if(batMoveFlg >= 2 && batMoveFlg < 11){
			g.setColor(Graphics.getColorOfName(Graphics.BLACK));
			g.fillRect(0, 0, WIDTH, HEIGHT);
		}
		
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 戦闘後のえっふぇくとを描く
	 */
	public void DrawBatAfterEf(int effNo){
		if(batMoveFlg == 11){
			
			//画面暗転の画像処理
			EffDrawClose(effNo,CLOSING_BAT_NUM);
			
			contEfe++;
			if(contEfe > CLOSING_BAT_NUM){
				contEfe = 0;
				batMoveFlg =12;
				battleOn = 0;
				b = null;
				
				if(eveBatNo > 0){
					//イベントバトル終了処理
					eveBatNo = 0;
					msgWin.EveBatEnd();
				}
			}

		}else if(batMoveFlg >= 12){
			
			//暗転明けの画像処理
			EffDrawOpen(effNo, OPENING_BAT_NUM);
			
			contEfe++;
			if(contEfe > OPENING_BAT_NUM){
				contEfe = 0;
				batMoveFlg =0;
			}
		}
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 暗転する処理
	 */
	private void EffDrawClose(int effNo, int closingNum){
		
		//--------------------------------------------------------
		//右から左に黒幕が閉まる
		if(effNo == 1){
			int x = WIDTH - (WIDTH / closingNum) * contEfe;
			
			g.setColor(Graphics.getColorOfName(Graphics.BLACK));
			g.fillRect(x, 0, (WIDTH / closingNum) * contEfe, HEIGHT);

		//--------------------------------------------------------
		//左右から黒帯が閉まる
		}else if(effNo == 2){
			int x = WIDTH - (WIDTH / closingNum) * contEfe;
			int x2 = (WIDTH / CLOSING_BAT_NUM) * contEfe;

			g.setColor(Graphics.getColorOfName(Graphics.BLACK));
			for(int i = 0; i < 5 ; i++){
				int y = i * 48;
				g.fillRect(x, y, (WIDTH / closingNum) * contEfe, 24);
				g.fillRect(0, y + 24 , x2, 24);
			}
			
		//--------------------------------------------------------
		//白フェード暗転
		}else if(effNo == 50){
			g.setColor(Graphics.getColorOfRGB(255, 255, 255, (255 / closingNum) * contEfe));
			g.fillRect(0, 0, WIDTH, HEIGHT);
			
		//--------------------------------------------------------
		//ローディング画像表示
		}else if(effNo == 99){
			g.drawScaledImage(loading, 0, 0, WIDTH, HEIGHT, 0, 0, 120, 120);
			g.setColor(Graphics.getColorOfRGB(0, 0, 0, 255 - (255 / closingNum) * contEfe));
			g.fillRect(0, 0 , WIDTH, HEIGHT);
				
		//--------------------------------------------------------
		}else{
			g.setColor(Graphics.getColorOfRGB(0, 0, 0, (255 / closingNum) * contEfe));
			g.fillRect(0, 0, WIDTH, HEIGHT);
		}
		//--------------------------------------------------------
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 暗転明けの処理
	 */
	private void EffDrawOpen(int effNo, int closingNum){
		
		//--------------------------------------------------------			
		if(effNo == 1){
			int x = WIDTH - (WIDTH / closingNum) * contEfe;
			
			g.setColor(Graphics.getColorOfName(Graphics.BLACK));
			g.fillRect(0, 0, x, HEIGHT);
			
		//--------------------------------------------------------
		}else if(effNo == 2){
			int x = WIDTH - (WIDTH / closingNum) * contEfe;
			int x2 = (WIDTH / closingNum) * contEfe;
			
			g.setColor(Graphics.getColorOfName(Graphics.BLACK));
			for(int i = 0; i < 5 ; i++){
				int y = i * 48;
				g.fillRect(0, y, x, 24);
				g.fillRect(x2, y + 24, WIDTH - (WIDTH / closingNum), 24);
			}
			
		//--------------------------------------------------------
		}else if(effNo == 50){
			g.setColor(Graphics.getColorOfRGB(255, 255, 255, 255 - (255 / closingNum) * contEfe));
			g.fillRect(0, 0, WIDTH, HEIGHT);
			
		//--------------------------------------------------------
		}else if(effNo == 99){
			int x = (WIDTH / 2 / closingNum) * contEfe;
			g.drawScaledImage(loading, 120 + x, 0, WIDTH / 2, HEIGHT, 0, 0, 120 / 2, 120);
			g.drawScaledImage(loading, -x, 0, WIDTH / 2, HEIGHT, 60, 0, 120 / 2, 120);
			
		//--------------------------------------------------------			
		}else{
			g.setColor(Graphics.getColorOfRGB(0, 0, 0, 255 - (255 / closingNum) * contEfe));
			g.fillRect(0, 0, WIDTH, HEIGHT);
		}
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 数字を描画する
	 * @parm x 一番右端の位置を指定する
	 */
	public static void NumDraw(int x, int y, int num){
		String snum = Integer.toString(num);
		int nLng = snum.length();
		int nx = x - nLng * 6;
		int dnum;
		
		for(int i = 0; i < nLng; i++){
			dnum = Integer.valueOf(snum.substring(i, i + 1)).intValue();
			g.drawImage(Cmn.sysImg, nx, y, dnum * 6, 0, 6, 9);
			nx += 6;
			
		}
		
	}

//-------------------------------------------------------------------------------------------------------
	/**
	 * 数字を色つきで描画する
	 * @parm x 一番右端の位置を指定する
	 */
	public static void NumDrawC(int x, int y, int num, int color){
		String snum = Integer.toString(num);
		int nLng = snum.length();
		int nx = x - nLng * 6;
		int dnum;
		int c = 71 + (color - 1) * 9;
		
		for(int i = 0; i < nLng; i++){
			dnum = Integer.valueOf(snum.substring(i, i + 1)).intValue();
			g.drawImage(Cmn.sysImg, nx, y, dnum * 6, c, 6, 9);
			nx += 6;
			
		}
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 指定したX位置と距離と角度からX座標を求める
	 * 角度0で3時方向、角度は反時計回りで上昇
	 * x位置とは中心点
	 */
	public static int GetPiX(int x, int r, int deg){
		
		double rad = (Math.PI * deg) / 180.0;
		int nx = (int)(r * Math.cos(rad));
		nx += x;
		
		return nx;
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 指定したY位置と距離と角度からY座標を求める
	 * 角度0で3時方向、角度は反時計回りで上昇
	 */
	public static int GetPiY(int y, int r, int deg){
		
		double rad = (Math.PI * deg) / 180.0;
		int ny = (int)(r * Math.sin(rad));
		ny = y - ny;
		
		return ny;
	}
	
//-------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------
	/**
	 * 移動イベント
	 */
	public void MoveEve(int efe, int next, int nx, int ny){
		
		moveEffct =  efe;
		nextMID = next;
		nextX = nx;
		nextY = ny;
		moveFlg = 1;
		enCntMove = 0;
		//次マップの読み込み開始
		Th = new Thread(new MapLoading());
		Th.start();
		
	}
	
//-------------------------------------------------------------------------------------------------------
	public void EncntEve(){
		
		batMoveFlg = 1;
		enCntMove = 0;
		encount++;
		batlingFlg = FLG_NULL;	//戦闘状態を待機状態にセット
		c.setSoftLabel(Canvas.SOFT_KEY_1, "");	//ソフトキーのラベルを消す
		//c.setSoftLabel(Canvas.SOFT_KEY_2, "戦闘終了");	//デバッグ用
		ThBat = new Thread(new BatLoading());
		ThBat.start();
	}
	
//-------------------------------------------------------------------------------------------------------
//=======================================================================================================
//-------------------------------------------------------------------------------------------------------		
//***************内部クラス********************
//-------------------------------------------------------------------------------------------------------		
//=======================================================================================================		
	  	//アニメーションクラス
	  	private class AnimThread extends Thread{
	  		public void run(){
	  			
	  			long beforeTime, timeDiff, sleepTimes;
	  			beforeTime = System.currentTimeMillis();
	  			
	  			while(true){
	  				
	  				g.lock();
	  				
	  				//1フレームごとにインプットカウントを1ずつ減らす
	  				if(inputCnt >0) inputCnt--;	
	  				if(intputMenuCnt >0) intputMenuCnt--;	
	  				
	  				if(titleOn == 1){
	  				//Titleモード時の処理
	  					if(inputCnt == 0){		//いんぷとかうんとが0のときのみキー入力受付
	  						CheckTitleInput();
	  					}
	  					
	  				//Mapモード時の処理--------------------------------------------------
	  				}else if(battleOn == 0){
		  				//キー入力チェック--------------------
		  				if(inputCnt == 0){		//いんぷとかうんとが0のときのみキー入力受付
		  					if(msgWin.isVisble()){
		  						CheckMsgInput();
		  					}else if(menuVisible == 1){
		  						CheckMenuInput();
		  					}else if(shopVisble > 0){
		  						CheckShopInput();
		  					}else{
		  						if(mID >= WORLD_MAP){
		  							CheckWorldInput();
		  						}else{
		  							CheckMoveInput();
		  						}
		  					}
		  				}
		  				
		  				//メッセージ表示中はキャラクタは動かないようにする
		  				//メニュー表示中はキャラクタを動かさないようにする
		  				//お店表示中はキャラクタを動かさないようにする
		  				if(!msgWin.isVisble() && (menuVisible == 0) && shopVisble == 0){
		  					//Heroの移動処理----------------------
		  					//移動（スクロール）中なら移動する
		  					if(hero.GetIsMoving() == 1){
		  						if(hero.Move() == 1){	//移動
		  							//移動完了後の処理
		  							enCntMove++;	//エンカウント後の歩数を増やす
		  							if(enCntMove > ENCOUNT_MOVE + 100) enCntMove = ENCOUNT_MOVE;
		  							
		  							//Map移動イベント、通過イベント
		  							//イベントがあるかをチェック
		  							Event eve = m[useMap].EventCheck(hero.GetX(), hero.GetY());
		  							ObjEvent obj = hero.ObjSerch();
		  							
		  							if(eve instanceof MoveEvent) {		//移動イベントなら
		  								MoveEvent mv = (MoveEvent)eve;
		  								
		  								MoveEve(mv.effect, mv.destMapNo, mv.destX, mv.destY);
		  								/*
		  								moveEffct =  mv.effect;
		  								nextMID = mv.destMapNo;
		  								moveFlg = 1;
		  								enCntMove = 0;
		  								//次マップの読み込み開始
		  								Th = new Thread(new MapLoading());
		  								Th.start();
		  								*/
		  								
	
		  							}else if(obj != null){
	  									//発動条件が通過なら発動
	  									if(obj.actCnd[obj.actPage] == ObjEvent.ACTCND_THROU){
	  										//メッセージをセットする
	  										int check = msgWin.SetMsg(obj.GetMsg(), hero);
	  										//メッセージウインドウを表示
	  										if(check != 0){
	  											msgWin.show();
	  										}
	  				
	  										inputCnt = INPUT_CNT;
	  									}
	  									
		  							}else{
		  								//エンカウント処理
		  								int enc = m[useMap].enCount;
		  								if(encUp > 0){
		  									enc += enc;
		  								}else if(encUp < 0 ){
		  									enc -= enc / 2;
		  									if(encUp <= -100){
		  										enc = 0;
		  										if(enCntMove % 2 == 0){
		  											Battle.ptm[-(encUp + 100)].mp -= 1;
		  										}
		  										if(Battle.ptm[-(encUp + 100)].mp < 1){
		  											//MPがなくなったらエンカウントを元に戻す
		  											encUp = 0;
		  										}
		  									}
		  								}
		  								if((enCntMove > ENCOUNT_MOVE + (encUp * 3)) && (rand.nextInt(100) + 1 < enc)){
		  									
		  									eveBatNo = 0;
		  									EncntEve();
		  									/*
		  									batMoveFlg = 1;
		  									enCntMove = 0;
		  									encount++;
		  									batlingFlg = FLG_NULL;	//戦闘状態を待機状態にセット
		  									c.setSoftLabel(Canvas.SOFT_KEY_1, "");	//ソフトキーのラベルを消す
		  									c.setSoftLabel(Canvas.SOFT_KEY_2, "戻る");	//デバッグ用
		  									ThBat = new Thread(new BatLoading());
			  								ThBat.start();
			  								*/
		  								}
		  							}
		  						}
		  					}
		  					if(moveFlg == 2) MapToMove();	//moveFlgが2ならマップを移動
		  					
		  					//NPCの移動処理-----------------------
		  					//Mapにいるキャラを取得
		  					Vector charas = m[useMap].charas;
		  					for(int i = 0; i < charas.size(); i++){
		  						Chara chara = (Chara)charas.elementAt(i);
		  						//キャラの移動タイプをチェック
		  						if(chara.GetMoveType() == 1){	//移動するタイプなら
		  							if(chara.GetIsMoving() == 1){
		  								chara.Move();
		  							}else if(rand.nextDouble() < Chara.PROB_MOVE){
		  								//移動してない場合は0.02の確率で再移動する
		  								//方向はランダム
		  								chara.SetDirec(rand.nextInt(4));
		  								chara.SetIsMoving(1);
		  							}	
		  						}
		  					}
		  				}
	  					
		  			//戦闘モード時の処理-----------------------------------------------------------
	  				}else{
	  					if(inputCnt == 0){		//いんぷとかうんとが0のときのみキー入力受付
	  						CheckBatInput();
	  					}
	  				
	  				}
		  			//------------------------------------------------------------------
	  				//------------------------------------------------------------------
		  			//描画処理----------------------------------------------------------
		  			//Titleモード時---------------------------------------------
	  				if(titleOn == 1){
	  					Title.Draw(titleFlg, g);
	  					
	  				//Mapモード時-----------------------------------------------
	  				}else if(battleOn == 0){
		  				//オフセットの計算------------------------------------
		  				int offsetX = hero.GetpX() - WIDTH / 2 + (CHA_SIZE / 2);
		  				int offsetY = hero.GetpY() - HEIGHT / 2 + (CHA_SIZE / 2);
		  				
		  				
		  				//Mapの端でスクロール防止
		  				if (offsetX < 0){
		  					offsetX = 0;
		  				}else if(offsetX > m[useMap].Width - WIDTH){
		  					offsetX = m[useMap].Width - WIDTH;				
		  				}
	
		  				if (offsetY < 0){
		  					offsetY = 0;
		  				}else if(offsetY > m[useMap].Height - HEIGHT){
		  					offsetY = m[useMap].Height - HEIGHT;				
		  				}
		  				//-----------------------------------------------------
	  					
		  				//Mapを描画
		  				m[useMap].Draw(g, offsetX, offsetY);
		  				
		  				//メッセージウインドウを描画
		  				msgWin.Draw(g);
		  				
		  				//メニューを表示
		  				MenuShow();
		  				
		  				//お店を描画
		  				if(shopVisble > 0){
		  					if(menuCmnd == SHOP_SEAL_LIST || menuCmnd == SHOP_SEAL_NUM){
		  						ShopDraw(shopVisble, 1, g);
		  					}else{
		  						ShopDraw(shopVisble, 0, g);
		  					}
		  				}
		  				
		  				//全体マップ時に移動ポイントリストを描画（メニュー表示中は消す
		  				if(mID >= WORLD_MAP && menuVisible != 1){
		  					m[useMap].wordPointset.DrawMovePointList(offsetX, offsetY, wordPointSelect, wordPointMode, g);
		  				}
		  				//画面移動エフェクトを描画
		  				DrawEffe(moveEffct);
		  				
		  				
		  				
	  				//戦闘モード時の処理-----------------------------------------------------------
	  				}else{
	  				
	  					//戦闘システム部分処理
	  					if(batlingFlg == FLG_BATL){
	  						Battle.BatSys(g);
	  					}
	  					
	  					//戦闘画面描画
	  					Battle.Draw(batlingFlg, g);
	  					
	  				}
	  					
	  				DrawBatEffe(defBatMvEf);	//戦闘移行時のエフェクト描画
	  				DrawBatAfterEf(defBatFnEf);
	  				
	  				
	  				//カーソル表示のカウント処理--------
	  				cntCur++;
	  				if(cntCur > 30) cntCur = 0;
	  				cntIcon++;
	  				if(cntIcon > 60) cntIcon = 0;
	  				
	  				//ウェイト処理------------------------------------------
	  				timeDiff = System.currentTimeMillis() - beforeTime;
	  				sleepTimes = WAIT_TIME - timeDiff;
	  				
	  				//最低でも2msはとめる
	  				if(sleepTimes <= 0) sleepTimes = 2;
	  				
	  				try{
	  					Thread.sleep(sleepTimes);
	  				}catch(Exception e){}
	  				
	  				beforeTime = System.currentTimeMillis();
	  				
	  				g.unlock(true);
	  				
	  			}
	  		}
	  	}
//-------------------------------------------------------------------------------------------------------		
//-------------------------------------------------------------------------------------------------------		
	  	//Map読み込みクラス
	  	private class MapLoading extends Thread{
	  		public void run(){
	  			
	  			if(systemMove == 0){	//エフェと同時に読み込む場合
	  				NewMap(nextMID, useMap);	//新しいマップを作成
	  			}
	  			
	  			nextMapLoadFinish = 1;
	  			
	  		}
	  	}
	  
//-------------------------------------------------------------------------------------------------------		
//-------------------------------------------------------------------------------------------------------		
  	  	//戦闘読み込みクラス
  	  	private class BatLoading extends Thread{
  	  		public void run(){
  	  			
  	  			b = new Battle(m[useMap].batBG, eveBatNo);
  	  			batLoadFinish = 1;
  	  		}
  	  	}
//-------------------------------------------------------------------------------------------------------	
public interface Common {

//	 方向を表す定数
    public static final int LEFT = 0;
    public static final int RIGHT = 1;
    public static final int UP = 2;
    public static final int DOWN = 3;
    
    // チップセットのサイズ（単位：ピクセル）
    public static final int CHA_SIZE = 24;
    
    public static final int HERO = 48;
    public static final int KING = 1;
    public static final int SOLDIER = 2;

	public static final int TURN_POINT = 8;	//画像ファイルの折り返しポイント
	
}
import com.nttdocomo.ui.*;

public class Damage {

	public int dam;
	public int color;
	public int x;
	public int y;
	public int cnt;
	
	
//-------------------------------------------------------------------------------------------------------		
	public Damage(){
		
		
	}
	
//-------------------------------------------------------------------------------------------------------		
	public void Draw(Graphics g){

		int ny;
		
		String snum = Integer.toString(dam);
		int nLng = snum.length();
		int nx = x + nLng * 5 - 10;
		
		int dnum;
		
		for(int i = 0; i < nLng; i++){
			if(cnt < 4 + (i * 2) && cnt > (i * 2)){
				ny = y - (cnt - (i * 2)) * 3;
				
			}else if(cnt < 8 + (i * 2) && cnt >= 4 + (i * 2)){
				ny = y - 4  * 2 + ((cnt - (i * 2) - 4) * 2);
				
			}else{
				ny = y;
				
			}
			
			dnum = Integer.valueOf(snum.substring(nLng - 1 - i, nLng - i)).intValue();
			g.drawImage(Cmn.sysImg, nx, ny, 128 + dnum * 12, 48 + color * 13, 12, 13);
			nx -= 10;
				
		}
		
		
		
		cnt++;
		
		if(cnt > 28) cnt = 0;
	}
	
//-------------------------------------------------------------------------------------------------------		
	public void DrawTotal(Graphics g){

		int ny = 38;
		int higth = 13;
		int width = 12;
		
		String snum = Integer.toString(dam);
		int nLng = snum.length();
		int nx = x + nLng * 5 - 10;
		
		int dnum;
		
		for(int i = 0; i < nLng; i++){
			if(cnt < 6 + i){
				higth += (higth * (6 - cnt) / 5) * (40 + i * 5) / 100;
				width += (width * (6 - cnt) / 5) * (40 + i * 5) / 100;
				ny -= (higth - 13) / 2;
				nx -= (width - 12) / 2;
			}else{
				higth = 13;
				width = 12;
				ny = 38;
				
			}
			
			dnum = Integer.valueOf(snum.substring(nLng - 1 - i, nLng - i)).intValue();
			g.drawScaledImage(Cmn.sysImg, nx, ny, width, higth, 128 + dnum * 12, 48 + color * 13, 12, 13);
			nx -= 10;
				
		}
		
		
		
		cnt++;
  public class DoorEvent extends Event{
	
	
	public DoorEvent(int x, int y,int chipNo){
		super(x, y, chipNo, 1);
		
	}
	
}

public class Element {

//-------------------------------------------------------------------------------------------------------
	/**
	 * 属性を数字から文字に変換する
	 */
	public static String ElmToString(int elm){
		switch(elm){
		case Battle.ELM_NULL:
			return "無";
			
		case Battle.ELM_FIRE:
			return "火";
	
		case Battle.ELM_WATR:
			return "水";
			
		case Battle.ELM_WIND:
			return "風";
			
		case Battle.ELM_ERTH:
			return "土";
			
		case Battle.ELM_HOLY:
			return "光";
			
		case Battle.ELM_DARK:
			return "闇";
			
		}
		
		return "無";
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 属性の計算を行う
	 * @param atkE 攻撃側属性
	 * @param defE 受け手側属性
	 * @return 攻撃の増減パーセンテージ
	 */
	public static int Elements(int atkE, int defE){
		switch(defE){
		case Battle.ELM_NULL:
			return 100;
			
		case Battle.ELM_FIRE:
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 50;
			case Battle.ELM_WATR: return 150;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 75;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
			
		case Battle.ELM_WATR:
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 75;
			case Battle.ELM_WATR: return 50;
			case Battle.ELM_WIND: return 150;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
			
		case Battle.ELM_WIND:
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 75;
			case Battle.ELM_WIND: return 50;
			case Battle.ELM_ERTH: return 150;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
			
		case Battle.ELM_ERTH:
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 150;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 75;
			case Battle.ELM_ERTH: return 50;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		
		case Battle.ELM_HOLY:
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 90;
			case Battle.ELM_WATR: return 90;
			case Battle.ELM_WIND: return 90;
			case Battle.ELM_ERTH: return 90;
			case Battle.ELM_HOLY: return 30;
			case Battle.ELM_DARK: return 170;
			
			}
			
		case Battle.ELM_DARK:
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 90;
			case Battle.ELM_WATR: return 90;
			case Battle.ELM_WIND: return 90;
			case Battle.ELM_ERTH: return 90;
			case Battle.ELM_HOLY: return 170;
			case Battle.ELM_DARK: return 30;
			
			}
			
		case 21:
			//火耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 50;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 22:
			//火無効、水2倍
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return -1000;
			case Battle.ELM_WATR: return 200;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 23:
			//火耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 75;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 31:
			//水耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 50;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 32:
			//水無効、風2倍
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return -1000;
			case Battle.ELM_WIND: return 200;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 42:
			//風無効、土2倍
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return -1000;
			case Battle.ELM_ERTH: return 200;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 43:
			//風耐性50％
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 50;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 52:
			//土無効、火2倍
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 200;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return -1000;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 53:
			//土耐性50％
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 50;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 61:
			//聖耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 70;
			case Battle.ELM_DARK: return 100;
			
			}
			
		case 62:
			//聖耐性 闇に弱い
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 80;
			case Battle.ELM_DARK: return 120;
			
			}
		case 63:
			//聖耐性70%
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 30;
			case Battle.ELM_DARK: return 100;
			
			}
		case 71:
			//闇耐性30%
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 70;
			
			}
		case 72:
			//闇耐性70%
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 30;
			
			}
		case 73:
			//闇耐性50%
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 50;
			
			}
		case 74:
			//闇耐性10%
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 90;
			
			}
		case 81:
			//4属性耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 80;
			case Battle.ELM_WATR: return 80;
			case Battle.ELM_WIND: return 80;
			case Battle.ELM_ERTH: return 80;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 82:
			//無属性無効、炎無効、水に極端に弱い、その他の属性にも弱い
			switch(atkE){
			case Battle.ELM_NULL: return 0;
			case Battle.ELM_FIRE: return 0;
			case Battle.ELM_WATR: return 250;
			case Battle.ELM_WIND: return 180;
			case Battle.ELM_ERTH: return 180;
			case Battle.ELM_HOLY: return 150;
			case Battle.ELM_DARK: return 150;
			
			}
		case 83:
			//無属性無効、土に極端に弱い
			switch(atkE){
			case Battle.ELM_NULL: return 0;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 250;
			case Battle.ELM_HOLY: return 100;
			case Battle.ELM_DARK: return 100;
			
			}
		case 84:
			//聖、闇耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 90;
			case Battle.ELM_DARK: return 70;
			
			}
		case 85:
			//聖、闇耐性2
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 100;
			case Battle.ELM_WATR: return 100;
			case Battle.ELM_WIND: return 100;
			case Battle.ELM_ERTH: return 100;
			case Battle.ELM_HOLY: return 70;
			case Battle.ELM_DARK: return 90;
			
			}
		case 86:
			//全属性耐性
			switch(atkE){
			case Battle.ELM_NULL: return 100;
			case Battle.ELM_FIRE: return 80;
			case Battle.ELM_WATR: return 80;
			case Battle.ELM_WIND: return 80;
			case Battle.ELM_ERTH: return 80;
			case Battle.ELM_HOLY: return 80;
			case Battle.ELM_DARK: return 80;
			}
		case 87:
			//無属性耐性
			switch(atkE){
			case Battle.ELM_NULL: return 50;
			case Battle.ELM_FIRE: return 150;
			case Battle.ELM_WATR: return 150;
			case Battle.ELM_WIND: return 150;
			case Battle.ELM_ERTH: return 150;
			case Battle.ELM_HOLY: return 150;
			case Battle.ELM_DARK: return 150;
			}
		}
  import com.nttdocomo.ui.*;

public class Enemy {

	//キャラクターのイメージ
	//private MediaImage Mimage;
	public Image image;
	
	public int x = 0;	//キャラの位置
	public int y = 0;
	public int w = 0;	//キャラの横幅
	public int h = 0;//キャラの高さ
	
	public int fly;	//地面からの高さ
	
	public int no;	//キャラクタごとの番号
	public String name;
	public int lv;
	public int hp;
	public int mhp;
	public int mp;
	public int mmp;
	public int str;
	public int agi;
	public int vit;
	public int inte;
	public int luk;
	public int atk;
	public int def;
	public int elm;
	public int atkNum;
	public int img;
	
	public int bStr;	//戦闘中補正ステータス
	public int bAgi;
	public int bVit;
	public int bInt;
	public int bLuk;
	public int bAtk;
	public int bDef;
	public int pDamAtk;	//物理ダメアップ補正
	public int mDamAtk;	//魔法ダメアップ補正
	public int pDamDef;	//物理耐性補正
	public int mDamDef;	//魔法耐性補正
	
	public int[] skill = new int[EnemyList.ENE_SKILL_NUM];
	public int[] skillPac = new int [EnemyList.ENE_SKILL_NUM];	//スキル発動率
	
	public int[] item = new int[EnemyList.ENE_ITEM_NUM];
	public int[] itemPac = new int [EnemyList.ENE_ITEM_NUM];	//スキル発動率
	
	public int exp;
	public int money;
	
	public int tage;
	public int live = 0;	//生存フラグ
	
	public int wep = 0;	//持ってる武器の種類（攻撃エフェクトに使用
	
	public int nameView = 0;	//名前表示
	
	private int curFlg = 0;	//敵選択時の表示カーソルのアニメーションフラグ
	
	public static final int SIZE_S = 32;
	public static final int SIZE_M = 64;
	public static final int SIZE_L = 128;
	public static final int SIZE_LL = 256;
	public static final int GROUND_POS = 160;	//地面の位置
	
//-------------------------------------------------------------------------------------------------------
	public Enemy(){
		
	}
	
//-------------------------------------------------------------------------------------------------------
	public void Draw(Graphics g){
		
		//影の描画
		if(w == SIZE_S){
			g.drawImage(Cmn.sysImg, x, GROUND_POS - 5, 192, 32, 32, 8);
		}else if(w == SIZE_M){
			g.drawImage(Cmn.sysImg, x, GROUND_POS - 9, 128, 32, 64, 16);
		}else if(w == SIZE_L){
			g.drawImage(Cmn.sysImg, x, GROUND_POS - 19, 128, 0, 128, 32);
		}
		
		g.drawImage(image, x, y, 0, 0, w, h);
		
	}

//------------------------------------------------------------------------------------------------------
	/**
	 * 敵の名前を描画
	 */
	public void NameDraw(int batling, Graphics g){
		
		if(batling == Cmn.FLG_CMD_ATK || batling == Cmn.FLG_CMD_ATK_SKILL
				|| batling == Cmn.FLG_CMD_ATK_SKILL_SC || nameView == 1){
			int dx = x + (w - 112) / 2;
			if(dx < 0) dx = 0;
			if(dx + 112 > Cmn.WIDTH) dx = Cmn.WIDTH - 112;
			int fx = dx + (108 - name.length() * Cmn.fntW) / 2;
			Cmn.DrawWin(dx, (GROUND_POS - 4), 112, Cmn.fntH + 2, g);
			Cmn.DrawMessage(fx, (GROUND_POS - 4) + Cmn.fntH - 1, name, 255, 255, 255, g);
			
			if(nameView == 1){
				Cmn.DrawActRect(dx, (GROUND_POS - 4), 112, Cmn.fntH + 2, g);
			}
			
			//矢印の描画
			int dy = GROUND_POS - 64 - 10;
			int cy = 0;
			if(dy > y) dy = y - 5;
			if(dy < 0) dy = 0;
			if(batling != Cmn.FLG_BATL){
				if(curFlg < 15){
					cy = curFlg / 2;
				}else{
					cy = (30 - curFlg) / 2;
				}
			}
				
			g.drawImage(Cmn.sysImg, x + (w / 2) - 8, dy + cy, 224, 32, 15, 11);
			
			curFlg++;
			if(curFlg > 30) curFlg = 0;
			
		}	
	}
	
}
public class EnemyList {

    public int no;
    public String name;
    public int lv;
    public int hp;
    public int mp;
    public int str;
    public int agi;
    public int vit;
    public int inte;
    public int luk;
    public int atk;
    public int def;
    public int elm;
    public int atkNum;
    public int img;

    public static final int ENE_SKILL_NUM = 4;  //敵の持っているスキルの数
    public static final int ENE_ITEM_NUM = 4;  //敵の持っているアイテムの数

    public int[] skill = new int[ENE_SKILL_NUM];
    public int[] skillPac = new int [ENE_SKILL_NUM];    //スキル発動率

    public int[] item = new int[ENE_ITEM_NUM];
    public int[] itemPac = new int [ENE_ITEM_NUM];    //アイテムドロップ率

    public int exp;
    public int money;
    public int size;
    public int fly;

    public int wep = 0;    //持ってる武器の種類（攻撃エフェクトに使用

    public int[] mapEneList = new int[16];
    public int mapEneNum;   //そのマップに登録されている敵の数

    public int minEne;      //敵の最小数
    public int maxEne;      //1度の戦闘に出てくる敵の最大数（Mapごとの

//-------------------------------------------------------------------------------------------------------
    public void EneList(int nno){

        switch(nno){
        case 0:
            no = nno;
            name = "ぷに";
            lv = 1;
            hp = 10;
            mp = 2;
            atk = 6;
            def = 1;
            str = 6;
            agi = 3;
            vit = 2;
            inte = 1;
            luk = 1;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 2;
            money = 2;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 0;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 10;
            item[1]= 263;
            itemPac[1]= 6;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 1:
            no = nno;
            name = "まるまる";
            lv = 2;
            hp = 14;
            mp = 3;
            atk = 7;
            def = 3;
            str = 6;
            agi = 4;
            vit = 3;
            inte = 2;
            luk = 1;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 3;
            money = 4;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 1;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 2:
            no = nno;
            name = "鋭い鳥";
            lv = 3;
            hp = 19;
            mp = 6;
            atk = 9;
            def = 4;
            str = 9;
            agi = 18;
            vit = 2;
            inte = 2;
            luk = 4;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 5;
            money = 5;
            size = Enemy.SIZE_S;
            fly = 40;
            wep = 15;
            img = 2;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 3:
            no = nno;
            name = "テケテケ";
            lv = 10;
            hp = 90;
            mp = 60;
            atk = 17;
            def = 6;
            str = 16;
            agi = 24;
            vit = 10;
            inte = 25;
            luk = 12;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 100;
            money = 210;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 13;
            img = 3;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 4:
            no = nno;
            name = "突撃大鳥";
            lv = 6;
            hp = 28;
            mp = 12;
            atk = 16;
            def = 6;
            str = 11;
            agi = 17;
            vit = 5;
            inte = 6;
            luk = 5;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 8;
            money = 9;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 4;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 12;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 5:
            no = nno;
            name = "火の恨み";
            lv = 7;
            hp = 32;
            mp = 30;
            atk = 20;
            def = 10;
            str = 12;
            agi = 20;
            vit = 10;
            inte = 20;
            luk = 15;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 10;
            money = 11;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 5;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 6:
            no = nno;
            name = "ナー";
            lv = 15;
            hp = 180;
            mp = 120;
            atk = 29;
            def = 14;
            str = 22;
            agi = 30;
            vit = 21;
            inte = 3;
            luk = 22;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 330;
            money = 400;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 6;
            skill[0]= 101;
            skillPac[0]= 6;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 7:
            no = nno;
            name = "水の揺らめき";
            lv = 9;
            hp = 36;
            mp = 22;
            atk = 29;
            def = 9;
            str = 20;
            agi = 28;
            vit = 10;
            inte = 48;
            luk = 30;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 14;
            money = 20;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 7;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 64;
            itemPac[0]= 3;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 8:
            no = nno;
            name = "井戸の影";
            lv = 10;
            hp = 43;
            mp = 50;
            atk = 32;
            def = 12;
            str = 28;
            agi = 34;
            vit = 20;
            inte = 40;
            luk = 12;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 16;
            money = 17;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 8;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 5;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 9:
            no = nno;
            name = "子ねずみ";
            lv = 7;
            hp = 33;
            mp = 10;
            atk = 26;
            def = 7;
            str = 18;
            agi = 45;
            vit = 12;
            inte = 10;
            luk = 55;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 13;
            money = 9;
            size = Enemy.SIZE_S;
            fly = 0;
            wep = 11;
            img = 9;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 10:
            no = nno;
            name = "へどろの玉";
            lv = 11;
            hp = 52;
            mp = 10;
            atk = 38;
            def = 11;
            str = 30;
            agi = 12;
            vit = 30;
            inte = 12;
            luk = 15;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 17;
            money = 12;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 10;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 11:
            no = nno;
            name = "青色";
            lv = 20;
            hp = 280;
            mp = 160;
            atk = 53;
            def = 20;
            str = 55;
            agi = 40;
            vit = 22;
            inte = 30;
            luk = 28;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 730;
            money = 450;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 11;
            skill[0]= 911;
            skillPac[0]= 40;
            skill[1]= 404;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 12:
            no = nno;
            name = "森の光";
            lv = 10;
            hp = 38;
            mp = 30;
            atk = 36;
            def = 19;
            str = 45;
            agi = 48;
            vit = 20;
            inte = 43;
            luk = 33;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 20;
            money = 15;
            size = Enemy.SIZE_S;
            fly = 40;
            wep = 11;
            img = 12;
            skill[0]= 403;
            skillPac[0]= 10;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 13:
            no = nno;
            name = "くたびれた切株";
            lv = 13;
            hp = 58;
            mp = 10;
            atk = 38;
            def = 23;
            str = 48;
            agi = 31;
            vit = 33;
            inte = 36;
            luk = 18;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 24;
            money = 17;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 13;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 14:
            no = nno;
            name = "おばけうさぎ";
            lv = 14;
            hp = 67;
            mp = 20;
            atk = 41;
            def = 15;
            str = 50;
            agi = 60;
            vit = 16;
            inte = 32;
            luk = 20;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 29;
            money = 19;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 14;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 15;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 15:
            no = nno;
            name = "石の塊";
            lv = 24;
            hp = 450;
            mp = 60;
            atk = 65;
            def = 45;
            str = 78;
            agi = 42;
            vit = 80;
            inte = 14;
            luk = 33;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 1250;
            money = 600;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 15;
            skill[0]= 132;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 16:
            no = nno;
            name = "つちへび";
            lv = 16;
            hp = 78;
            mp = 30;
            atk = 50;
            def = 28;
            str = 70;
            agi = 40;
            vit = 29;
            inte = 38;
            luk = 22;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 29;
            money = 28;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 16;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 17:
            no = nno;
            name = "岩石バード";
            lv = 14;
            hp = 40;
            mp = 10;
            atk = 53;
            def = 50;
            str = 66;
            agi = 60;
            vit = 78;
            inte = 20;
            luk = 9;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 27;
            money = 26;
            size = Enemy.SIZE_S;
            fly = 20;
            wep = 11;
            img = 17;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 18:
            no = nno;
            name = "土の憎しみ";
            lv = 15;
            hp = 70;
            mp = 60;
            atk = 47;
            def = 22;
            str = 63;
            agi = 36;
            vit = 25;
            inte = 48;
            luk = 32;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 32;
            money = 30;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 18;
            skill[0]= 131;
            skillPac[0]= 20;
            skill[1]= 901;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 457;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 19:
            no = nno;
            name = "小さな力持ち";
            lv = 17;
            hp = 80;
            mp = 10;
            atk = 58;
            def = 16;
            str = 82;
            agi = 24;
            vit = 23;
            inte = 16;
            luk = 18;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 34;
            money = 29;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 19;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 10;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 20:
            no = nno;
            name = "エレクトリカ";
            lv = 17;
            hp = 76;
            mp = 45;
            atk = 60;
            def = 30;
            str = 72;
            agi = 48;
            vit = 27;
            inte = 48;
            luk = 33;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 36;
            money = 34;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 20;
            skill[0]= 403;
            skillPac[0]= 20;
            skill[1]= 423;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 21:
            no = nno;
            name = "突貫鳥";
            lv = 16;
            hp = 70;
            mp = 10;
            atk = 64;
            def = 22;
            str = 80;
            agi = 72;
            vit = 20;
            inte = 22;
            luk = 34;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 38;
            money = 26;
            size = Enemy.SIZE_M;
            fly = 30;
            wep = 15;
            img = 21;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 20;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 22:
            no = nno;
            name = "切り裂き狐";
            lv = 19;
            hp = 89;
            mp = 10;
            atk = 67;
            def = 26;
            str = 86;
            agi = 54;
            vit = 22;
            inte = 34;
            luk = 18;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 41;
            money = 31;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 22;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 23:
            no = nno;
            name = "風切る光";
            lv = 18;
            hp = 62;
            mp = 120;
            atk = 67;
            def = 36;
            str = 65;
            agi = 67;
            vit = 18;
            inte = 82;
            luk = 68;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 35;
            money = 40;
            size = Enemy.SIZE_S;
            fly = 30;
            wep = 11;
            img = 23;
            skill[0]= 904;
            skillPac[0]= 25;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 5;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 24:
            no = nno;
            name = "渦巻く風";
            lv = 30;
            hp = 760;
            mp = 240;
            atk = 88;
            def = 38;
            str = 95;
            agi = 76;
            vit = 32;
            inte = 80;
            luk = 56;
            elm = Battle.ELM_WIND;
            atkNum = 2;
            exp = 2200;
            money = 1500;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 24;
            skill[0]= 902;
            skillPac[0]= 10;
            skill[1]= 903;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 25:
            no = nno;
            name = "片手魔人";
            lv = 20;
            hp = 78;
            mp = 10;
            atk = 68;
            def = 45;
            str = 90;
            agi = 58;
            vit = 38;
            inte = 56;
            luk = 48;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 42;
            money = 46;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 25;
            skill[0]= 901;
            skillPac[0]= 10;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 26:
            no = nno;
            name = "魔道の影";
            lv = 21;
            hp = 60;
            mp = 160;
            atk = 64;
            def = 36;
            str = 76;
            agi = 64;
            vit = 25;
            inte = 40;
            luk = 90;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 47;
            money = 43;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 26;
            skill[0]= 106;
            skillPac[0]= 20;
            skill[1]= 111;
            skillPac[1]= 20;
            skill[2]= 121;
            skillPac[2]= 20;
            skill[3]= 136;
            skillPac[3]= 20;
            item[0]= 113;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 27:
            no = nno;
            name = "亡霊剣士";
            lv = 22;
            hp = 96;
            mp = 35;
            atk = 73;
            def = 40;
            str = 98;
            agi = 60;
            vit = 32;
            inte = 25;
            luk = 10;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 46;
            money = 48;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 27;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 28:
            no = nno;
            name = "炎の鎧";
            lv = 24;
            hp = 102;
            mp = 25;
            atk = 77;
            def = 50;
            str = 103;
            agi = 43;
            vit = 40;
            inte = 38;
            luk = 32;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 49;
            money = 49;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 28;
            skill[0]= 101;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 29:
            no = nno;
            name = "黒い影";
            lv = 20;
            hp = 68;
            mp = 99;
            atk = 65;
            def = 34;
            str = 79;
            agi = 68;
            vit = 30;
            inte = 60;
            luk = 55;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 40;
            money = 37;
            size = Enemy.SIZE_S;
            fly = 20;
            wep = 11;
            img = 29;
            skill[0]= 905;
            skillPac[0]= 30;
            skill[1]= 421;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 30:
            no = nno;
            name = "闇の門番";
            lv = 36;
            hp = 1100;
            mp = 300;
            atk = 118;
            def = 67;
            str = 144;
            agi = 106;
            vit = 56;
            inte = 70;
            luk = 65;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 4200;
            money = 3000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 30;
            skill[0]= 905;
            skillPac[0]= 30;
            skill[1]= 906;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 31:
            no = nno;
            name = "ビッグアイ";
            lv = 24;
            hp = 98;
            mp = 45;
            atk = 85;
            def = 56;
            str = 101;
            agi = 68;
            vit = 48;
            inte = 77;
            luk = 52;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 52;
            money = 51;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 31;
            skill[0]= 423;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 32:
            no = nno;
            name = "植物の人";
            lv = 25;
            hp = 110;
            mp = 56;
            atk = 80;
            def = 66;
            str = 90;
            agi = 63;
            vit = 55;
            inte = 80;
            luk = 100;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 56;
            money = 50;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 32;
            skill[0]= 131;
            skillPac[0]= 30;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 12;
            itemPac[0]= 5;
            item[1]= 13;
            itemPac[1]= 10;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 33:
            no = nno;
            name = "呪いの鎧";
            lv = 25;
            hp = 88;
            mp = 10;
            atk = 76;
            def = 96;
            str = 92;
            agi = 45;
            vit = 88;
            inte = 56;
            luk = 25;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 60;
            money = 37;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 33;
            skill[0]= 402;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 310;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 34:
            no = nno;
            name = "フライングソード";
            lv = 26;
            hp = 102;
            mp = 10;
            atk = 95;
            def = 47;
            str = 112;
            agi = 80;
            vit = 36;
            inte = 48;
            luk = 33;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 61;
            money = 55;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 34;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 35:
            no = nno;
            name = "子赤竜";
            lv = 28;
            hp = 155;
            mp = 100;
            atk = 113;
            def = 74;
            str = 122;
            agi = 72;
            vit = 60;
            inte = 80;
            luk = 88;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 135;
            money = 108;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 35;
            skill[0]= 907;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 40;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 36:
            no = nno;
            name = "子青竜";
            lv = 28;
            hp = 136;
            mp = 150;
            atk = 99;
            def = 68;
            str = 100;
            agi = 68;
            vit = 57;
            inte = 100;
            luk = 60;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 133;
            money = 110;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 36;
            skill[0]= 909;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 40;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 37:
            no = nno;
            name = "子緑竜";
            lv = 28;
            hp = 166;
            mp = 60;
            atk = 103;
            def = 100;
            str = 108;
            agi = 45;
            vit = 90;
            inte = 50;
            luk = 20;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 137;
            money = 101;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 37;
            skill[0]= 910;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 40;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 38:
            no = nno;
            name = "赤竜";
            lv = 42;
            hp = 2000;
            mp = 500;
            atk = 130;
            def = 80;
            str = 130;
            agi = 102;
            vit = 80;
            inte = 110;
            luk = 89;
            elm = Battle.ELM_FIRE;
            atkNum = 2;
            exp = 7000;
            money = 5000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 38;
            skill[0]= 907;
            skillPac[0]= 20;
            skill[1]= 908;
            skillPac[1]= 10;
            skill[2]= 101;
            skillPac[2]= 20;
            skill[3]= 102;
            skillPac[3]= 10;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 39:
            no = nno;
            name = "ウィスプ";
            lv = 25;
            hp = 116;
            mp = 100;
            atk = 108;
            def = 78;
            str = 110;
            agi = 84;
            vit = 78;
            inte = 110;
            luk = 106;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 114;
            money = 136;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 39;
            skill[0]= 161;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 40:
            no = nno;
            name = "アンゲロイ";
            lv = 27;
            hp = 134;
            mp = 230;
            atk = 98;
            def = 88;
            str = 103;
            agi = 72;
            vit = 85;
            inte = 138;
            luk = 176;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 130;
            money = 148;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 40;
            skill[0]= 161;
            skillPac[0]= 25;
            skill[1]= 111;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 405;
            itemPac[0]= 1;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 41:
            no = nno;
            name = "光の精";
            lv = 26;
            hp = 128;
            mp = 120;
            atk = 112;
            def = 82;
            str = 114;
            agi = 90;
            vit = 80;
            inte = 90;
            luk = 122;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 125;
            money = 151;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 41;
            skill[0]= 161;
            skillPac[0]= 40;
            skill[1]= 424;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 42:
            no = nno;
            name = "ホーリーバード";
            lv = 28;
            hp = 150;
            mp = 60;
            atk = 120;
            def = 74;
            str = 121;
            agi = 116;
            vit = 67;
            inte = 70;
            luk = 101;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 141;
            money = 137;
            size = Enemy.SIZE_M;
            fly = 30;
            wep = 11;
            img = 42;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 43:
            no = nno;
            name = "姫";
            lv = 46;
            hp = 2900;
            mp = 500;
            atk = 150;
            def = 100;
            str = 140;
            agi = 96;
            vit = 96;
            inte = 140;
            luk = 180;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 9800;
            money = 7200;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 13;
            img = 43;
            skill[0]= 161;
            skillPac[0]= 20;
            skill[1]= 162;
            skillPac[1]= 10;
            skill[2]= 166;
            skillPac[2]= 15;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 44:
            no = nno;
            name = "監視者";
            lv = 31;
            hp = 160;
            mp = 200;
            atk = 116;
            def = 120;
            str = 133;
            agi = 81;
            vit = 110;
            inte = 87;
            luk = 220;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 153;
            money = 122;
            size = Enemy.SIZE_S;
            fly = 40;
            wep = 11;
            img = 44;
            skill[0]= 166;
            skillPac[0]= 30;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 5;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 45:
            no = nno;
            name = "超強い姫";
            lv = 80;
            hp = 16000;
            mp = 999;
            atk = 520;
            def = 300;
            str = 500;
            agi = 300;
            vit = 250;
            inte = 450;
            luk = 300;
            elm = Battle.ELM_NULL;
            atkNum = 3;
            exp = 12000;
            money = 35;
            size = Enemy.SIZE_L;
            fly = 10;
            wep = 13;
            img = 44;
            skill[0]= 166;
            skillPac[0]= 10;
            skill[1]= 161;
            skillPac[1]= 10;
            skill[2]= 107;
            skillPac[2]= 5;
            skill[3]= 167;
            skillPac[3]= 5;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 46:
            no = nno;
            name = "山岳ハヤブサ";
            lv = 29;
            hp = 148;
            mp = 30;
            atk = 128;
            def = 80;
            str = 128;
            agi = 147;
            vit = 66;
            inte = 94;
            luk = 78;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 165;
            money = 130;
            size = Enemy.SIZE_M;
            fly = 30;
            wep = 11;
            img = 45;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 10;
            item[1]= 3;
            itemPac[1]= 6;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 47:
            no = nno;
            name = "巨大蛾";
            lv = 30;
            hp = 166;
            mp = 100;
            atk = 117;
            def = 101;
            str = 118;
            agi = 116;
            vit = 92;
            inte = 106;
            luk = 99;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 170;
            money = 118;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 46;
            skill[0]= 126;
            skillPac[0]= 20;
            skill[1]= 421;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 5;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 48:
            no = nno;
            name = "お化けなめくじ";
            lv = 31;
            hp = 200;
            mp = 30;
            atk = 140;
            def = 65;
            str = 140;
            agi = 60;
            vit = 55;
            inte = 300;
            luk = 32;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 176;
            money = 106;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 47;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 49:
            no = nno;
            name = "テナガ";
            lv = 32;
            hp = 174;
            mp = 66;
            atk = 138;
            def = 114;
            str = 117;
            agi = 127;
            vit = 99;
            inte = 100;
            luk = 100;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 182;
            money = 122;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 48;
            skill[0]= 901;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 50:
            no = nno;
            name = "ルヒエル";
            lv = 50;
            hp = 3600;
            mp = 800;
            atk = 155;
            def = 110;
            str = 150;
            agi = 160;
            vit = 120;
            inte = 188;
            luk = 160;
            elm = Battle.ELM_WIND;
            atkNum = 2;
            exp = 12800;
            money = 8000;
            size = Enemy.SIZE_M;
            fly = 30;
            wep = 11;
            img = 49;
            skill[0]= 251;
            skillPac[0]= 10;
            skill[1]= 126;
            skillPac[1]= 20;
            skill[2]= 122;
            skillPac[2]= 8;
            skill[3]= 912;
            skillPac[3]= 8;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 51:
            no = nno;
            name = "ソフィエル";
            lv = 51;
            hp = 2100;
            mp = 999;
            atk = 150;
            def = 106;
            str = 121;
            agi = 120;
            vit = 111;
            inte = 200;
            luk = 228;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 10670;
            money = 7800;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 10;
            img = 51;
            skill[0]= 913;
            skillPac[0]= 15;
            skill[1]= 912;
            skillPac[1]= 6;
            skill[2]= 132;
            skillPac[2]= 10;
            skill[3]= 136;
            skillPac[3]= 20;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 52:
            no = nno;
            name = "タブリス";
            lv = 52;
            hp = 2900;
            mp = 360;
            atk = 190;
            def = 130;
            str = 160;
            agi = 148;
            vit = 136;
            inte = 100;
            luk = 143;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 11300;
            money = 8400;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 50;
            skill[0]= 914;
            skillPac[0]= 10;
            skill[1]= 912;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 53:
            no = nno;
            name = "怪物猫";
            lv = 33;
            hp = 160;
            mp = 30;
            atk = 152;
            def = 94;
            str = 145;
            agi = 129;
            vit = 88;
            inte = 94;
            luk = 99;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 224;
            money = 132;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 52;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 54:
            no = nno;
            name = "アルヒアンゲロイ";
            lv = 34;
            hp = 188;
            mp = 35;
            atk = 165;
            def = 120;
            str = 150;
            agi = 126;
            vit = 96;
            inte = 70;
            luk = 108;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 256;
            money = 155;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 53;
            skill[0]= 161;
            skillPac[0]= 10;
            skill[1]= 166;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 405;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 55:
            no = nno;
            name = "パワーヒューマン";
            lv = 36;
            hp = 232;
            mp = 38;
            atk = 174;
            def = 86;
            str = 165;
            agi = 80;
            vit = 66;
            inte = 45;
            luk = 68;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 263;
            money = 118;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 54;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 20;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 56:
            no = nno;
            name = "ゼルエル";
            lv = 54;
            hp = 4500;
            mp = 400;
            atk = 243;
            def = 155;
            str = 200;
            agi = 150;
            vit = 140;
            inte = 75;
            luk = 55;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 24350;
            money = 14000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 55;
            skill[0]= 912;
            skillPac[0]= 6;
            skill[1]= 301;
            skillPac[1]= 30;
            skill[2]= 302;
            skillPac[2]= 15;
            skill[3]= 303;
            skillPac[3]= 20;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 57:
            no = nno;
            name = "アラームベル";
            lv = 33;
            hp = 164;
            mp = 160;
            atk = 154;
            def = 146;
            str = 142;
            agi = 140;
            vit = 90;
            inte = 118;
            luk = 108;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 271;
            money = 122;
            size = Enemy.SIZE_S;
            fly = 30;
            wep = 11;
            img = 56;
            skill[0]= 161;
            skillPac[0]= 35;
            skill[1]= 403;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 50;
            itemPac[0]= 7;
            item[1]= 51;
            itemPac[1]= 7;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 58:
            no = nno;
            name = "アルケー";
            lv = 36;
            hp = 165;
            mp = 260;
            atk = 148;
            def = 114;
            str = 132;
            agi = 122;
            vit = 74;
            inte = 248;
            luk = 220;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 288;
            money = 133;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 57;
            skill[0]= 161;
            skillPac[0]= 50;
            skill[1]= 166;
            skillPac[1]= 30;
            skill[2]= 101;
            skillPac[2]= 5;
            skill[3]= 131;
            skillPac[3]= 5;
            item[0]= 405;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 59:
            no = nno;
            name = "ザドキエル";
            lv = 54;
            hp = 4200;
            mp = 999;
            atk = 190;
            def = 132;
            str = 155;
            agi = 145;
            vit = 118;
            inte = 300;
            luk = 155;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 24400;
            money = 12800;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 58;
            skill[0]= 912;
            skillPac[0]= 10;
            skill[1]= 166;
            skillPac[1]= 30;
            skill[2]= 122;
            skillPac[2]= 30;
            skill[3]= 132;
            skillPac[3]= 30;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 60:
            no = nno;
            name = "エクスシア";
            lv = 38;
            hp = 211;
            mp = 110;
            atk = 164;
            def = 138;
            str = 153;
            agi = 171;
            vit = 104;
            inte = 126;
            luk = 140;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 302;
            money = 167;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 59;
            skill[0]= 401;
            skillPac[0]= 10;
            skill[1]= 422;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 458;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 61:
            no = nno;
            name = "光る影";
            lv = 39;
            hp = 190;
            mp = 240;
            atk = 153;
            def = 112;
            str = 145;
            agi = 138;
            vit = 94;
            inte = 160;
            luk = 117;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 314;
            money = 154;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 60;
            skill[0]= 166;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 52;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 62:
            no = nno;
            name = "ファヌエル";
            lv = 56;
            hp = 5300;
            mp = 360;
            atk = 158;
            def = 76;
            str = 125;
            agi = 120;
            vit = 68;
            inte = 120;
            luk = 122;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 30276;
            money = 15200;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 61;
            skill[0]= 919;
            skillPac[0]= 18;
            skill[1]= 912;
            skillPac[1]= 10;
            skill[2]= 303;
            skillPac[2]= 15;
            skill[3]= 162;
            skillPac[3]= 15;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 63:
            no = nno;
            name = "デュナメイス";
            lv = 38;
            hp = 194;
            mp = 180;
            atk = 155;
            def = 165;
            str = 140;
            agi = 122;
            vit = 155;
            inte = 188;
            luk = 102;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 337;
            money = 148;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 62;
            skill[0]= 161;
            skillPac[0]= 30;
            skill[1]= 166;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 458;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 64:
            no = nno;
            name = "コカビエル";
            lv = 56;
            hp = 4800;
            mp = 999;
            atk = 175;
            def = 136;
            str = 142;
            agi = 210;
            vit = 117;
            inte = 140;
            luk = 133;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 31024;
            money = 14800;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 63;
            skill[0]= 920;
            skillPac[0]= 20;
            skill[1]= 912;
            skillPac[1]= 20;
            skill[2]= 122;
            skillPac[2]= 30;
            skill[3]= 132;
            skillPac[3]= 30;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 65:
            no = nno;
            name = "守護者";
            lv = 39;
            hp = 233;
            mp = 108;
            atk = 178;
            def = 128;
            str = 160;
            agi = 144;
            vit = 120;
            inte = 138;
            luk = 122;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 479;
            money = 186;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 64;
            skill[0]= 101;
            skillPac[0]= 20;
            skill[1]= 106;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 264;
            itemPac[0]= 2;
            item[1]= 2;
            itemPac[1]= 6;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 66:
            no = nno;
            name = "古代の石版";
            lv = 40;
            hp = 208;
            mp = 216;
            atk = 185;
            def = 187;
            str = 170;
            agi = 118;
            vit = 156;
            inte = 122;
            luk = 88;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 493;
            money = 177;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 65;
            skill[0]= 131;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 6;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 67:
            no = nno;
            name = "囚われの死者";
            lv = 41;
            hp = 287;
            mp = 10;
            atk = 201;
            def = 91;
            str = 200;
            agi = 77;
            vit = 70;
            inte = 68;
            luk = 55;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 511;
            money = 146;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 66;
            skill[0]= 906;
            skillPac[0]= 10;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 4;
            itemPac[0]= 4;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 68:
            no = nno;
            name = "炎を纏いし守護者";
            lv = 60;
            hp = 4300;
            mp = 999;
            atk = 212;
            def = 999;
            str = 201;
            agi = 155;
            vit = 164;
            inte = 163;
            luk = 112;
            elm = 82;
            atkNum = 2;
            exp = 38200;
            money = 16000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 67;
            skill[0]= 921;
            skillPac[0]= 20;
            skill[1]= 922;
            skillPac[1]= 15;
            skill[2]= 108;
            skillPac[2]= 10;
            skill[3]= 301;
            skillPac[3]= 25;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 69:
            no = nno;
            name = "おうさま";
            lv = 64;
            hp = 5500;
            mp = 999;
            atk = 230;
            def = 160;
            str = 228;
            agi = 160;
            vit = 122;
            inte = 134;
            luk = 155;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 61300;
            money = 18000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 68;
            skill[0]= 912;
            skillPac[0]= 20;
            skill[1]= 915;
            skillPac[1]= 8;
            skill[2]= 923;
            skillPac[2]= 14;
            skill[3]= 301;
            skillPac[3]= 20;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 70:
            no = nno;
            name = "徘徊者";
            lv = 41;
            hp = 246;
            mp = 122;
            atk = 195;
            def = 138;
            str = 186;
            agi = 132;
            vit = 130;
            inte = 155;
            luk = 137;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 523;
            money = 152;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 69;
            skill[0]= 101;
            skillPac[0]= 15;
            skill[1]= 102;
            skillPac[1]= 7;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 71:
            no = nno;
            name = "水の記憶";
            lv = 42;
            hp = 256;
            mp = 512;
            atk = 187;
            def = 128;
            str = 192;
            agi = 128;
            vit = 128;
            inte = 256;
            luk = 256;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 574;
            money = 128;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 70;
            skill[0]= 5;
            skillPac[0]= 50;
            skill[1]= 112;
            skillPac[1]= 10;
            skill[2]= 116;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 30;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 72:
            no = nno;
            name = "火炎猿";
            lv = 44;
            hp = 301;
            mp = 80;
            atk = 210;
            def = 134;
            str = 207;
            agi = 154;
            vit = 122;
            inte = 201;
            luk = 142;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 841;
            money = 188;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 71;
            skill[0]= 101;
            skillPac[0]= 40;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 73:
            no = nno;
            name = "赤いリス";
            lv = 43;
            hp = 288;
            mp = 30;
            atk = 222;
            def = 118;
            str = 211;
            agi = 199;
            vit = 106;
            inte = 188;
            luk = 172;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 807;
            money = 201;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 72;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 119;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 74:
            no = nno;
            name = "燃え上がる岩石";
            lv = 45;
            hp = 266;
            mp = 120;
            atk = 197;
            def = 235;
            str = 193;
            agi = 134;
            vit = 220;
            inte = 168;
            luk = 102;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 912;
            money = 176;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 73;
            skill[0]= 101;
            skillPac[0]= 50;
            skill[1]= 106;
            skillPac[1]= 30;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 75:
            no = nno;
            name = "燃える巨人";
            lv = 47;
            hp = 637;
            mp = 155;
            atk = 248;
            def = 162;
            str = 230;
            agi = 128;
            vit = 145;
            inte = 176;
            luk = 94;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 2016;
            money = 330;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 74;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 76:
            no = nno;
            name = "赤い光";
            lv = 65;
            hp = 5800;
            mp = 999;
            atk = 256;
            def = 188;
            str = 236;
            agi = 172;
            vit = 160;
            inte = 165;
            luk = 102;
            elm = Battle.ELM_FIRE;
            atkNum = 2;
            exp = 65536;
            money = 18800;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 75;
            skill[0]= 924;
            skillPac[0]= 25;
            skill[1]= 108;
            skillPac[1]= 10;
            skill[2]= 107;
            skillPac[2]= 15;
            skill[3]= 102;
            skillPac[3]= 20;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 77:
            no = nno;
            name = "レラツ";
            lv = 50;
            hp = 1600;
            mp = 150;
            atk = 280;
            def = 148;
            str = 258;
            agi = 117;
            vit = 155;
            inte = 148;
            luk = 97;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 8600;
            money = 5000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 77;
            skill[0]= 925;
            skillPac[0]= 10;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 78:
            no = nno;
            name = "ニサエ";
            lv = 66;
            hp = 6000;
            mp = 250;
            atk = 300;
            def = 176;
            str = 264;
            agi = 178;
            vit = 168;
            inte = 162;
            luk = 155;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 81500;
            money = 15000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 76;
            skill[0]= 925;
            skillPac[0]= 30;
            skill[1]= 926;
            skillPac[1]= 30;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 313;
            itemPac[0]= 100;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 79:
            no = nno;
            name = "ナンソ";
            lv = 50;
            hp = 1400;
            mp = 150;
            atk = 225;
            def = 130;
            str = 200;
            agi = 233;
            vit = 132;
            inte = 155;
            luk = 188;
            elm = Battle.ELM_ERTH;
            atkNum = 3;
            exp = 9700;
            money = 5000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 77;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 80:
            no = nno;
            name = "跳びフィッシュ";
            lv = 44;
            hp = 316;
            mp = 30;
            atk = 232;
            def = 148;
            str = 180;
            agi = 191;
            vit = 135;
            inte = 167;
            luk = 122;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 1086;
            money = 218;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 78;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 81:
            no = nno;
            name = "カニー";
            lv = 45;
            hp = 288;
            mp = 100;
            atk = 248;
            def = 226;
            str = 201;
            agi = 128;
            vit = 200;
            inte = 146;
            luk = 88;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 1157;
            money = 201;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 79;
            skill[0]= 402;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 120;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 82:
            no = nno;
            name = "水のドヨメキ";
            lv = 46;
            hp = 338;
            mp = 600;
            atk = 224;
            def = 116;
            str = 177;
            agi = 154;
            vit = 106;
            inte = 228;
            luk = 45;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 1181;
            money = 235;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 80;
            skill[0]= 116;
            skillPac[0]= 15;
            skill[1]= 111;
            skillPac[1]= 20;
            skill[2]= 112;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 83:
            no = nno;
            name = "水滴ゴースト";
            lv = 43;
            hp = 245;
            mp = 200;
            atk = 217;
            def = 136;
            str = 165;
            agi = 166;
            vit = 112;
            inte = 210;
            luk = 360;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 985;
            money = 182;
            size = Enemy.SIZE_S;
            fly = 20;
            wep = 11;
            img = 81;
            skill[0]= 111;
            skillPac[0]= 30;
            skill[1]= 116;
            skillPac[1]= 5;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 84:
            no = nno;
            name = "水神様";
            lv = 66;
            hp = 6000;
            mp = 999;
            atk = 264;
            def = 190;
            str = 225;
            agi = 194;
            vit = 176;
            inte = 167;
            luk = 155;
            elm = Battle.ELM_WATR;
            atkNum = 2;
            exp = 118000;
            money = 22300;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 82;
            skill[0]= 925;
            skillPac[0]= 25;
            skill[1]= 113;
            skillPac[1]= 15;
            skill[2]= 117;
            skillPac[2]= 25;
            skill[3]= 118;
            skillPac[3]= 10;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 85:
            no = nno;
            name = "眩い光";
            lv = 48;
            hp = 333;
            mp = 333;
            atk = 252;
            def = 128;
            str = 210;
            agi = 158;
            vit = 107;
            inte = 220;
            luk = 550;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 1276;
            money = 241;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 83;
            skill[0]= 161;
            skillPac[0]= 15;
            skill[1]= 162;
            skillPac[1]= 10;
            skill[2]= 166;
            skillPac[2]= 8;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 123;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 86:
            no = nno;
            name = "光の戦士";
            lv = 49;
            hp = 350;
            mp = 100;
            atk = 270;
            def = 150;
            str = 250;
            agi = 190;
            vit = 120;
            inte = 130;
            luk = 200;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 1312;
            money = 236;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 84;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 87:
            no = nno;
            name = "白の封印";
            lv = 70;
            hp = 6700;
            mp = 999;
            atk = 310;
            def = 168;
            str = 280;
            agi = 225;
            vit = 180;
            inte = 256;
            luk = 230;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 134000;
            money = 23000;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 10;
            img = 85;
            skill[0]= 162;
            skillPac[0]= 15;
            skill[1]= 163;
            skillPac[1]= 8;
            skill[2]= 167;
            skillPac[2]= 15;
            skill[3]= 168;
            skillPac[3]= 5;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 88:
            no = nno;
            name = "貪欲";
            lv = 48;
            hp = 301;
            mp = 999;
            atk = 264;
            def = 160;
            str = 240;
            agi = 211;
            vit = 146;
            inte = 171;
            luk = 150;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 1254;
            money = 288;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 86;
            skill[0]= 927;
            skillPac[0]= 100;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 89:
            no = nno;
            name = "瞋恚";
            lv = 49;
            hp = 284;
            mp = 999;
            atk = 255;
            def = 130;
            str = 231;
            agi = 172;
            vit = 115;
            inte = 226;
            luk = 172;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 1357;
            money = 194;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 87;
            skill[0]= 252;
            skillPac[0]= 10;
            skill[1]= 171;
            skillPac[1]= 9;
            skill[2]= 176;
            skillPac[2]= 6;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 122;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 90:
            no = nno;
            name = "愚痴";
            lv = 48;
            hp = 395;
            mp = 10;
            atk = 295;
            def = 172;
            str = 275;
            agi = 108;
            vit = 160;
            inte = 108;
            luk = 108;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 1328;
            money = 218;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 88;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 91:
            no = nno;
            name = "黒の封印";
            lv = 70;
            hp = 6700;
            mp = 999;
            atk = 310;
            def = 168;
            str = 280;
            agi = 211;
            vit = 180;
            inte = 256;
            luk = 230;
            elm = Battle.ELM_DARK;
            atkNum = 2;
            exp = 134000;
            money = 23000;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 89;
            skill[0]= 252;
            skillPac[0]= 10;
            skill[1]= 171;
            skillPac[1]= 25;
            skill[2]= 176;
            skillPac[2]= 15;
            skill[3]= 927;
            skillPac[3]= 50;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 92:
            no = nno;
            name = "柱の守護者";
            lv = 51;
            hp = 364;
            mp = 142;
            atk = 308;
            def = 170;
            str = 294;
            agi = 188;
            vit = 154;
            inte = 214;
            luk = 176;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 1618;
            money = 314;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 90;
            skill[0]= 162;
            skillPac[0]= 25;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 409;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 93:
            no = nno;
            name = "嵐の影";
            lv = 52;
            hp = 391;
            mp = 220;
            atk = 327;
            def = 162;
            str = 310;
            agi = 215;
            vit = 136;
            inte = 185;
            luk = 146;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 1689;
            money = 322;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 91;
            skill[0]= 122;
            skillPac[0]= 20;
            skill[1]= 127;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 94:
            no = nno;
            name = "魔道書";
            lv = 53;
            hp = 430;
            mp = 999;
            atk = 300;
            def = 133;
            str = 280;
            agi = 170;
            vit = 122;
            inte = 308;
            luk = 210;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 1724;
            money = 297;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 92;
            skill[0]= 107;
            skillPac[0]= 10;
            skill[1]= 112;
            skillPac[1]= 20;
            skill[2]= 122;
            skillPac[2]= 20;
            skill[3]= 137;
            skillPac[3]= 10;
            item[0]= 4;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 95:
            no = nno;
            name = "リトル風起こし";
            lv = 50;
            hp = 288;
            mp = 200;
            atk = 280;
            def = 154;
            str = 258;
            agi = 181;
            vit = 107;
            inte = 248;
            luk = 360;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 1547;
            money = 218;
            size = Enemy.SIZE_S;
            fly = 20;
            wep = 11;
            img = 93;
            skill[0]= 121;
            skillPac[0]= 30;
            skill[1]= 122;
            skillPac[1]= 10;
            skill[2]= 126;
            skillPac[2]= 30;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 96:
            no = nno;
            name = "大いなる守護者";
            lv = 56;
            hp = 988;
            mp = 130;
            atk = 400;
            def = 165;
            str = 400;
            agi = 122;
            vit = 210;
            inte = 104;
            luk = 102;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 3581;
            money = 522;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 94;
            skill[0]= 927;
            skillPac[0]= 50;
            skill[1]= 925;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 97:
            no = nno;
            name = "雲使い";
            lv = 53;
            hp = 365;
            mp = 180;
            atk = 324;
            def = 190;
            str = 314;
            agi = 200;
            vit = 200;
            inte = 210;
            luk = 137;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 1814;
            money = 324;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 95;
            skill[0]= 403;
            skillPac[0]= 20;
            skill[1]= 251;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 10;
            item[1]= 12;
            itemPac[1]= 5;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 98:
            no = nno;
            name = "尾長";
            lv = 54;
            hp = 422;
            mp = 110;
            atk = 345;
            def = 164;
            str = 325;
            agi = 246;
            vit = 148;
            inte = 178;
            luk = 180;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 1909;
            money = 318;
            size = Enemy.SIZE_M;
            fly = 40;
            wep = 11;
            img = 96;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 125;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 99:
            no = nno;
            name = "雲幽霊";
            lv = 52;
            hp = 346;
            mp = 450;
            atk = 299;
            def = 137;
            str = 268;
            agi = 168;
            vit = 112;
            inte = 285;
            luk = 100;
            elm = 83;
            atkNum = 1;
            exp = 1857;
            money = 297;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 97;
            skill[0]= 122;
            skillPac[0]= 25;
            skill[1]= 126;
            skillPac[1]= 20;
            skill[2]= 127;
            skillPac[2]= 8;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 5;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        }
        if(nno > 99){
            EneList100(nno);
        }
    }
//-------------------------------------------------------------------------------------------------------
    public void EneList100(int nno){

        switch(nno){
        case 100:
            no = nno;
            name = "マッハ";
            lv = 72;
            hp = 7100;
            mp = 999;
            atk = 438;
            def = 224;
            str = 430;
            agi = 268;
            vit = 200;
            inte = 184;
            luk = 221;
            elm = Battle.ELM_WIND;
            atkNum = 2;
            exp = 146000;
            money = 15000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 98;
            skill[0]= 302;
            skillPac[0]= 30;
            skill[1]= 122;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 101:
            no = nno;
            name = "ネヴァン";
            lv = 73;
            hp = 7450;
            mp = 999;
            atk = 402;
            def = 200;
            str = 357;
            agi = 221;
            vit = 186;
            inte = 317;
            luk = 300;
            elm = Battle.ELM_WIND;
            atkNum = 2;
            exp = 148000;
            money = 15000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 99;
            skill[0]= 923;
            skillPac[0]= 20;
            skill[1]= 123;
            skillPac[1]= 20;
            skill[2]= 127;
            skillPac[2]= 20;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 102:
            no = nno;
            name = "モリガン";
            lv = 74;
            hp = 7500;
            mp = 999;
            atk = 412;
            def = 211;
            str = 411;
            agi = 244;
            vit = 197;
            inte = 263;
            luk = 234;
            elm = Battle.ELM_WIND;
            atkNum = 2;
            exp = 150000;
            money = 16000;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 100;
            skill[0]= 127;
            skillPac[0]= 20;
            skill[1]= 128;
            skillPac[1]= 10;
            skill[2]= 123;
            skillPac[2]= 20;
            skill[3]= 920;
            skillPac[3]= 15;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 103:
            no = nno;
            name = "マッハゴースト";
            lv = 65;
            hp = 2100;
            mp = 999;
            atk = 406;
            def = 171;
            str = 380;
            agi = 198;
            vit = 137;
            inte = 136;
            luk = 52;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 5500;
            money = 1000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 98;
            skill[0]= 302;
            skillPac[0]= 30;
            skill[1]= 122;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 104:
            no = nno;
            name = "ネヴァンゴースト";
            lv = 65;
            hp = 2600;
            mp = 999;
            atk = 370;
            def = 147;
            str = 344;
            agi = 165;
            vit = 127;
            inte = 182;
            luk = 78;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 5500;
            money = 1000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 99;
            skill[0]= 923;
            skillPac[0]= 35;
            skill[1]= 123;
            skillPac[1]= 20;
            skill[2]= 127;
            skillPac[2]= 20;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 105:
            no = nno;
            name = "高山蛇";
            lv = 55;
            hp = 402;
            mp = 100;
            atk = 331;
            def = 175;
            str = 312;
            agi = 174;
            vit = 178;
            inte = 196;
            luk = 182;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 2076;
            money = 336;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 101;
            skill[0]= 132;
            skillPac[0]= 20;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 106:
            no = nno;
            name = "シロ子熊";
            lv = 57;
            hp = 512;
            mp = 100;
            atk = 386;
            def = 204;
            str = 370;
            agi = 132;
            vit = 220;
            inte = 110;
            luk = 123;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 2214;
            money = 247;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 102;
            skill[0]= 925;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 13;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 107:
            no = nno;
            name = "ハヤテ";
            lv = 56;
            hp = 453;
            mp = 200;
            atk = 312;
            def = 154;
            str = 288;
            agi = 289;
            vit = 121;
            inte = 258;
            luk = 188;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 2136;
            money = 311;
            size = Enemy.SIZE_M;
            fly = 30;
            wep = 11;
            img = 103;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 108:
            no = nno;
            name = "遭難者の呪い";
            lv = 56;
            hp = 550;
            mp = 20;
            atk = 420;
            def = 130;
            str = 400;
            agi = 88;
            vit = 122;
            inte = 96;
            luk = 55;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 2177;
            money = 184;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 104;
            skill[0]= 927;
            skillPac[0]= 30;
            skill[1]= 926;
            skillPac[1]= 8;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 109:
            no = nno;
            name = "キュリオテテス";
            lv = 58;
            hp = 388;
            mp = 300;
            atk = 321;
            def = 182;
            str = 310;
            agi = 219;
            vit = 197;
            inte = 284;
            luk = 316;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 2295;
            money = 249;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 105;
            skill[0]= 166;
            skillPac[0]= 30;
            skill[1]= 167;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 4;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 110:
            no = nno;
            name = "オファニエル";
            lv = 78;
            hp = 8800;
            mp = 999;
            atk = 403;
            def = 228;
            str = 394;
            agi = 235;
            vit = 220;
            inte = 322;
            luk = 227;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 174000;
            money = 20000;
            size = Enemy.SIZE_L;
            fly = 20;
            wep = 11;
            img = 106;
            skill[0]= 915;
            skillPac[0]= 20;
            skill[1]= 928;
            skillPac[1]= 20;
            skill[2]= 163;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 111:
            no = nno;
            name = "人体樹";
            lv = 58;
            hp = 486;
            mp = 230;
            atk = 342;
            def = 190;
            str = 314;
            agi = 196;
            vit = 188;
            inte = 276;
            luk = 192;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 2847;
            money = 334;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 107;
            skill[0]= 132;
            skillPac[0]= 20;
            skill[1]= 137;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 12;
            itemPac[0]= 7;
            item[1]= 13;
            itemPac[1]= 7;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 112:
            no = nno;
            name = "森のしずく";
            lv = 58;
            hp = 415;
            mp = 560;
            atk = 314;
            def = 172;
            str = 284;
            agi = 176;
            vit = 163;
            inte = 324;
            luk = 226;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 2793;
            money = 357;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 108;
            skill[0]= 913;
            skillPac[0]= 10;
            skill[1]= 132;
            skillPac[1]= 30;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 4;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 113:
            no = nno;
            name = "赤兎";
            lv = 59;
            hp = 522;
            mp = 30;
            atk = 400;
            def = 152;
            str = 387;
            agi = 246;
            vit = 172;
            inte = 211;
            luk = 156;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 3015;
            money = 311;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 109;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 114:
            no = nno;
            name = "ザフキエル";
            lv = 80;
            hp = 9000;
            mp = 999;
            atk = 457;
            def = 236;
            str = 433;
            agi = 240;
            vit = 255;
            inte = 243;
            luk = 197;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 178000;
            money = 20000;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 110;
            skill[0]= 916;
            skillPac[0]= 20;
            skill[1]= 917;
            skillPac[1]= 6;
            skill[2]= 922;
            skillPac[2]= 6;
            skill[3]= 929;
            skillPac[3]= 7;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 115:
            no = nno;
            name = "クリオネア";
            lv = 59;
            hp = 493;
            mp = 300;
            atk = 327;
            def = 178;
            str = 311;
            agi = 192;
            vit = 155;
            inte = 335;
            luk = 256;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 3195;
            money = 340;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 111;
            skill[0]= 112;
            skillPac[0]= 30;
            skill[1]= 116;
            skillPac[1]= 30;
            skill[2]= 117;
            skillPac[2]= 15;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 1;
            itemPac[0]= 40;
            item[1]= 2;
            itemPac[1]= 25;
            item[2]= 3;
            itemPac[2]= 10;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 116:
            no = nno;
            name = "触手玉";
            lv = 59;
            hp = 558;
            mp = 100;
            atk = 348;
            def = 152;
            str = 323;
            agi = 178;
            vit = 121;
            inte = 187;
            luk = 184;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 3317;
            money = 362;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 112;
            skill[0]= 421;
            skillPac[0]= 15;
            skill[1]= 423;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 4;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 117:
            no = nno;
            name = "プリティクラブ";
            lv = 60;
            hp = 412;
            mp = 200;
            atk = 429;
            def = 256;
            str = 410;
            agi = 146;
            vit = 360;
            inte = 145;
            luk = 102;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 3568;
            money = 331;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 113;
            skill[0]= 401;
            skillPac[0]= 10;
            skill[1]= 402;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 118:
            no = nno;
            name = "ラジエル";
            lv = 82;
            hp = 8400;
            mp = 999;
            atk = 386;
            def = 210;
            str = 355;
            agi = 238;
            vit = 307;
            inte = 400;
            luk = 220;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 185000;
            money = 22000;
            size = Enemy.SIZE_L;
            fly = 10;
            wep = 11;
            img = 114;
            skill[0]= 916;
            skillPac[0]= 15;
            skill[1]= 917;
            skillPac[1]= 3;
            skill[2]= 930;
            skillPac[2]= 10;
            skill[3]= 912;
            skillPac[3]= 50;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 119:
            no = nno;
            name = "セラフィム";
            lv = 80;
            hp = 1216;
            mp = 999;
            atk = 536;
            def = 330;
            str = 511;
            agi = 334;
            vit = 320;
            inte = 516;
            luk = 475;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 15462;
            money = 976;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 10;
            img = 115;
            skill[0]= 162;
            skillPac[0]= 20;
            skill[1]= 167;
            skillPac[1]= 15;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 316;
            itemPac[0]= 2;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 120:
            no = nno;
            name = "ラファエル";
            lv = 84;
            hp = 9800;
            mp = 999;
            atk = 450;
            def = 240;
            str = 433;
            agi = 245;
            vit = 255;
            inte = 310;
            luk = 300;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 192000;
            money = 22500;
            size = Enemy.SIZE_L;
            fly = 10;
            wep = 10;
            img = 116;
            skill[0]= 916;
            skillPac[0]= 20;
            skill[1]= 917;
            skillPac[1]= 8;
            skill[2]= 302;
            skillPac[2]= 15;
            skill[3]= 303;
            skillPac[3]= 10;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 121:
            no = nno;
            name = "スローネ";
            lv = 62;
            hp = 523;
            mp = 570;
            atk = 384;
            def = 210;
            str = 356;
            agi = 188;
            vit = 254;
            inte = 326;
            luk = 333;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 4317;
            money = 394;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 117;
            skill[0]= 912;
            skillPac[0]= 50;
            skill[1]= 915;
            skillPac[1]= 5;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 5;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 122:
            no = nno;
            name = "シエルアラーム";
            lv = 63;
            hp = 610;
            mp = 264;
            atk = 420;
            def = 194;
            str = 397;
            agi = 227;
            vit = 210;
            inte = 207;
            luk = 128;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 4566;
            money = 422;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 118;
            skill[0]= 127;
            skillPac[0]= 20;
            skill[1]= 122;
            skillPac[1]= 30;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 40;
            itemPac[0]= 8;
            item[1]= 41;
            itemPac[1]= 5;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 123:
            no = nno;
            name = "ランドスティック";
            lv = 64;
            hp = 540;
            mp = 177;
            atk = 455;
            def = 178;
            str = 421;
            agi = 168;
            vit = 311;
            inte = 246;
            luk = 107;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 4721;
            money = 407;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 119;
            skill[0]= 303;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 2;
            itemPac[0]= 10;
            item[1]= 3;
            itemPac[1]= 5;
            item[2]= 5;
            itemPac[2]= 5;
            item[3]= 6;
            itemPac[3]= 3;
            break;
        case 124:
            no = nno;
            name = "ライトドッグ";
            lv = 64;
            hp = 530;
            mp = 120;
            atk = 470;
            def = 154;
            str = 455;
            agi = 258;
            vit = 121;
            inte = 176;
            luk = 280;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 4809;
            money = 393;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 120;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 3;
            itemPac[0]= 8;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 125:
            no = nno;
            name = "ケルブ";
            lv = 66;
            hp = 656;
            mp = 650;
            atk = 433;
            def = 224;
            str = 408;
            agi = 230;
            vit = 210;
            inte = 368;
            luk = 333;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 5488;
            money = 436;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 121;
            skill[0]= 912;
            skillPac[0]= 20;
            skill[1]= 103;
            skillPac[1]= 10;
            skill[2]= 915;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 6;
            itemPac[0]= 5;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 126:
            no = nno;
            name = "光の天秤";
            lv = 67;
            hp = 591;
            mp = 360;
            atk = 500;
            def = 250;
            str = 478;
            agi = 80;
            vit = 220;
            inte = 312;
            luk = 255;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 5912;
            money = 345;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 122;
            skill[0]= 927;
            skillPac[0]= 50;
            skill[1]= 163;
            skillPac[1]= 10;
            skill[2]= 167;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 6;
            itemPac[0]= 3;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 127:
            no = nno;
            name = "メタトロン";
            lv = 85;
            hp = 11500;
            mp = 999;
            atk = 550;
            def = 262;
            str = 521;
            agi = 247;
            vit = 326;
            inte = 415;
            luk = 458;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 340000;
            money = 28800;
            size = Enemy.SIZE_L;
            fly = 10;
            wep = 10;
            img = 123;
            skill[0]= 916;
            skillPac[0]= 20;
            skill[1]= 917;
            skillPac[1]= 10;
            skill[2]= 918;
            skillPac[2]= 5;
            skill[3]= 103;
            skillPac[3]= 20;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 128:
            no = nno;
            name = "おうさま";
            lv = 88;
            hp = 12300;
            mp = 999;
            atk = 542;
            def = 267;
            str = 508;
            agi = 256;
            vit = 344;
            inte = 400;
            luk = 315;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 38000;
            money = 5000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 68;
            skill[0]= 923;
            skillPac[0]= 25;
            skill[1]= 917;
            skillPac[1]= 10;
            skill[2]= 918;
            skillPac[2]= 5;
            skill[3]= 922;
            skillPac[3]= 10;
            item[0]= 136;
            itemPac[0]= 100;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 129:
            no = nno;
            name = "ヤハウェの思念";
            lv = 90;
            hp = 15000;
            mp = 999;
            atk = 568;
            def = 290;
            str = 555;
            agi = 263;
            vit = 382;
            inte = 450;
            luk = 999;
            elm = Battle.ELM_NULL;
            atkNum = 2;
            exp = 45000;
            money = 7000;
            size = Enemy.SIZE_L;
            fly = 20;
            wep = 11;
            img = 124;
            skill[0]= 931;
            skillPac[0]= 8;
            skill[1]= 928;
            skillPac[1]= 17;
            skill[2]= 918;
            skillPac[2]= 6;
            skill[3]= 920;
            skillPac[3]= 30;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 130:
            no = nno;
            name = "おうさま";
            lv = 88;
            hp = 12300;
            mp = 999;
            atk = 542;
            def = 267;
            str = 508;
            agi = 256;
            vit = 344;
            inte = 400;
            luk = 315;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 38000;
            money = 5000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 68;
            skill[0]= 923;
            skillPac[0]= 25;
            skill[1]= 917;
            skillPac[1]= 10;
            skill[2]= 918;
            skillPac[2]= 5;
            skill[3]= 922;
            skillPac[3]= 10;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 131:
            no = nno;
            name = "黒小鳥";
            lv = 70;
            hp = 613;
            mp = 250;
            atk = 502;
            def = 198;
            str = 480;
            agi = 273;
            vit = 236;
            inte = 244;
            luk = 366;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 6877;
            money = 488;
            size = Enemy.SIZE_S;
            fly = 40;
            wep = 11;
            img = 125;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 132:
            no = nno;
            name = "子黒竜";
            lv = 72;
            hp = 755;
            mp = 465;
            atk = 545;
            def = 238;
            str = 521;
            agi = 226;
            vit = 359;
            inte = 285;
            luk = 288;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 7756;
            money = 524;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 126;
            skill[0]= 252;
            skillPac[0]= 7;
            skill[1]= 176;
            skillPac[1]= 20;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 133:
            no = nno;
            name = "業炎玉";
            lv = 71;
            hp = 710;
            mp = 340;
            atk = 510;
            def = 221;
            str = 493;
            agi = 197;
            vit = 234;
            inte = 300;
            luk = 188;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 7912;
            money = 530;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 5;
            skill[0]= 102;
            skillPac[0]= 30;
            skill[1]= 103;
            skillPac[1]= 6;
            skill[2]= 107;
            skillPac[2]= 15;
            skill[3]= 108;
            skillPac[3]= 7;
            item[0]= 3;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 134:
            no = nno;
            name = "清き水の子";
            lv = 71;
            hp = 657;
            mp = 560;
            atk = 437;
            def = 183;
            str = 407;
            agi = 180;
            vit = 415;
            inte = 346;
            luk = 333;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 7996;
            money = 511;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 7;
            skill[0]= 113;
            skillPac[0]= 8;
            skill[1]= 117;
            skillPac[1]= 15;
            skill[2]= 5;
            skillPac[2]= 15;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 3;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 135:
            no = nno;
            name = "大地の根";
            lv = 71;
            hp = 730;
            mp = 220;
            atk = 500;
            def = 330;
            str = 477;
            agi = 136;
            vit = 687;
            inte = 235;
            luk = 191;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 8064;
            money = 463;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 13;
            skill[0]= 133;
            skillPac[0]= 8;
            skill[1]= 138;
            skillPac[1]= 8;
            skill[2]= 137;
            skillPac[2]= 15;
            skill[3]= 132;
            skillPac[3]= 20;
            item[0]= 3;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 136:
            no = nno;
            name = "嵐鳥";
            lv = 71;
            hp = 682;
            mp = 155;
            atk = 486;
            def = 175;
            str = 456;
            agi = 322;
            vit = 180;
            inte = 258;
            luk = 210;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 8101;
            money = 502;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 45;
            skill[0]= 122;
            skillPac[0]= 20;
            skill[1]= 123;
            skillPac[1]= 7;
            skill[2]= 127;
            skillPac[2]= 10;
            skill[3]= 128;
            skillPac[3]= 5;
            item[0]= 3;
            itemPac[0]= 10;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 137:
            no = nno;
            name = "ナーゴースト";
            lv = 72;
            hp = 800;
            mp = 500;
            atk = 525;
            def = 230;
            str = 500;
            agi = 210;
            vit = 244;
            inte = 314;
            luk = 210;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 8869;
            money = 554;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 6;
            skill[0]= 102;
            skillPac[0]= 40;
            skill[1]= 103;
            skillPac[1]= 7;
            skill[2]= 107;
            skillPac[2]= 12;
            skill[3]= 108;
            skillPac[3]= 5;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 138:
            no = nno;
            name = "青色ゴースト";
            lv = 72;
            hp = 1450;
            mp = 500;
            atk = 453;
            def = 190;
            str = 430;
            agi = 186;
            vit = 423;
            inte = 391;
            luk = 355;
            elm = Battle.ELM_WATR;
            atkNum = 2;
            exp = 16889;
            money = 1024;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 11;
            skill[0]= 113;
            skillPac[0]= 10;
            skill[1]= 117;
            skillPac[1]= 15;
            skill[2]= 118;
            skillPac[2]= 5;
            skill[3]= 6;
            skillPac[3]= 7;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 139:
            no = nno;
            name = "石塊ゴースト";
            lv = 72;
            hp = 770;
            mp = 500;
            atk = 510;
            def = 354;
            str = 493;
            agi = 140;
            vit = 720;
            inte = 276;
            luk = 200;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 8854;
            money = 567;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 15;
            skill[0]= 132;
            skillPac[0]= 25;
            skill[1]= 133;
            skillPac[1]= 8;
            skill[2]= 137;
            skillPac[2]= 15;
            skill[3]= 138;
            skillPac[3]= 5;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 140:
            no = nno;
            name = "渦風ゴースト";
            lv = 72;
            hp = 700;
            mp = 500;
            atk = 495;
            def = 183;
            str = 464;
            agi = 330;
            vit = 185;
            inte = 260;
            luk = 220;
            elm = Battle.ELM_WIND;
            atkNum = 1;
            exp = 8989;
            money = 548;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 24;
            skill[0]= 122;
            skillPac[0]= 30;
            skill[1]= 123;
            skillPac[1]= 10;
            skill[2]= 127;
            skillPac[2]= 8;
            skill[3]= 128;
            skillPac[3]= 6;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 141:
            no = nno;
            name = "タブリスの影";
            lv = 90;
            hp = 13500;
            mp = 999;
            atk = 588;
            def = 300;
            str = 574;
            agi = 258;
            vit = 556;
            inte = 324;
            luk = 876;
            elm = Battle.ELM_FIRE;
            atkNum = 2;
            exp = 22000;
            money = 6000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 50;
            skill[0]= 914;
            skillPac[0]= 10;
            skill[1]= 103;
            skillPac[1]= 20;
            skill[2]= 108;
            skillPac[2]= 15;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 3;
            itemPac[0]= 100;
            item[1]= 6;
            itemPac[1]= 100;
            item[2]= 41;
            itemPac[2]= 100;
            item[3]= 468;
            itemPac[3]= 100;
            break;
        case 142:
            no = nno;
            name = "ファヌエルの影";
            lv = 90;
            hp = 14300;
            mp = 999;
            atk = 463;
            def = 180;
            str = 433;
            agi = 178;
            vit = 476;
            inte = 310;
            luk = 924;
            elm = Battle.ELM_WATR;
            atkNum = 2;
            exp = 22000;
            money = 6000;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 61;
            skill[0]= 919;
            skillPac[0]= 15;
            skill[1]= 113;
            skillPac[1]= 30;
            skill[2]= 117;
            skillPac[2]= 30;
            skill[3]= 118;
            skillPac[3]= 10;
            item[0]= 3;
            itemPac[0]= 100;
            item[1]= 6;
            itemPac[1]= 100;
            item[2]= 41;
            itemPac[2]= 100;
            item[3]= 319;
            itemPac[3]= 100;
            break;
        case 143:
            no = nno;
            name = "ソフィエルの影";
            lv = 90;
            hp = 11500;
            mp = 999;
            atk = 554;
            def = 398;
            str = 527;
            agi = 211;
            vit = 896;
            inte = 487;
            luk = 985;
            elm = Battle.ELM_ERTH;
            atkNum = 2;
            exp = 22000;
            money = 6000;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 51;
            skill[0]= 929;
            skillPac[0]= 12;
            skill[1]= 133;
            skillPac[1]= 10;
            skill[2]= 137;
            skillPac[2]= 30;
            skill[3]= 138;
            skillPac[3]= 10;
            item[0]= 3;
            itemPac[0]= 100;
            item[1]= 6;
            itemPac[1]= 100;
            item[2]= 41;
            itemPac[2]= 100;
            item[3]= 414;
            itemPac[3]= 100;
            break;
        case 144:
            no = nno;
            name = "ルヒエルの影";
            lv = 90;
            hp = 12800;
            mp = 999;
            atk = 538;
            def = 268;
            str = 514;
            agi = 368;
            vit = 437;
            inte = 335;
            luk = 891;
            elm = Battle.ELM_WIND;
            atkNum = 2;
            exp = 22000;
            money = 6000;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 49;
            skill[0]= 251;
            skillPac[0]= 12;
            skill[1]= 123;
            skillPac[1]= 30;
            skill[2]= 127;
            skillPac[2]= 20;
            skill[3]= 128;
            skillPac[3]= 10;
            item[0]= 3;
            itemPac[0]= 100;
            item[1]= 6;
            itemPac[1]= 100;
            item[2]= 41;
            itemPac[2]= 100;
            item[3]= 467;
            itemPac[3]= 100;
            break;
        case 145:
            no = nno;
            name = "昼の女神ヘーメラ";
            lv = 92;
            hp = 20000;
            mp = 999;
            atk = 612;
            def = 322;
            str = 588;
            agi = 271;
            vit = 855;
            inte = 460;
            luk = 999;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 180000;
            money = 10000;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 127;
            skill[0]= 923;
            skillPac[0]= 10;
            skill[1]= 167;
            skillPac[1]= 30;
            skill[2]= 168;
            skillPac[2]= 6;
            skill[3]= 163;
            skillPac[3]= 10;
            item[0]= 270;
            itemPac[0]= 100;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 146:
            no = nno;
            name = "夜の女神ニュクス";
            lv = 92;
            hp = 17100;
            mp = 999;
            atk = 467;
            def = 276;
            str = 436;
            agi = 253;
            vit = 842;
            inte = 648;
            luk = 999;
            elm = Battle.ELM_DARK;
            atkNum = 2;
            exp = 180000;
            money = 10000;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 128;
            skill[0]= 928;
            skillPac[0]= 12;
            skill[1]= 906;
            skillPac[1]= 18;
            skill[2]= 172;
            skillPac[2]= 20;
            skill[3]= 176;
            skillPac[3]= 10;
            item[0]= 271;
            itemPac[0]= 100;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 147:
            no = nno;
            name = "光の精";
            lv = 73;
            hp = 715;
            mp = 540;
            atk = 476;
            def = 215;
            str = 443;
            agi = 234;
            vit = 332;
            inte = 367;
            luk = 346;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 9764;
            money = 611;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 40;
            skill[0]= 912;
            skillPac[0]= 15;
            skill[1]= 162;
            skillPac[1]= 25;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 148:
            no = nno;
            name = "闇法師";
            lv = 73;
            hp = 674;
            mp = 880;
            atk = 432;
            def = 176;
            str = 387;
            agi = 216;
            vit = 258;
            inte = 410;
            luk = 265;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 9952;
            money = 597;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 26;
            skill[0]= 171;
            skillPac[0]= 12;
            skill[1]= 176;
            skillPac[1]= 7;
            skill[2]= 905;
            skillPac[2]= 40;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 149:
            no = nno;
            name = "フレイムナイト";
            lv = 74;
            hp = 786;
            mp = 280;
            atk = 542;
            def = 326;
            str = 512;
            agi = 189;
            vit = 364;
            inte = 186;
            luk = 193;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 10067;
            money = 582;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 28;
            skill[0]= 102;
            skillPac[0]= 20;
            skill[1]= 103;
            skillPac[1]= 7;
            skill[2]= 107;
            skillPac[2]= 15;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 150:
            no = nno;
            name = "呪いの剣";
            lv = 74;
            hp = 723;
            mp = 50;
            atk = 568;
            def = 188;
            str = 553;
            agi = 294;
            vit = 182;
            inte = 158;
            luk = 221;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 10154;
            money = 607;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 10;
            img = 34;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 3;
            itemPac[0]= 15;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 151:
            no = nno;
            name = "ダークマッド";
            lv = 75;
            hp = 886;
            mp = 50;
            atk = 600;
            def = 214;
            str = 580;
            agi = 156;
            vit = 368;
            inte = 128;
            luk = 156;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 11337;
            money = 616;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 10;
            skill[0]= 927;
            skillPac[0]= 40;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 152:
            no = nno;
            name = "シェイド";
            lv = 93;
            hp = 22000;
            mp = 999;
            atk = 580;
            def = 266;
            str = 451;
            agi = 310;
            vit = 486;
            inte = 999;
            luk = 999;
            elm = Battle.ELM_DARK;
            atkNum = 2;
            exp = 240000;
            money = 10000;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 8;
            skill[0]= 906;
            skillPac[0]= 15;
            skill[1]= 926;
            skillPac[1]= 10;
            skill[2]= 171;
            skillPac[2]= 10;
            skill[3]= 172;
            skillPac[3]= 7;
            item[0]= 137;
            itemPac[0]= 100;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 153:
            no = nno;
            name = "ダークナイト";
            lv = 76;
            hp = 802;
            mp = 120;
            atk = 539;
            def = 277;
            str = 506;
            agi = 221;
            vit = 316;
            inte = 238;
            luk = 176;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 13462;
            money = 581;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 10;
            img = 27;
            skill[0]= 171;
            skillPac[0]= 15;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 154:
            no = nno;
            name = "闇の監視";
            lv = 74;
            hp = 677;
            mp = 360;
            atk = 468;
            def = 226;
            str = 432;
            agi = 268;
            vit = 186;
            inte = 465;
            luk = 367;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 9976;
            money = 501;
            size = Enemy.SIZE_S;
            fly = 30;
            wep = 11;
            img = 44;
            skill[0]= 905;
            skillPac[0]= 30;
            skill[1]= 171;
            skillPac[1]= 10;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 155:
            no = nno;
            name = "怪力";
            lv = 76;
            hp = 899;
            mp = 10;
            atk = 726;
            def = 240;
            str = 692;
            agi = 88;
            vit = 483;
            inte = 98;
            luk = 126;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 14267;
            money = 528;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 54;
            skill[0]= 0;
            skillPac[0]= 0;
            skill[1]= 0;
            skillPac[1]= 0;
            skill[2]= 0;
            skillPac[2]= 0;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 156:
            no = nno;
            name = "憑依する闇";
            lv = 77;
            hp = 743;
            mp = 670;
            atk = 489;
            def = 216;
            str = 455;
            agi = 233;
            vit = 286;
            inte = 421;
            luk = 267;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 14958;
            money = 596;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 66;
            skill[0]= 252;
            skillPac[0]= 15;
            skill[1]= 171;
            skillPac[1]= 30;
            skill[2]= 176;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 157:
            no = nno;
            name = "姫様返り咲き";
            lv = 94;
            hp = 22400;
            mp = 999;
            atk = 622;
            def = 315;
            str = 589;
            agi = 300;
            vit = 336;
            inte = 430;
            luk = 880;
            elm = Battle.ELM_HOLY;
            atkNum = 2;
            exp = 360000;
            money = 30000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 43;
            skill[0]= 932;
            skillPac[0]= 12;
            skill[1]= 915;
            skillPac[1]= 25;
            skill[2]= 301;
            skillPac[2]= 12;
            skill[3]= 302;
            skillPac[3]= 6;
            item[0]= 272;
            itemPac[0]= 100;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 158:
            no = nno;
            name = "影竜";
            lv = 80;
            hp = 1137;
            mp = 870;
            atk = 558;
            def = 284;
            str = 532;
            agi = 286;
            vit = 842;
            inte = 410;
            luk = 922;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 17167;
            money = 778;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 11;
            img = 129;
            skill[0]= 171;
            skillPac[0]= 20;
            skill[1]= 176;
            skillPac[1]= 10;
            skill[2]= 925;
            skillPac[2]= 3;
            skill[3]= 926;
            skillPac[3]= 8;
            item[0]= 460;
            itemPac[0]= 2;
            item[1]= 6;
            itemPac[1]= 7;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 159:
            no = nno;
            name = "闇雲";
            lv = 81;
            hp = 1200;
            mp = 900;
            atk = 600;
            def = 300;
            str = 580;
            agi = 280;
            vit = 900;
            inte = 430;
            luk = 900;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 18000;
            money = 800;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 87;
            skill[0]= 171;
            skillPac[0]= 20;
            skill[1]= 172;
            skillPac[1]= 8;
            skill[2]= 176;
            skillPac[2]= 10;
            skill[3]= 177;
            skillPac[3]= 6;
            item[0]= 6;
            itemPac[0]= 7;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 160:
            no = nno;
            name = "燃え尽きる者";
            lv = 95;
            hp = 24000;
            mp = 999;
            atk = 657;
            def = 240;
            str = 620;
            agi = 310;
            vit = 999;
            inte = 317;
            luk = 999;
            elm = Battle.ELM_FIRE;
            atkNum = 2;
            exp = 800000;
            money = 28000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 11;
            img = 67;
            skill[0]= 103;
            skillPac[0]= 20;
            skill[1]= 108;
            skillPac[1]= 15;
            skill[2]= 921;
            skillPac[2]= 12;
            skill[3]= 922;
            skillPac[3]= 20;
            item[0]= 14;
            itemPac[0]= 100;
            item[1]= 15;
            itemPac[1]= 100;
            item[2]= 6;
            itemPac[2]= 100;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 161:
            no = nno;
            name = "闇に生きる者";
            lv = 96;
            hp = 25000;
            mp = 999;
            atk = 600;
            def = 330;
            str = 570;
            agi = 288;
            vit = 999;
            inte = 456;
            luk = 999;
            elm = Battle.ELM_DARK;
            atkNum = 2;
            exp = 830000;
            money = 30000;
            size = Enemy.SIZE_L;
            fly = 10;
            wep = 11;
            img = 30;
            skill[0]= 172;
            skillPac[0]= 20;
            skill[1]= 177;
            skillPac[1]= 15;
            skill[2]= 928;
            skillPac[2]= 20;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 14;
            itemPac[0]= 100;
            item[1]= 15;
            itemPac[1]= 100;
            item[2]= 6;
            itemPac[2]= 100;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 162:
            no = nno;
            name = "ルシファー";
            lv = 98;
            hp = 30000;
            mp = 999;
            atk = 666;
            def = 356;
            str = 653;
            agi = 321;
            vit = 999;
            inte = 350;
            luk = 999;
            elm = Battle.ELM_DARK;
            atkNum = 3;
            exp = 100000;
            money = 6000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 68;
            skill[0]= 177;
            skillPac[0]= 20;
            skill[1]= 922;
            skillPac[1]= 15;
            skill[2]= 172;
            skillPac[2]= 25;
            skill[3]= 936;
            skillPac[3]= 8;
            item[0]= 14;
            itemPac[0]= 100;
            item[1]= 15;
            itemPac[1]= 100;
            item[2]= 138;
            itemPac[2]= 100;
            item[3]= 469;
            itemPac[3]= 100;
            break;
        case 163:
            no = nno;
            name = "ルシファー";
            lv = 99;
            hp = 34000;
            mp = 999;
            atk = 680;
            def = 400;
            str = 665;
            agi = 333;
            vit = 999;
            inte = 450;
            luk = 999;
            elm = Battle.ELM_DARK;
            atkNum = 3;
            exp = 120000;
            money = 10000;
            size = Enemy.SIZE_L;
            fly = 0;
            wep = 10;
            img = 68;
            skill[0]= 177;
            skillPac[0]= 20;
            skill[1]= 922;
            skillPac[1]= 15;
            skill[2]= 172;
            skillPac[2]= 25;
            skill[3]= 936;
            skillPac[3]= 9;
            item[0]= 14;
            itemPac[0]= 100;
            item[1]= 15;
            itemPac[1]= 100;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 164:
            no = nno;
            name = "超子赤竜";
            lv = 88;
            hp = 2055;
            mp = 999;
            atk = 630;
            def = 322;
            str = 601;
            agi = 302;
            vit = 965;
            inte = 455;
            luk = 921;
            elm = Battle.ELM_FIRE;
            atkNum = 1;
            exp = 21453;
            money = 1265;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 35;
            skill[0]= 107;
            skillPac[0]= 20;
            skill[1]= 108;
            skillPac[1]= 10;
            skill[2]= 102;
            skillPac[2]= 30;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 139;
            itemPac[0]= 1;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 165:
            no = nno;
            name = "ホーリーナイト";
            lv = 89;
            hp = 2265;
            mp = 999;
            atk = 654;
            def = 348;
            str = 642;
            agi = 348;
            vit = 996;
            inte = 357;
            luk = 974;
            elm = Battle.ELM_HOLY;
            atkNum = 1;
            exp = 22658;
            money = 1157;
            size = Enemy.SIZE_M;
            fly = 10;
            wep = 10;
            img = 85;
            skill[0]= 167;
            skillPac[0]= 20;
            skill[1]= 162;
            skillPac[1]= 20;
            skill[2]= 301;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 166:
            no = nno;
            name = "超子青竜";
            lv = 88;
            hp = 1856;
            mp = 999;
            atk = 582;
            def = 295;
            str = 563;
            agi = 278;
            vit = 786;
            inte = 536;
            luk = 995;
            elm = Battle.ELM_WATR;
            atkNum = 1;
            exp = 21059;
            money = 1312;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 36;
            skill[0]= 117;
            skillPac[0]= 28;
            skill[1]= 112;
            skillPac[1]= 40;
            skill[2]= 113;
            skillPac[2]= 10;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 140;
            itemPac[0]= 1;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 167:
            no = nno;
            name = "超子緑竜";
            lv = 89;
            hp = 2463;
            mp = 999;
            atk = 615;
            def = 457;
            str = 587;
            agi = 233;
            vit = 999;
            inte = 336;
            luk = 781;
            elm = Battle.ELM_ERTH;
            atkNum = 1;
            exp = 22166;
            money = 1220;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 37;
            skill[0]= 137;
            skillPac[0]= 20;
            skill[1]= 138;
            skillPac[1]= 10;
            skill[2]= 132;
            skillPac[2]= 30;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 141;
            itemPac[0]= 1;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 168:
            no = nno;
            name = "闇の粒";
            lv = 92;
            hp = 2222;
            mp = 999;
            atk = 666;
            def = 333;
            str = 666;
            agi = 333;
            vit = 999;
            inte = 444;
            luk = 999;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 23456;
            money = 1234;
            size = Enemy.SIZE_S;
            fly = 20;
            wep = 11;
            img = 29;
            skill[0]= 171;
            skillPac[0]= 30;
            skill[1]= 172;
            skillPac[1]= 10;
            skill[2]= 176;
            skillPac[2]= 15;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 169:
            no = nno;
            name = "異界の遭難者";
            lv = 60;
            hp = 610;
            mp = 540;
            atk = 410;
            def = 220;
            str = 364;
            agi = 199;
            vit = 206;
            inte = 265;
            luk = 100;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 2564;
            money = 108;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 130;
            skill[0]= 252;
            skillPac[0]= 15;
            skill[1]= 421;
            skillPac[1]= 20;
            skill[2]= 171;
            skillPac[2]= 25;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 170:
            no = nno;
            name = "異形";
            lv = 65;
            hp = 723;
            mp = 420;
            atk = 447;
            def = 244;
            str = 392;
            agi = 233;
            vit = 231;
            inte = 318;
            luk = 100;
            elm = Battle.ELM_DARK;
            atkNum = 1;
            exp = 3036;
            money = 112;
            size = Enemy.SIZE_M;
            fly = 0;
            wep = 11;
            img = 132;
            skill[0]= 171;
            skillPac[0]= 20;
            skill[1]= 176;
            skillPac[1]= 10;
            skill[2]= 927;
            skillPac[2]= 30;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 171:
            no = nno;
            name = "遠い日の悪夢";
            lv = 80;
            hp = 6400;
            mp = 800;
            atk = 500;
            def = 999;
            str = 490;
            agi = 488;
            vit = 999;
            inte = 300;
            luk = 999;
            elm = 87;
            atkNum = 2;
            exp = 34500;
            money = 10000;
            size = Enemy.SIZE_L;
            fly = 10;
            wep = 10;
            img = 131;
            skill[0]= 938;
            skillPac[0]= 30;
            skill[1]= 922;
            skillPac[1]= 10;
            skill[2]= 928;
            skillPac[2]= 22;
            skill[3]= 252;
            skillPac[3]= 12;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        case 172:
            no = nno;
            name = "塞ぐ面";
            lv = 67;
            hp = 666;
            mp = 666;
            atk = 500;
            def = 300;
            str = 450;
            agi = 226;
            vit = 666;
            inte = 333;
            luk = 666;
            elm = Battle.ELM_NULL;
            atkNum = 1;
            exp = 5568;
            money = 332;
            size = Enemy.SIZE_M;
            fly = 20;
            wep = 11;
            img = 133;
            skill[0]= 924;
            skillPac[0]= 15;
            skill[1]= 927;
            skillPac[1]= 20;
            skill[2]= 117;
            skillPac[2]= 20;
            skill[3]= 0;
            skillPac[3]= 0;
            item[0]= 0;
            itemPac[0]= 0;
            item[1]= 0;
            itemPac[1]= 0;
            item[2]= 0;
            itemPac[2]= 0;
            item[3]= 0;
            itemPac[3]= 0;
            break;
        }
    }

//-------------------------------------------------------------------------------------------------------
    /**
     * Mapごとの出現的リスト
     */
    public void MapList(int mapNo){

        switch(mapNo){
        case 1:
            mapEneList[0] = 0;
            mapEneList[1] = 1;

            mapEneNum = 2;
            minEne = 1;
            maxEne = 2;
            break;
        case 2:
            mapEneList[0] = 0;
            mapEneList[1] = 1;
            mapEneList[2] = 2;

            mapEneNum = 3;
            minEne = 1;
            maxEne = 2;
            break;
        case 3:
            mapEneList[0] = 1;
            mapEneList[1] = 2;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 3;
            break;
        case 4:
            mapEneList[0] = 2;
            mapEneList[1] = 4;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 3;
            break;
        case 5:
            mapEneList[0] = 2;
            mapEneList[1] = 4;
            mapEneList[2] = 5;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 6:
            mapEneList[0] = 4;
            mapEneList[1] = 5;
            mapEneList[2] = 5;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 8:
            mapEneList[0] = 7;
            mapEneList[1] = 8;
            mapEneList[2] = 9;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 3;
            break;
        case 9:
            mapEneList[0] = 7;
            mapEneList[1] = 8;
            mapEneList[2] = 9;
            mapEneList[3] = 10;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 11:
            mapEneList[0] = 12;
            mapEneList[1] = 13;
            mapEneList[2] = 14;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 12:
            mapEneList[0] = 16;
            mapEneList[1] = 17;
            mapEneList[2] = 18;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 13:
            mapEneList[0] = 16;
            mapEneList[1] = 17;
            mapEneList[2] = 18;
            mapEneList[3] = 19;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 5;
            break;
        case 14:
            mapEneList[0] = 16;
            mapEneList[1] = 17;
            mapEneList[2] = 18;
            mapEneList[3] = 19;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 6;
            break;
        case 16:
            mapEneList[0] = 20;
            mapEneList[1] = 21;
            mapEneList[2] = 22;
            mapEneList[3] = 23;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 17:
            mapEneList[0] = 20;
            mapEneList[1] = 21;
            mapEneList[2] = 22;
            mapEneList[3] = 23;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 18:
            mapEneList[0] = 20;
            mapEneList[1] = 21;
            mapEneList[2] = 22;
            mapEneList[3] = 23;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 19:
            mapEneList[0] = 20;
            mapEneList[1] = 21;
            mapEneList[2] = 22;
            mapEneList[3] = 23;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 5;
            break;
        case 20:
            mapEneList[0] = 20;
            mapEneList[1] = 21;
            mapEneList[2] = 22;
            mapEneList[3] = 23;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 6;
            break;
        case 22:
            mapEneList[0] = 25;
            mapEneList[1] = 26;
            mapEneList[2] = 27;
            mapEneList[3] = 29;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 23:
            mapEneList[0] = 25;
            mapEneList[1] = 26;
            mapEneList[2] = 27;
            mapEneList[3] = 28;
            mapEneList[4] = 29;

            mapEneNum = 5;
            minEne = 2;
            maxEne = 4;
            break;
        case 24:
            mapEneList[0] = 25;
            mapEneList[1] = 26;
            mapEneList[2] = 27;
            mapEneList[3] = 28;
            mapEneList[4] = 29;

            mapEneNum = 5;
            minEne = 4;
            maxEne = 6;
            break;
        case 27:
            mapEneList[0] = 31;
            mapEneList[1] = 32;
            mapEneList[2] = 33;
            mapEneList[3] = 34;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 28:
            mapEneList[0] = 31;
            mapEneList[1] = 32;
            mapEneList[2] = 33;
            mapEneList[3] = 34;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 29:
            mapEneList[0] = 31;
            mapEneList[1] = 32;
            mapEneList[2] = 33;
            mapEneList[3] = 34;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 30:
            mapEneList[0] = 31;
            mapEneList[1] = 31;
            mapEneList[2] = 32;
            mapEneList[3] = 32;
            mapEneList[4] = 33;
            mapEneList[5] = 33;
            mapEneList[6] = 34;
            mapEneList[7] = 34;
            mapEneList[8] = 35;

            mapEneNum = 9;
            minEne = 2;
            maxEne = 4;
            break;
        case 31:
            mapEneList[0] = 31;
            mapEneList[1] = 31;
            mapEneList[2] = 32;
            mapEneList[3] = 32;
            mapEneList[4] = 33;
            mapEneList[5] = 33;
            mapEneList[6] = 34;
            mapEneList[7] = 34;
            mapEneList[8] = 35;

            mapEneNum = 9;
            minEne = 3;
            maxEne = 4;
            break;
        case 32:
            mapEneList[0] = 31;
            mapEneList[1] = 31;
            mapEneList[2] = 32;
            mapEneList[3] = 32;
            mapEneList[4] = 33;
            mapEneList[5] = 33;
            mapEneList[6] = 34;
            mapEneList[7] = 34;
            mapEneList[8] = 35;
            mapEneList[9] = 36;
            mapEneList[10] = 37;

            mapEneNum = 11;
            minEne = 3;
            maxEne = 4;
            break;
        case 33:
            mapEneList[0] = 35;
            mapEneList[1] = 36;
            mapEneList[2] = 37;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 3;
            break;
        case 35:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 36:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 37:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 38:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 39:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 40:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;
            mapEneList[4] = 44;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 41:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;
            mapEneList[4] = 44;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 5;
            break;
        case 42:
            mapEneList[0] = 39;
            mapEneList[1] = 40;
            mapEneList[2] = 41;
            mapEneList[3] = 42;
            mapEneList[4] = 44;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 5;
            break;
        case 44:
            mapEneList[0] = 46;
            mapEneList[1] = 47;
            mapEneList[2] = 48;
            mapEneList[3] = 49;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 45:
            mapEneList[0] = 46;
            mapEneList[1] = 47;
            mapEneList[2] = 48;
            mapEneList[3] = 49;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 46:
            mapEneList[0] = 46;
            mapEneList[1] = 47;
            mapEneList[2] = 48;
            mapEneList[3] = 49;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 47:
            mapEneList[0] = 46;
            mapEneList[1] = 47;
            mapEneList[2] = 48;
            mapEneList[3] = 49;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 48:
            mapEneList[0] = 46;
            mapEneList[1] = 47;
            mapEneList[2] = 48;
            mapEneList[3] = 49;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 49:
            mapEneList[0] = 46;
            mapEneList[1] = 47;
            mapEneList[2] = 48;
            mapEneList[3] = 49;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 52:
            mapEneList[0] = 49;
            mapEneList[1] = 53;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 53:
            mapEneList[0] = 49;
            mapEneList[1] = 53;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 54:
            mapEneList[0] = 49;
            mapEneList[1] = 53;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 55:
            mapEneList[0] = 49;
            mapEneList[1] = 53;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 57:
            mapEneList[0] = 54;
            mapEneList[1] = 55;
            mapEneList[2] = 57;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 59:
            mapEneList[0] = 57;
            mapEneList[1] = 58;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 6;
            break;
        case 60:
            mapEneList[0] = 57;
            mapEneList[1] = 58;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 6;
            break;
        case 63:
            mapEneList[0] = 57;
            mapEneList[1] = 60;
            mapEneList[2] = 61;
            mapEneList[3] = 54;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 6;
            break;
        case 64:
            mapEneList[0] = 57;
            mapEneList[1] = 60;
            mapEneList[2] = 61;
            mapEneList[3] = 54;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 6;
            break;
        case 65:
            mapEneList[0] = 57;
            mapEneList[1] = 61;
            mapEneList[2] = 63;
            mapEneList[3] = 58;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 6;
            break;
        case 66:
            mapEneList[0] = 57;
            mapEneList[1] = 61;
            mapEneList[2] = 63;
            mapEneList[3] = 58;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 6;
            break;
        case 67:
            mapEneList[0] = 65;
            mapEneList[1] = 66;
            mapEneList[2] = 67;
            mapEneList[3] = 70;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 68:
            mapEneList[0] = 65;
            mapEneList[1] = 66;
            mapEneList[2] = 67;
            mapEneList[3] = 70;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 69:
            mapEneList[0] = 65;
            mapEneList[1] = 66;
            mapEneList[2] = 67;
            mapEneList[3] = 70;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 70:
            mapEneList[0] = 65;
            mapEneList[1] = 66;
            mapEneList[2] = 67;
            mapEneList[3] = 70;
            mapEneList[4] = 71;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 71:
            mapEneList[0] = 65;
            mapEneList[1] = 66;
            mapEneList[2] = 67;
            mapEneList[3] = 70;
            mapEneList[4] = 71;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 72:
            mapEneList[0] = 65;
            mapEneList[1] = 66;
            mapEneList[2] = 67;
            mapEneList[3] = 70;
            mapEneList[4] = 71;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 75:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 76:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 77:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 78:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 79:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 80:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;
            mapEneList[3] = 75;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 81:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;
            mapEneList[3] = 75;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 82:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;
            mapEneList[3] = 75;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 83:
            mapEneList[0] = 72;
            mapEneList[1] = 73;
            mapEneList[2] = 74;
            mapEneList[3] = 75;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 87:
            mapEneList[0] = 80;
            mapEneList[1] = 81;
            mapEneList[2] = 82;
            mapEneList[3] = 83;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 88:
            mapEneList[0] = 80;
            mapEneList[1] = 81;
            mapEneList[2] = 82;
            mapEneList[3] = 83;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 89:
            mapEneList[0] = 80;
            mapEneList[1] = 81;
            mapEneList[2] = 82;
            mapEneList[3] = 83;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 90:
            mapEneList[0] = 80;
            mapEneList[1] = 81;
            mapEneList[2] = 82;
            mapEneList[3] = 83;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 92:
            mapEneList[0] = 85;
            mapEneList[1] = 86;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 93:
            mapEneList[0] = 85;
            mapEneList[1] = 86;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 94:
            mapEneList[0] = 85;
            mapEneList[1] = 86;

            mapEneNum = 2;
            minEne = 2;
            maxEne = 4;
            break;
        case 95:
            mapEneList[0] = 85;
            mapEneList[1] = 86;

            mapEneNum = 2;
            minEne = 3;
            maxEne = 4;
            break;
        case 96:
            mapEneList[0] = 85;
            mapEneList[1] = 86;

            mapEneNum = 2;
            minEne = 3;
            maxEne = 4;
            break;
        case 97:
            mapEneList[0] = 85;
            mapEneList[1] = 86;

            mapEneNum = 2;
            minEne = 3;
            maxEne = 4;
            break;
        case 98:
            mapEneList[0] = 88;
            mapEneList[1] = 89;
            mapEneList[2] = 90;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 99:
            mapEneList[0] = 88;
            mapEneList[1] = 89;
            mapEneList[2] = 90;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 100:
            mapEneList[0] = 88;
            mapEneList[1] = 89;
            mapEneList[2] = 90;

            mapEneNum = 3;
            minEne = 2;
            maxEne = 4;
            break;
        case 101:
            mapEneList[0] = 88;
            mapEneList[1] = 89;
            mapEneList[2] = 90;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 102:
            mapEneList[0] = 88;
            mapEneList[1] = 89;
            mapEneList[2] = 90;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 103:
            mapEneList[0] = 88;
            mapEneList[1] = 89;
            mapEneList[2] = 90;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 105:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 106:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 107:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 108:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 109:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 110:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 8;
            break;
        case 112:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;
            mapEneList[4] = 96;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 8;
            break;
        case 113:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;
            mapEneList[4] = 96;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 8;
            break;
        case 114:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;
            mapEneList[4] = 96;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 8;
            break;
        case 115:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;
            mapEneList[4] = 96;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 8;
            break;
        case 116:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;
            mapEneList[4] = 96;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 8;
            break;
        case 117:
            mapEneList[0] = 92;
            mapEneList[1] = 93;
            mapEneList[2] = 94;
            mapEneList[3] = 95;
            mapEneList[4] = 96;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 8;
            break;
        case 122:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 123:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 124:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 125:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 126:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 127:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 128:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 129:
            mapEneList[0] = 93;
            mapEneList[1] = 96;
            mapEneList[2] = 97;
            mapEneList[3] = 98;
            mapEneList[4] = 99;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 131:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 132:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 133:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 134:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 135:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;

            mapEneNum = 4;
            minEne = 3;
            maxEne = 4;
            break;
        case 136:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;
            mapEneList[4] = 109;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 137:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;
            mapEneList[4] = 109;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 138:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;
            mapEneList[4] = 109;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 139:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;
            mapEneList[4] = 109;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 140:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;
            mapEneList[4] = 109;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 141:
            mapEneList[0] = 105;
            mapEneList[1] = 106;
            mapEneList[2] = 107;
            mapEneList[3] = 108;
            mapEneList[4] = 109;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 143:
            mapEneList[0] = 111;
            mapEneList[1] = 112;
            mapEneList[2] = 113;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 145:
            mapEneList[0] = 115;
            mapEneList[1] = 116;
            mapEneList[2] = 117;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 146:
            mapEneList[0] = 119;

            mapEneNum = 1;
            minEne = 1;
            maxEne = 1;
            break;
        case 148:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 149:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 150:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 151:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 152:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;

            mapEneNum = 4;
            minEne = 2;
            maxEne = 4;
            break;
        case 153:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;
            mapEneList[4] = 125;
            mapEneList[5] = 126;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 4;
            break;
        case 154:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;
            mapEneList[4] = 125;
            mapEneList[5] = 126;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 4;
            break;
        case 155:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;
            mapEneList[4] = 125;
            mapEneList[5] = 126;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 4;
            break;
        case 156:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;
            mapEneList[4] = 125;
            mapEneList[5] = 126;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 4;
            break;
        case 157:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;
            mapEneList[4] = 125;
            mapEneList[5] = 126;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 4;
            break;
        case 158:
            mapEneList[0] = 121;
            mapEneList[1] = 122;
            mapEneList[2] = 123;
            mapEneList[3] = 124;
            mapEneList[4] = 125;
            mapEneList[5] = 126;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 4;
            break;
        case 163:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 133;
            mapEneList[3] = 134;
            mapEneList[4] = 135;
            mapEneList[5] = 136;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 5;
            break;
        case 164:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 133;
            mapEneList[3] = 134;
            mapEneList[4] = 136;
            mapEneList[5] = 137;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 5;
            break;
        case 165:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 134;
            mapEneList[3] = 135;
            mapEneList[4] = 136;
            mapEneList[5] = 138;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 5;
            break;
        case 166:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 133;
            mapEneList[3] = 134;
            mapEneList[4] = 135;
            mapEneList[5] = 139;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 5;
            break;
        case 167:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 133;
            mapEneList[3] = 135;
            mapEneList[4] = 136;
            mapEneList[5] = 140;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 5;
            break;
        case 168:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 133;
            mapEneList[3] = 134;
            mapEneList[4] = 135;
            mapEneList[5] = 136;

            mapEneNum = 6;
            minEne = 3;
            maxEne = 6;
            break;
        case 169:
            mapEneList[0] = 133;
            mapEneList[1] = 134;
            mapEneList[2] = 135;
            mapEneList[3] = 136;
            mapEneList[4] = 147;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 170:
            mapEneList[0] = 131;
            mapEneList[1] = 132;
            mapEneList[2] = 133;
            mapEneList[3] = 134;
            mapEneList[4] = 135;
            mapEneList[5] = 136;
            mapEneList[6] = 148;

            mapEneNum = 7;
            minEne = 3;
            maxEne = 6;
            break;
        case 171:
            mapEneList[0] = 147;
            mapEneList[1] = 148;
            mapEneList[2] = 149;
            mapEneList[3] = 150;
            mapEneList[4] = 151;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 172:
            mapEneList[0] = 147;
            mapEneList[1] = 148;
            mapEneList[2] = 149;
            mapEneList[3] = 150;
            mapEneList[4] = 151;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 173:
            mapEneList[0] = 147;
            mapEneList[1] = 148;
            mapEneList[2] = 149;
            mapEneList[3] = 150;
            mapEneList[4] = 151;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 175:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 119;
            mapEneList[6] = 153;
            mapEneList[7] = 154;
            mapEneList[8] = 155;
            mapEneList[9] = 156;
            mapEneList[10] = 151;

            mapEneNum = 11;
            minEne = 3;
            maxEne = 6;
            break;
        case 176:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 119;
            mapEneList[6] = 153;
            mapEneList[7] = 154;
            mapEneList[8] = 155;
            mapEneList[9] = 156;
            mapEneList[10] = 151;

            mapEneNum = 11;
            minEne = 3;
            maxEne = 6;
            break;
        case 177:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 119;
            mapEneList[6] = 153;
            mapEneList[7] = 154;
            mapEneList[8] = 155;
            mapEneList[9] = 156;
            mapEneList[10] = 151;

            mapEneNum = 11;
            minEne = 3;
            maxEne = 6;
            break;
        case 178:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 119;
            mapEneList[6] = 153;
            mapEneList[7] = 154;
            mapEneList[8] = 155;
            mapEneList[9] = 156;
            mapEneList[10] = 151;

            mapEneNum = 11;
            minEne = 3;
            maxEne = 6;
            break;
        case 179:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 158;
            mapEneList[6] = 159;

            mapEneNum = 7;
            minEne = 3;
            maxEne = 6;
            break;
        case 180:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 158;
            mapEneList[6] = 159;

            mapEneNum = 7;
            minEne = 3;
            maxEne = 6;
            break;
        case 181:
            mapEneList[0] = 153;
            mapEneList[1] = 154;
            mapEneList[2] = 155;
            mapEneList[3] = 156;
            mapEneList[4] = 151;
            mapEneList[5] = 158;
            mapEneList[6] = 159;

            mapEneNum = 7;
            minEne = 3;
            maxEne = 6;
            break;
        case 184:
            mapEneList[0] = 164;
            mapEneList[1] = 165;
            mapEneList[2] = 166;
            mapEneList[3] = 167;
            mapEneList[4] = 168;

            mapEneNum = 5;
            minEne = 3;
            maxEne = 4;
            break;
        case 186:
            mapEneList[0] = 169;
            mapEneList[1] = 170;

            mapEneNum = 2;
            minEne = 3;
            maxEne = 4;
            break;
        case 187:
            mapEneList[0] = 169;
            mapEneList[1] = 170;

            mapEneNum = 2;
            minEne = 3;
            maxEne = 4;
            break;
        case 188:
            mapEneList[0] = 169;
            mapEneList[1] = 170;

            mapEneNum = 2;
            minEne = 3;
            maxEne = 4;
            break;
        case 189:
            mapEneList[0] = 169;
            mapEneList[1] = 170;
            mapEneList[2] = 172;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        case 190:
            mapEneList[0] = 169;
            mapEneList[1] = 170;
            mapEneList[2] = 172;

            mapEneNum = 3;
            minEne = 3;
            maxEne = 4;
            break;
        default:
            mapEneList[0] = 0;
            mapEneList[1] = 1;

            mapEneNum = 2;
            minEne = 1;
            maxEne = 4;
        }
    }

//-------------------------------------------------------------------------------------------------------
    public void EveBat(int no){

        switch(no){
        case 1:
            mapEneList[0] = 0;
            mapEneList[1] = 0;
            maxEne = 2;
            break;
        case 2:
            mapEneList[0] = 3;
            maxEne = 1;
            break;
        case 3:
            mapEneList[0] = 6;
            maxEne = 1;
            break;
        case 4:
            mapEneList[0] = 11;
            maxEne = 1;
            break;
        case 5:
            mapEneList[0] = 15;
            maxEne = 1;
            break;
        case 6:
            mapEneList[0] = 23;
            mapEneList[1] = 24;
            mapEneList[2] = 23;
            maxEne = 3;
            break;
        case 7:
            mapEneList[0] = 26;
            mapEneList[1] = 26;
            mapEneList[2] = 26;
            mapEneList[3] = 26;
            maxEne = 4;
            break;
        case 8:
            mapEneList[0] = 28;
            mapEneList[1] = 28;
            mapEneList[2] = 28;
            mapEneList[3] = 28;
            maxEne = 4;
            break;
        case 9:
            mapEneList[0] = 29;
            mapEneList[1] = 29;
            mapEneList[2] = 29;
            mapEneList[3] = 29;
            mapEneList[4] = 29;
            mapEneList[5] = 29;
            mapEneList[6] = 29;
            mapEneList[7] = 29;
            maxEne = 8;
            break;
        case 10:
            mapEneList[0] = 30;
            maxEne = 1;
            break;
        case 11:
            mapEneList[0] = 35;
            mapEneList[1] = 35;
            mapEneList[2] = 35;
            mapEneList[3] = 35;
            maxEne = 4;
            break;
        case 12:
            mapEneList[0] = 38;
            maxEne = 1;
            break;
        case 13:
            mapEneList[0] = 43;
            maxEne = 1;
            break;
        case 14:
            mapEneList[0] = 45;
            maxEne = 1;
            break;
        case 15:
            mapEneList[0] = 50;
            maxEne = 1;
            break;
        case 16:
            mapEneList[0] = 52;
            mapEneList[1] = 51;
            maxEne = 2;
            break;
        case 17:
            mapEneList[0] = 56;
            maxEne = 1;
            break;
        case 18:
            mapEneList[0] = 59;
            maxEne = 1;
            break;
        case 19:
            mapEneList[0] = 62;
            maxEne = 1;
            break;
        case 20:
            mapEneList[0] = 64;
            maxEne = 1;
            break;
        case 21:
            mapEneList[0] = 68;
            maxEne = 1;
            break;
        case 22:
            mapEneList[0] = 69;
            maxEne = 1;
            break;
        case 23:
            mapEneList[0] = 76;
            maxEne = 1;
            break;
        case 24:
            mapEneList[0] = 77;
            mapEneList[1] = 78;
            mapEneList[2] = 79;
            maxEne = 3;
            break;
        case 25:
            mapEneList[0] = 84;
            maxEne = 1;
            break;
        case 26:
            mapEneList[0] = 87;
            maxEne = 1;
            break;
        case 27:
            mapEneList[0] = 91;
            maxEne = 1;
            break;
        case 28:
            mapEneList[0] = 100;
            maxEne = 1;
            break;
        case 29:
            mapEneList[0] = 101;
            maxEne = 1;
            break;
        case 30:
            mapEneList[0] = 103;
            mapEneList[1] = 102;
            mapEneList[2] = 104;
            maxEne = 3;
            break;
        case 31:
            mapEneList[0] = 110;
            maxEne = 1;
            break;
        case 32:
            mapEneList[0] = 114;
            maxEne = 1;
            break;
        case 33:
            mapEneList[0] = 118;
            maxEne = 1;
            break;
        case 34:
            mapEneList[0] = 120;
            maxEne = 1;
            break;
        case 35:
            mapEneList[0] = 119;
            maxEne = 1;
            break;
        case 36:
            mapEneList[0] = 127;
            maxEne = 1;
            break;
        case 37:
            mapEneList[0] = 128;
            maxEne = 1;
            break;
        case 38:
            mapEneList[0] = 129;
            maxEne = 1;
            break;
        case 39:
            mapEneList[0] = 130;
            maxEne = 1;
            break;
        case 40:
            mapEneList[0] = 141;
            maxEne = 1;
            break;
        case 41:
            mapEneList[0] = 142;
            maxEne = 1;
            break;
        case 42:
            mapEneList[0] = 143;
            maxEne = 1;
            break;
        case 43:
            mapEneList[0] = 144;
            maxEne = 1;
            break;
        case 44:
            mapEneList[0] = 145;
            maxEne = 1;
            break;
        case 45:
            mapEneList[0] = 146;
            maxEne = 1;
            break;
        case 46:
            mapEneList[0] = 152;
            maxEne = 1;
            break;
        case 47:
            mapEneList[0] = 157;
            maxEne = 1;
            break;
        case 48:
            mapEneList[0] = 160;
            maxEne = 1;
            break;
        case 49:
            mapEneList[0] = 161;
            maxEne = 1;
            break;
        case 50:
            mapEneList[0] = 162;
            maxEne = 1;
            break;
        case 51:
            mapEneList[0] = 163;
            maxEne = 1;
            break;
        case 52:
            mapEneList[0] = 113;
            mapEneList[1] = 113;
            mapEneList[2] = 113;
            mapEneList[3] = 113;
            maxEne = 4;
            break;
        case 53:
            mapEneList[0] = 171;
            maxEne = 1;
            break;
        }
    }
}
public abstract class Event {

	protected int x;
	protected int y;
	protected int chipNo;
	protected int isHit;
	
	
//-------------------------------------------------------------------------------------------------------		
	public Event(int x, int y, int chipNo, int isHit){
		
		this.x = x;
		this.y = y;
		this.chipNo = chipNo;
		this.isHit = isHit;
		
		
	}
	
//-------------------------------------------------------------------------------------------------------		
	 /**
     * イベントを文字列に変換（デバッグ用）
     */
    public String toString() {
        return x + ":" + y + ":" + chipNo + ":" + isHit;
    }
//-------------------------------------------------------------------------------------------------------		
    
}
public class Item {

    public int[] haveItem = new int[5];
    //0 = All : 1 = Rec : 2 = Etc : 3 = Wep : 4 = Gud

    public int no;
    public String name;
    public int price;
    public int usePoint;    //使用可能場所、0どこでも、1戦闘中のみ、2移動中のみ、3使用不可
    public String msg1;
    public String msg2;
    public int efeflm;
    public int useOut;      //0なら無限に使える、1なら1回で壊れる

    public int atk; //回復量、武器攻撃力、防具防御力
    public int iatk;
    public int idef;
    public int str;
    public int agi;
    public int vit;
    public int inte;
    public int luk;
    public int hp;
    public int mp;
    public int hpp;
    public int mpp;

    public int type;    //アイテムの種類
    public int typeMode;    //アイテムリストの表示に使用

    public int tag; //使用できるアイテムの場合のターゲット
                        //  0なら単体1なら全体 10なら味方単体　11なら味方全体 20なら特殊効果

    //武具共通
    public int elm;
    public int anoter;      //追加効果の番号、0なら追加効果なし

    public static final int VIEW_ALL = 100; //全アイテム
    public static final int TYPE_ITEM = 101;    //アイテム
    public static final int TYPE_ETC = 102; //その他
    public static final int TYPE_WEP = 103; //武器
    public static final int TYPE_GURD = 104;    //防具


    public static final int REC_HP_REC = 1;
    public static final int REC_MP_REC = 2;
    public static final int REC_STAT_REC = 3;
    public static final int REC_ALL_REC = 4;
    public static final int REC_DEAD_REC = 5;
    public static final int MOVE_ETC = 6;

    public static final int WEP_SWORD = 10; //剣
    public static final int WEP_CLUB = 11;  //棒
    public static final int WEP_STICK = 12; //杖
    public static final int WEP_AXE = 13;       //斧
    public static final int WEP_KNIFE = 14; //短剣
    public static final int WEP_LANCE = 15; //槍

    public static final int GUD_ARMOR = 30; //鎧
    public static final int GUD_CLOTH = 31; //服
    public static final int GUD_GURD = 32;  //盾
    public static final int GUD_HELM = 33;  //兜
    public static final int GUD_HATR = 34;  //帽子
    public static final int GUD_ACCE = 35;  //アクセサリ

    public static final int ST_SKILL = 500;     //スキル効果
    public static final int ST_ETC = 600;       //特殊効果
    public static final int ST_NONE = 0;        //効果なし

    public int[] shop = new int[8]; //店で並んでる品物

//-------------------------------------------------------------------------------------------------------
    public void ItemList(int nno){
        switch(nno){
        //回復アイテム群----------------------------
        case 0:
            no = nno;
            name = "";
            type = ST_NONE;
            typeMode = TYPE_ITEM;
            usePoint = 3;
            price = 10;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "";
            msg2 = "";
            break;
        case 1:
            no = nno;
            name = "みずあめ";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 30;
            atk = 30;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "飴の甘さで体力回復";
            msg2 = "ＨＰを３０回復する";
            break;
        case 2:
            no = nno;
            name = "りんごあめ";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 400;
            atk = 120;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "リンゴの飴は甘さ格別";
            msg2 = "ＨＰを１２０回復する";
            break;
        case 3:
            no = nno;
            name = "バナナあめ";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 1000;
            atk = 300;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "バナナの飴に疑問をもってはダメ";
            msg2 = "ＨＰを３００回復する";
            break;
        case 4:
            no = nno;
            name = "ジャムパン";
            type = REC_MP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 900;
            atk = 20;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "ジャムの甘い香り";
            msg2 = "ＭＰを２０回復する";
            break;
        case 5:
            no = nno;
            name = "チョコパン";
            type = REC_MP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 6000;
            atk = 50;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "チョコが入った菓子パン";
            msg2 = "ＭＰを５０回復する";
            break;
        case 6:
            no = nno;
            name = "メロンパン";
            type = REC_MP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 10;
            atk = 100;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "メロンは入ってないよ残念";
            msg2 = "ＭＰを１００回復する";
            break;
        case 10:
            no = nno;
            name = "にくまん";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 100;
            atk = 60;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "ほっかほかにくまん　冷めないうちに";
            msg2 = "ＨＰを６０回復する";
            break;
        case 11:
            no = nno;
            name = "あんまん";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 150;
            atk = 70;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "甘いあんこがぎっしり";
            msg2 = "ＨＰを７０回復する";
            break;
        case 12:
            no = nno;
            name = "イチゴ";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 500;
            atk = 150;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "甘酸っぱい青春の味";
            msg2 = "ＨＰを１５０回復する";
            break;
        case 13:
            no = nno;
            name = "リンゴ";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 200;
            atk = 80;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "果汁たっぷり歯ごたえバッチリ";
            msg2 = "ＨＰを８０回復する";
            break;
        case 14:
            no = nno;
            name = "ミカン";
            type = REC_HP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 12000;
            atk = 999;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "幻の愛媛のミカン";
            msg2 = "ＨＰを全回復する";
            break;
        case 15:
            no = nno;
            name = "カボチャ";
            type = REC_MP_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 25000;
            atk = 500;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "ものすごくあまーいカボチャ";
            msg2 = "ＭＰを５００回復する";
            break;
        case 40:
            no = nno;
            name = "栄養ドリンク";
            type = REC_DEAD_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 1000;
            atk = 25;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "これを飲んで滋養強壮";
            msg2 = "戦闘不能回復／ＨＰ２５％回復";
            break;
        case 41:
            no = nno;
            name = "栄養チャージ";
            type = REC_DEAD_REC;
            typeMode = TYPE_ITEM;
            usePoint = 0;
            price = 8000;
            atk = 100;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "どんなに疲れていても一発で元気に";
            msg2 = "戦闘不能回復／ＨＰ全回復";
            break;
        case 50:
            no = nno;
            name = "招き猫";
            type = MOVE_ETC;
            typeMode = TYPE_ETC;
            usePoint = 2;
            price = 2500;
            atk = 0;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "手招きをしている可愛らしい猫";
            msg2 = "外に出るまでエンカウント率上昇";
            break;
        case 51:
            no = nno;
            name = "拒み猫";
            type = MOVE_ETC;
            typeMode = TYPE_ETC;
            usePoint = 2;
            price = 3500;
            atk = 0;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "来ないでーのポーズが可愛らしい猫";
            msg2 = "外に出るまでエンカウント率減少";
            break;
        case 52:
            no = nno;
            name = "脱出トリック";
            type = MOVE_ETC;
            typeMode = TYPE_ETC;
            usePoint = 2;
            price = 1800;
            atk = 0;
            tag = 10;
            useOut = 1;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "どんな状況下でも脱出してしまうトリック";
            msg2 = "ダンジョンから外へワープする";
            break;
        case 60:
            no = nno;
            name = "携帯電話";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "どこにいても電話が出来る優れもの";
            msg2 = "バッテリーが切れててる…";
            break;
        case 61:
            no = nno;
            name = "飯盒";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 2000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "はんごう　ご飯が炊ける黒いヤツ";
            msg2 = "独特のフォルムがたまらない";
            break;
        case 62:
            no = nno;
            name = "汚れたメモ";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "山に囲まれた村　池のほとり";
            msg2 = "と　書いてある";
            break;
        case 63:
            no = nno;
            name = "色あせたメモ";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "歪んだ姫の座の後ろ側";
            msg2 = "と　書いてある";
            break;
        case 64:
            no = nno;
            name = "ビー玉";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 10;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "子供が喜びそうなガラス玉";
            msg2 = "キラキラしてて美しい";
            break;
        case 65:
            no = nno;
            name = "いちご煮";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "ウニとアワビのお吸い物";
            msg2 = "ウニが野イチゴに見えることが名の由来";
            break;
        case 66:
            no = nno;
            name = "ヤマブドウ";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "主に山岳地方で採れる果物";
            msg2 = "熟すと美味しいワインにもなるらしい";
            break;
        case 67:
            no = nno;
            name = "酸素ボンベ";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "ボンベに空気を溜めておけば";
            msg2 = "長時間水に潜っていられそうだ";
            break;
        case 81:
            no = nno;
            name = "通行手形";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "関所を通行するための手形";
            msg2 = "裏には村長の署名がある";
            break;
        case 82:
            no = nno;
            name = "満月の玉";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "漁村で儀式に使われる玉";
            msg2 = "潮の干潮を司っている";
            break;
        case 83:
            no = nno;
            name = "破れた海図";
            type = ST_NONE;
            typeMode = TYPE_ETC;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "破れて色あせてしまっている海図";
            msg2 = "とても強い想いを感じる";
            break;
        case 101:
            no = nno;
            name = "木刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 100;
            atk = 10;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "木で作られた刀";
            msg2 = "攻撃力　１０";
            break;
        case 102:
            no = nno;
            name = "フライパン";
            type = WEP_CLUB;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 200;
            atk = 16;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "鉄製のフライパン";
            msg2 = "攻撃力　１６";
            break;
        case 103:
            no = nno;
            name = "ダガー";
            type = WEP_KNIFE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 400;
            atk = 24;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "切れ味のあるナイフ";
            msg2 = "攻撃力　２４";
            break;
        case 104:
            no = nno;
            name = "鉄の剣";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 1000;
            atk = 36;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "鉄で出来た丈夫な剣";
            msg2 = "攻撃力　３６";
            break;
        case 105:
            no = nno;
            name = "紅蓮のナイフ";
            type = WEP_KNIFE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 2000;
            atk = 30;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_FIRE;
            anoter = 0;
            msg1 = "赤々と燃えるような色のナイフ";
            msg2 = "攻撃力　３０　火属性";
            break;
        case 106:
            no = nno;
            name = "サーベル";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 1800;
            atk = 50;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "両刃の剣";
            msg2 = "攻撃力　５０";
            break;
        case 107:
            no = nno;
            name = "アイスブレイド";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 4000;
            atk = 64;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WATR;
            anoter = 0;
            msg1 = "刃先が氷のように冷たい剣";
            msg2 = "攻撃力　６４　水属性";
            break;
        case 108:
            no = nno;
            name = "フランベルジュ";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 2700;
            atk = 70;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "名前の響きがかっこいい";
            msg2 = "攻撃力　７０";
            break;
        case 109:
            no = nno;
            name = "白いナイフ";
            type = WEP_KNIFE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 6000;
            atk = 66;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_HOLY;
            anoter = 10;
            msg1 = "真っ白に輝くナイフ";
            msg2 = "攻撃力　６６　ＩｎｔＬｕｋ上昇　光属性";
            break;
        case 110:
            no = nno;
            name = "魔術師の杖";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 3000;
            atk = 40;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 9;
            msg1 = "魔術師が魔力を高めるために持つ杖";
            msg2 = "攻撃力　４０　Ｉｎｔ＋２０";
            break;
        case 111:
            no = nno;
            name = "マウントソード";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 4300;
            atk = 88;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "山をも砕く大剣…らしい";
            msg2 = "攻撃力　８８";
            break;
        case 112:
            no = nno;
            name = "ウォーアクス";
            type = WEP_AXE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 6000;
            atk = 100;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 15;
            msg1 = "戦闘用の斧";
            msg2 = "攻撃力１００　Ｓｔｒ＋１０Ａｇｉ－３０";
            break;
        case 113:
            no = nno;
            name = "闇夜のつるぎ";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 3300;
            atk = 58;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_DARK;
            anoter = 17;
            msg1 = "漆黒の闇に染まるなんとか";
            msg2 = "攻撃力　５８　Ｉｎｔ－１０ 闇属性";
            break;
        case 114:
            no = nno;
            name = "カタナ";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 8800;
            atk = 108;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "最高の機能美を誇る武器";
            msg2 = "攻撃力１０８";
            break;
        case 115:
            no = nno;
            name = "マインドワンド";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 10000;
            atk = 60;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 1;
            msg1 = "精神力を高めてくれる杖";
            msg2 = "攻撃力　６０　Ｉｎｔ＋３０";
            break;
        case 116:
            no = nno;
            name = "断崖剣";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 11000;
            atk = 114;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_ERTH;
            anoter = 0;
            msg1 = "一太刀で断崖を生み出せるらしい";
            msg2 = "攻撃力１１４　土属性";
            break;
        case 117:
            no = nno;
            name = "古代人の剣";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 12000;
            atk = 122;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 21;
            msg1 = "古代人の知恵が込められた剣";
            msg2 = "攻撃力１２２　Ｉｎｔ＋１０";
            break;
        case 118:
            no = nno;
            name = "名工の刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 14000;
            atk = 140;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "名工と呼ばれる者が鍛えた刀";
            msg2 = "攻撃力１４０";
            break;
        case 119:
            no = nno;
            name = "火炎の太刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 16000;
            atk = 145;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_FIRE;
            anoter = 0;
            msg1 = "真っ赤な炎に包まれた刀";
            msg2 = "攻撃力１４５　火属性";
            break;
        case 120:
            no = nno;
            name = "水流の太刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 16000;
            atk = 145;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WATR;
            anoter = 0;
            msg1 = "流れる水のように透き通った刀";
            msg2 = "攻撃力１４５　水属性";
            break;
        case 121:
            no = nno;
            name = "清き水の杖";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 16000;
            atk = 112;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WATR;
            anoter = 1;
            msg1 = "清らかな水で心身が研ぎ澄まされる";
            msg2 = "攻撃力１１２　Ｉｎｔ＋３０　水属性";
            break;
        case 122:
            no = nno;
            name = "黒の剣";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 20000;
            atk = 146;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_DARK;
            anoter = 0;
            msg1 = "刀身が真っ黒な剣";
            msg2 = "攻撃力１４６　闇属性";
            break;
        case 123:
            no = nno;
            name = "白い杖";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 20000;
            atk = 120;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_HOLY;
            anoter = 27;
            msg1 = "一点の濁りもないほど澄み切った白";
            msg2 = "攻撃力１２０　Ｉｎｔ＋４０　光属性";
            break;
        case 124:
            no = nno;
            name = "無名の名刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 23000;
            atk = 158;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "名前など飾りです";
            msg2 = "攻撃力１５８";
            break;
        case 125:
            no = nno;
            name = "ルーの槍";
            type = WEP_LANCE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 30000;
            atk = 190;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 30;
            msg1 = "太陽神ルーの槍、別名ブリューナク";
            msg2 = "攻撃力１９０　ＨＰＭＰ－５％";
            break;
        case 126:
            no = nno;
            name = "ブリギッドの杖";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 30000;
            atk = 133;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 31;
            msg1 = "女神ブリギッドの加護がある杖";
            msg2 = "攻撃力１３３　Ｉｎｔ＋４０　ＭＰ＋３％";
            break;
        case 127:
            no = nno;
            name = "風雷の剣";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 0;
            atk = 185;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WIND;
            anoter = 13;
            msg1 = "三種の神器のひとつ　風の力を宿す";
            msg2 = "攻撃力１８５　Ａｇｉ＋１０　風属性";
            break;
        case 128:
            no = nno;
            name = "ビッグメイス";
            type = WEP_CLUB;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 28000;
            atk = 177;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "名前の通り巨大な棒";
            msg2 = "攻撃力１７７";
            break;
        case 129:
            no = nno;
            name = "斬月刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 46000;
            atk = 200;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "月をも斬れるなんとかかんとか";
            msg2 = "攻撃力２００";
            break;
        case 130:
            no = nno;
            name = "ビナーの杖";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 65000;
            atk = 164;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 33;
            msg1 = "生命の樹ビナーから作られた杖";
            msg2 = "攻撃力１６４　Ｉｎｔ＋４０　ＭＰ＋５％";
            break;
        case 131:
            no = nno;
            name = "ダインスレイヴ";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 120000;
            atk = 240;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_DARK;
            anoter = 18;
            msg1 = "人の血を吸うと言われている魔剣";
            msg2 = "攻撃力２４０　ＡＬＬ＋５　闇属性";
            break;
        case 132:
            no = nno;
            name = "ヤグルシ";
            type = WEP_CLUB;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 110000;
            atk = 248;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 36;
            msg1 = "追放を意味する武器";
            msg2 = "攻撃力２４８　ＡｇｉＩｎｔＭＰ上昇";
            break;
        case 133:
            no = nno;
            name = "アイムール";
            type = WEP_CLUB;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 110000;
            atk = 256;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 37;
            msg1 = "撃退を意味する武器";
            msg2 = "攻撃力２５６　ＳｔｒＶｉｔＬｕｋ上昇";
            break;
        case 134:
            no = nno;
            name = "ケリュケイオン";
            type = WEP_STICK;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 120000;
            atk = 187;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_HOLY;
            anoter = 38;
            msg1 = "神々の伝令使ヘルメスの杖";
            msg2 = "攻撃力１８７　ＩｎｔＶｉｔＭＰ上昇";
            break;
        case 135:
            no = nno;
            name = "クラウ・ソラス";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 150000;
            atk = 260;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_HOLY;
            anoter = 42;
            msg1 = "光の剣、炎の剣を意味する魔剣";
            msg2 = "攻撃力２６０　ＡＬＬ＋１０　光属性";
            break;
        case 136:
            no = nno;
            name = "キングダム";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 200000;
            atk = 273;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 43;
            msg1 = "王国という名の宝剣";
            msg2 = "攻撃力２７３　ＩｎｔＬｕｋＭＰ上昇";
            break;
        case 137:
            no = nno;
            name = "フリーダム";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 250000;
            atk = 300;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 18;
            msg1 = "自由という名の名剣";
            msg2 = "攻撃力３００　ＡＬＬ＋５";
            break;
        case 138:
            no = nno;
            name = "漆黒の鎌";
            type = WEP_AXE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 0;
            atk = 330;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_DARK;
            anoter = 46;
            msg1 = "真っ黒に染まった大きな鎌";
            msg2 = "攻撃力３３０　ＡＬＬ＋１５　闇属性";
            break;
        case 139:
            no = nno;
            name = "赤い刀";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 22000;
            atk = 290;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_FIRE;
            anoter = 47;
            msg1 = "赤く染まった刀";
            msg2 = "攻撃力２９０　ＤＥＦ－８０　STR＋８０";
            break;
        case 140:
            no = nno;
            name = "青い斧";
            type = WEP_AXE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 22000;
            atk = 290;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WATR;
            anoter = 48;
            msg1 = "青く澄んだ斧";
            msg2 = "攻撃力２９０　Ｖｉｔ－８０　Ｉｎｔ＋８０";
            break;
        case 141:
            no = nno;
            name = "緑の槍";
            type = WEP_LANCE;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 22000;
            atk = 290;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_ERTH;
            anoter = 49;
            msg1 = "緑が映える槍";
            msg2 = "攻撃力２９０　Ａｇｉ－８０　Ｖｉｔ＋８０";
            break;
        case 201:
            no = nno;
            name = "売ってください";
            type = WEP_SWORD;
            typeMode = TYPE_WEP;
            usePoint = 3;
            price = 6000;
            atk = 1;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "データテーブル変更につき";
            msg2 = "このアイテムは効果なくなりました";
            break;
        case 251:
            no = nno;
            name = "耐える指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 12000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 3;
            msg1 = "耐える力を与えてくれる指輪";
            msg2 = "ＨＰが１０％増える";
            break;
        case 252:
            no = nno;
            name = "魔力の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 12000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 4;
            msg1 = "魔力がみなぎってくる指輪";
            msg2 = "ＭＰが１０％増える";
            break;
        case 253:
            no = nno;
            name = "力の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 5;
            msg1 = "力がみなぎってくる指輪";
            msg2 = "Ｓｔｒ＋２０";
            break;
        case 254:
            no = nno;
            name = "はやての指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 6;
            msg1 = "体が身軽になる指輪";
            msg2 = "Ａｇｉ＋２０";
            break;
        case 255:
            no = nno;
            name = "体力の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 7;
            msg1 = "体力がみなぎってくる指輪";
            msg2 = "Ｖｉｔ＋２０";
            break;
        case 256:
            no = nno;
            name = "知恵の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 9;
            msg1 = "知恵がみなぎってくる指輪";
            msg2 = "Ｉｎｔ＋２０";
            break;
        case 257:
            no = nno;
            name = "幸運の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 8;
            msg1 = "幸運を運んでくれる指輪";
            msg2 = "Ｌｕｋ＋２０";
            break;
        case 258:
            no = nno;
            name = "少女のお守り";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 0;
            atk = 2;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 12;
            msg1 = "少女の真心がこもったお守り";
            msg2 = "防御力　２　ＨＰ＋５％　ＭＰ＋２％";
            break;
        case 259:
            no = nno;
            name = "火のネックレス";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 22;
            anoter = 0;
            msg1 = "火に強く水に弱くなる";
            msg2 = "火を無効　水耐性－１００％";
            break;
        case 260:
            no = nno;
            name = "水のネックレス";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 32;
            anoter = 0;
            msg1 = "水に強く風に弱くなる";
            msg2 = "水を無効　風耐性－１００％";
            break;
        case 261:
            no = nno;
            name = "風のネックレス";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 42;
            anoter = 0;
            msg1 = "風に強く土に弱くなる";
            msg2 = "風を無効　土耐性－１００％";
            break;
        case 262:
            no = nno;
            name = "土のネックレス";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 52;
            anoter = 0;
            msg1 = "土に強く火に弱くなる";
            msg2 = "土を無効　火耐性－１００％";
            break;
        case 263:
            no = nno;
            name = "青い指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 50;
            atk = 1;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 16;
            msg1 = "青色のおもちゃの指輪";
            msg2 = "防御力　　１　Ｌｕｋ＋５";
            break;
        case 264:
            no = nno;
            name = "精霊の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 13000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 22;
            msg1 = "精霊の魂が込められた指輪";
            msg2 = "ＨＰ＋６％　ＭＰ＋６％";
            break;
        case 265:
            no = nno;
            name = "紅蓮の勾玉";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 23;
            msg1 = "三種の神器のひとつ　真っ赤な勾玉";
            msg2 = "Ｓｔｒ＋１０　Ｉｎｔ＋１０";
            break;
        case 266:
            no = nno;
            name = "紺碧の水晶";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 24;
            msg1 = "三種の神器のひとつ　青色の水晶";
            msg2 = "ＨＰ＋１０％　Ｉｎｔ＋１０";
            break;
        case 267:
            no = nno;
            name = "猪突猛進リング";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 32;
            msg1 = "ただ前だけを見つめているシンボル";
            msg2 = "ＨＰ＋２０％　ＭＰ－２０％";
            break;
        case 268:
            no = nno;
            name = "光のリング";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 20000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_HOLY;
            anoter = 40;
            msg1 = "光に満ち溢れたリング";
            msg2 = "ＨＰ＋３％　光属性";
            break;
        case 269:
            no = nno;
            name = "闇のリング";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 20000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_DARK;
            anoter = 41;
            msg1 = "闇が溢れ出したリング";
            msg2 = "ＭＰ＋３％　闇属性";
            break;
        case 270:
            no = nno;
            name = "ライトピアス";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 30000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 72;
            anoter = 0;
            msg1 = "光の力に守られ闇を遮断する";
            msg2 = "闇耐性　７０％";
            break;
        case 271:
            no = nno;
            name = "ダークピアス";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 30000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 63;
            anoter = 0;
            msg1 = "闇の力の守られ光を遮断する";
            msg2 = "光耐性　７０％";
            break;
        case 272:
            no = nno;
            name = "姫の心得";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 60000;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 45;
            msg1 = "姫は本来おしとやかなはず…";
            msg2 = "ＳｔｒＶｉｔＩｎｔ＋２０";
            break;
        case 273:
            no = nno;
            name = "退魔の指輪";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 74;
            anoter = 21;
            msg1 = "魔を退ける効果のある指輪";
            msg2 = "Ｉｎｔ＋１０　闇耐性１０％";
            break;
        case 274:
            no = nno;
            name = "冒険の思い出";
            type = GUD_ACCE;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 86;
            anoter = 42;
            msg1 = "世界の果ては見つからなくても…";
            msg2 = "全耐性２０％　ＡＬＬ＋１０";
            break;
        case 301:
            no = nno;
            name = "厚手の服";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 60;
            atk = 4;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "生地が厚くて暖かい";
            msg2 = "防御力　　４";
            break;
        case 302:
            no = nno;
            name = "シルクのローブ";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 260;
            atk = 10;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "シルクの肌触りが心地よい";
            msg2 = "防御力　１０";
            break;
        case 303:
            no = nno;
            name = "鉄の鎧";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 800;
            atk = 16;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "鉄で出来た頑丈な鎧";
            msg2 = "防御力　１６";
            break;
        case 304:
            no = nno;
            name = "ハードメイル";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 1500;
            atk = 21;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "ちょっと堅めな鎧";
            msg2 = "防御力　２１";
            break;
        case 305:
            no = nno;
            name = "鋼鉄の鎧";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 2100;
            atk = 28;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "鋼鉄で出来た頑丈な鎧";
            msg2 = "防御力　２８";
            break;
        default:
            no = nno;
            name = "";
            type = ST_NONE;
            typeMode = TYPE_ITEM;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "";
            msg2 = "";

        }
        Battle.efeNo = no + Battle.ITEM_EFE_NO;
        Battle.efeFlame = efeflm;

        if(nno > 305){
            ItemList100(nno);
        }
    }
//-------------------------------------------------------------------------------------------------------
    public void ItemList100(int nno){

        switch(nno){
        case 306:
            no = nno;
            name = "魔術師のローブ";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 3400;
            atk = 20;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 11;
            msg1 = "魔術師としてのパワーがみなぎってくる";
            msg2 = "防御力　２０　Ｉｎｔ＋５　ＭＰ＋３％";
            break;
        case 307:
            no = nno;
            name = "疾風の服";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 5000;
            atk = 30;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WIND;
            anoter = 13;
            msg1 = "とても身軽になれる服";
            msg2 = "防御力　３０　Ａｇｉ＋１０　風属性";
            break;
        case 308:
            no = nno;
            name = "大地の服";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 6000;
            atk = 30;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_ERTH;
            anoter = 14;
            msg1 = "大地の力を得た服";
            msg2 = "防御力　３０　ＨＰ基本値＋１０　土属性";
            break;
        case 309:
            no = nno;
            name = "グランアーマー";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 5800;
            atk = 32;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "非常に頑丈に作られた鎧";
            msg2 = "防御力　３２";
            break;
        case 310:
            no = nno;
            name = "重厚鎧";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 6200;
            atk = 60;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 19;
            msg1 = "攻撃を捨てて防御に徹した鎧";
            msg2 = "防御力　６０　ＳｔｒＡｇｉＩｎｔ－３０";
            break;
        case 311:
            no = nno;
            name = "水色の服";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 7000;
            atk = 34;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WATR;
            anoter = 0;
            msg1 = "涼しげな水色をした服";
            msg2 = "防御力　３４　水属性";
            break;
        case 312:
            no = nno;
            name = "白い羽織";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 7800;
            atk = 40;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "とにかくかっこいい";
            msg2 = "防御力　４０";
            break;
        case 313:
            no = nno;
            name = "クマの毛皮";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 14000;
            atk = 48;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 26;
            msg1 = "もふもふして暖かい毛皮";
            msg2 = "防御力　４８　Ｉｎｔ＋１０　ＭＰ＋５％";
            break;
        case 314:
            no = nno;
            name = "ベレヌスの鎧";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 17000;
            atk = 52;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 62;
            anoter = 0;
            msg1 = "ベレヌス神の加護がある鎧";
            msg2 = "防御力　５２　光耐性２０％　闇に弱い";
            break;
        case 315:
            no = nno;
            name = "白の服";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 28000;
            atk = 65;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 26;
            msg1 = "魔力が込められた真っ白い服";
            msg2 = "防御力　６５　Ｉｎｔ＋１０　ＭＰ＋５％";
            break;
        case 316:
            no = nno;
            name = "天使の白衣";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 84000;
            atk = 73;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 61;
            anoter = 26;
            msg1 = "天使の愛用している白衣";
            msg2 = "防御力　７３　ＩｎｔＭＰ上昇　光耐性";
            break;
        case 317:
            no = nno;
            name = "ライトクロス";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 87000;
            atk = 75;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 61;
            anoter = 0;
            msg1 = "光り輝いている服";
            msg2 = "防御力　７５　光耐性３０％";
            break;
        case 318:
            no = nno;
            name = "力の鎧";
            type = GUD_ARMOR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 72000;
            atk = 80;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 25;
            msg1 = "力が湧いてくる鎧";
            msg2 = "防御力　８０　Ｓｔｒ＋１０";
            break;
        case 319:
            no = nno;
            name = "海神の衣";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 90000;
            atk = 90;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 31;
            anoter = 21;
            msg1 = "海神の力が込められている服";
            msg2 = "防御力　９０　Ｉｎｔ＋１０　水耐性５０％";
            break;
        case 320:
            no = nno;
            name = "黒の着物";
            type = GUD_CLOTH;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 98000;
            atk = 95;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 73;
            anoter = 26;
            msg1 = "暗闇で染められた着物";
            msg2 = "防御力　９５　ＩｎｔＭｐ上昇　闇耐性";
            break;
        case 401:
            no = nno;
            name = "可愛いリボン";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 120;
            atk = 2;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "可愛らしいリボン";
            msg2 = "防御力　　２";
            break;
        case 402:
            no = nno;
            name = "きれいな帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 400;
            atk = 4;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "こぎれいな帽子";
            msg2 = "防御力　　４";
            break;
        case 403:
            no = nno;
            name = "風切る帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 1000;
            atk = 3;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_WIND;
            anoter = 2;
            msg1 = "風の力が宿った帽子";
            msg2 = "防御力　　３　Ａｇｉ＋５　風属性";
            break;
        case 404:
            no = nno;
            name = "バンダナ";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 1000;
            atk = 8;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "おしゃれなバンダナ";
            msg2 = "防御力　　８";
            break;
        case 405:
            no = nno;
            name = "天使のリボン";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 5000;
            atk = 10;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 61;
            anoter = 18;
            msg1 = "天使の愛用しているリボン";
            msg2 = "防御力　１０　ＡＬＬ＋５　光耐性３０％";
            break;
        case 406:
            no = nno;
            name = "羽帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 3200;
            atk = 14;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "羽がついたおしゃれな帽子";
            msg2 = "防御力　１４";
            break;
        case 407:
            no = nno;
            name = "ハチマキ";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 4000;
            atk = 21;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "つけてると元気になってくる";
            msg2 = "防御力　２１";
            break;
        case 408:
            no = nno;
            name = "エポナの帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 10000;
            atk = 30;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 28;
            msg1 = "女神エポナの加護がある帽子";
            msg2 = "防御力　３０　ＨＰ＋５％　ＭＰ－５％";
            break;
        case 409:
            no = nno;
            name = "ダヌの髪飾り";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 12300;
            atk = 32;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 29;
            msg1 = "女神ダヌの祈りが込められた髪飾り";
            msg2 = "防御力　３２　ＨＰ－５％　ＭＰ＋５％";
            break;
        case 410:
            no = nno;
            name = "黒の帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 25000;
            atk = 48;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "黒くおしゃれな帽子";
            msg2 = "防御力　４８";
            break;
        case 411:
            no = nno;
            name = "ニュクスの帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 50000;
            atk = 60;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 84;
            anoter = 34;
            msg1 = "夜の女神ニュクスの帽子";
            msg2 = "防御力　６０　ＭＰ＋５％　光闇耐性";
            break;
        case 412:
            no = nno;
            name = "ヘーメラの帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 50000;
            atk = 60;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 85;
            anoter = 35;
            msg1 = "昼の女神ヘーメラーの帽子";
            msg2 = "防御力　６０　ＨＰ＋５％　光闇耐性";
            break;
        case 413:
            no = nno;
            name = "カフヴァール";
            type = GUD_HELM;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 60000;
            atk = 62;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 61;
            anoter = 39;
            msg1 = "太陽神ルーが持つとされる兜";
            msg2 = "防御力　６２　ＡｇｉＶｉｔ＋１０　光耐性";
            break;
        case 414:
            no = nno;
            name = "大地の帽子";
            type = GUD_HATR;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 70000;
            atk = 65;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 53;
            anoter = 44;
            msg1 = "大地の温もりがする帽子";
            msg2 = "防御力　６５　土耐性５０％　Ｖｉｔ＋１０";
            break;
        case 451:
            no = nno;
            name = "きれいな腕輪";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 380;
            atk = 2;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "こぎれいな腕輪";
            msg2 = "防御力　　２";
            break;
        case 452:
            no = nno;
            name = "銅の腕輪";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 500;
            atk = 3;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "銅で作られた腕輪";
            msg2 = "防御力　　３";
            break;
        case 453:
            no = nno;
            name = "鉄の盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 750;
            atk = 8;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "鉄で作られた丈夫そうな盾";
            msg2 = "防御力　　８";
            break;
        case 454:
            no = nno;
            name = "フレイムガード";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 2000;
            atk = 6;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 21;
            anoter = 0;
            msg1 = "防御力が少ない代わりに炎から身を守る";
            msg2 = "防御力　　６　火耐性５０％";
            break;
        case 455:
            no = nno;
            name = "ホーリーガード";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 5000;
            atk = 8;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 61;
            anoter = 0;
            msg1 = "聖なる光の加護がある盾";
            msg2 = "防御力　　８　光耐性３０％";
            break;
        case 456:
            no = nno;
            name = "鋼鉄の盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 2200;
            atk = 12;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "鋼鉄で出来た頑丈な盾";
            msg2 = "防御力　１２";
            break;
        case 457:
            no = nno;
            name = "大地の腕輪";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 1800;
            atk = 4;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_ERTH;
            anoter = 0;
            msg1 = "大地の祈りが込められている";
            msg2 = "防御力　　４　土属性";
            break;
        case 458:
            no = nno;
            name = "天使の腕輪";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 6000;
            atk = 8;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 61;
            anoter = 20;
            msg1 = "天使の愛用している腕輪";
            msg2 = "防御力　　８　ＭＰ基本値＋１０　光耐性";
            break;
        case 459:
            no = nno;
            name = "四大元素の盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 4200;
            atk = 20;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 81;
            anoter = 0;
            msg1 = "四大元素の力が込められた盾";
            msg2 = "防御力　２０　火水風土耐性２０％";
            break;
        case 460:
            no = nno;
            name = "黒い盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 8000;
            atk = 25;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 71;
            anoter = 0;
            msg1 = "真っ黒く染められた盾";
            msg2 = "防御力　２５　闇耐性３０％";
            break;
        case 461:
            no = nno;
            name = "耐火シールド";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 5500;
            atk = 24;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 23;
            anoter = 0;
            msg1 = "火とともに生きる人々が作った盾";
            msg2 = "防御力　２４　火耐性２５％";
            break;
        case 462:
            no = nno;
            name = "力の腕輪";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 8000;
            atk = 20;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 25;
            msg1 = "力がこみ上げてくる腕輪";
            msg2 = "防御力　２０　Ｓｔｒ＋１０";
            break;
        case 463:
            no = nno;
            name = "水面の盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 8800;
            atk = 22;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 31;
            anoter = 0;
            msg1 = "水面（みなも）の様な綺麗な盾";
            msg2 = "防御力　２２　水耐性５０％";
            break;
        case 464:
            no = nno;
            name = "ケヒトの盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 12000;
            atk = 34;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 8;
            msg1 = "ディアン・ケヒト神の加護がある盾";
            msg2 = "防御力　３４　Ｌｕｋ＋２０";
            break;
        case 465:
            no = nno;
            name = "ブレイブガード";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 27000;
            atk = 54;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "勇気の印のついた盾";
            msg2 = "防御力　５４";
            break;
        case 466:
            no = nno;
            name = "アイギス";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 50000;
            atk = 68;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 86;
            anoter = 21;
            msg1 = "女神アテネが持つとされる盾";
            msg2 = "防御力　６８　全耐性２０％　Ｉｎｔ＋１０";
            break;
        case 467:
            no = nno;
            name = "風神の腕輪";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 60000;
            atk = 64;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 43;
            anoter = 13;
            msg1 = "風神の力が込められている腕輪";
            msg2 = "防御力　６４　風耐性５０％　ＡＧＩ＋１０";
            break;
        case 468:
            no = nno;
            name = "火竜の盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 60000;
            atk = 70;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 21;
            anoter = 25;
            msg1 = "火竜の守護が得られる盾";
            msg2 = "防御力　７０　火耐性５０％　Ｓｔｒ＋１０";
            break;
        case 469:
            no = nno;
            name = "捻くれの盾";
            type = GUD_GURD;
            typeMode = TYPE_GURD;
            usePoint = 3;
            price = 90000;
            atk = 10;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = 87;
            anoter = 0;
            msg1 = "強いのか弱いのか分からない盾";
            msg2 = "防御力　１０　無属性耐性　他属性に弱い";
            break;
        default:
            no = nno;
            name = "";
            type = ST_NONE;
            typeMode = TYPE_ITEM;
            usePoint = 3;
            price = 0;
            atk = 0;
            tag = 10;
            useOut = 0;
            efeflm = 1;
            elm = Battle.ELM_NULL;
            anoter = 0;
            msg1 = "";
            msg2 = "";

        }

        Battle.efeNo = no + Battle.ITEM_EFE_NO;
        Battle.efeFlame = efeflm;

    }

//-------------------------------------------------------------------------------------------------------
    public void ShopList(int no){
        switch(no){
        case 1:
            shop[0] = 1;
            shop[1] = 2;
            shop[2] = 101;
            shop[3] = 102;
            shop[4] = 301;
            shop[5] = 0;
            shop[6] = 0;
            shop[7] = 0;
            break;
        case 2:
            shop[0] = 1;
            shop[1] = 101;
            shop[2] = 0;
            shop[3] = 0;
            shop[4] = 0;
            shop[5] = 0;
            shop[6] = 0;
            shop[7] = 0;
            break;
        case 3:
            shop[0] = 1;
            shop[1] = 2;
            shop[2] = 101;
            shop[3] = 102;
            shop[4] = 103;
            shop[5] = 301;
            shop[6] = 401;
            shop[7] = 0;
            break;
        case 4:
            shop[0] = 1;
            shop[1] = 2;
            shop[2] = 103;
            shop[3] = 104;
            shop[4] = 301;
            shop[5] = 302;
            shop[6] = 402;
            shop[7] = 451;
            break;
        case 5:
            shop[0] = 1;
            shop[1] = 2;
            shop[2] = 40;
            shop[3] = 104;
            shop[4] = 106;
            shop[5] = 303;
            shop[6] = 402;
            shop[7] = 453;
            break;
        case 6:
            shop[0] = 1;
            shop[1] = 2;
            shop[2] = 40;
            shop[3] = 108;
            shop[4] = 110;
            shop[5] = 304;
            shop[6] = 404;
            shop[7] = 453;
            break;
        case 7:
            shop[0] = 2;
            shop[1] = 3;
            shop[2] = 40;
            shop[3] = 111;
            shop[4] = 110;
            shop[5] = 305;
            shop[6] = 306;
            shop[7] = 404;
            break;
        case 8:
            shop[0] = 2;
            shop[1] = 3;
            shop[2] = 40;
            shop[3] = 114;
            shop[4] = 115;
            shop[5] = 309;
            shop[6] = 306;
            shop[7] = 456;
            break;
        case 9:
            shop[0] = 3;
            shop[1] = 4;
            shop[2] = 40;
            shop[3] = 118;
            shop[4] = 115;
            shop[5] = 312;
            shop[6] = 407;
            shop[7] = 461;
            break;
        case 10:
            shop[0] = 1;
            shop[1] = 2;
            shop[2] = 3;
            shop[3] = 4;
            shop[4] = 40;
            shop[5] = 50;
            shop[6] = 51;
            shop[7] = 52;
            break;
        case 11:
            shop[0] = 3;
            shop[1] = 4;
            shop[2] = 40;
            shop[3] = 121;
            shop[4] = 124;
            shop[5] = 314;
            shop[6] = 408;
            shop[7] = 464;
            break;
        case 12:
            shop[0] = 3;
            shop[1] = 4;
            shop[2] = 5;
            shop[3] = 40;
            shop[4] = 41;
            shop[5] = 50;
            shop[6] = 51;
            shop[7] = 52;
            break;
        case 13:
            shop[0] = 314;
            shop[1] = 408;
            shop[2] = 409;
            shop[3] = 464;
            shop[4] = 259;
            shop[5] = 260;
            shop[6] = 261;
            shop[7] = 262;
            break;
        case 14:
            shop[0] = 3;
            shop[1] = 40;
            shop[2] = 128;
            shop[3] = 121;
            shop[4] = 314;
            shop[5] = 408;
            shop[6] = 409;
            shop[7] = 464;
            break;
        case 15:
            shop[0] = 3;
            shop[1] = 4;
            shop[2] = 5;
            shop[3] = 41;
            shop[4] = 129;
            shop[5] = 315;
            shop[6] = 410;
            shop[7] = 465;
            break;
        case 16:
            shop[0] = 3;
            shop[1] = 4;
            shop[2] = 5;
            shop[3] = 41;
            shop[4] = 50;
            shop[5] = 51;
            shop[6] = 316;
            shop[7] = 317;
            break;
        case 17:
            shop[0] = 2;
            shop[1] = 3;
            shop[2] = 4;
            shop[3] = 5;
            shop[4] = 40;
            shop[5] = 41;
            shop[6] = 51;
            shop[7] = 52;
            break;
        }
    }

//-------------------------------------------------------------------------------------------------------
    public void AnotherParm(int no){
        switch(no){
        case 0:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 1:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 30;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 2:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 5;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 3:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 10;
            mpp = 0;
            break;
        case 4:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 10;
            break;
        case 5:
            iatk = 0;
            idef = 0;
            str = 20;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 6:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 20;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 7:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 20;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 8:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 20;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 9:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 20;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 10:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 10;
            luk = 10;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 11:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 5;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 3;
            break;
        case 12:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 5;
            mpp = 2;
            break;
        case 13:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 10;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 14:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 10;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 15:
            iatk = 0;
            idef = 0;
            str = 10;
            agi = -30;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 16:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 5;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 17:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = -10;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 18:
            iatk = 0;
            idef = 0;
            str = 5;
            agi = 5;
            vit = 5;
            inte = 5;
            luk = 5;
            hp = 5;
            mp = 5;
            hpp = 0;
            mpp = 0;
            break;
        case 19:
            iatk = 0;
            idef = 0;
            str = -30;
            agi = -30;
            vit = 0;
            inte = -30;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 20:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 10;
            hpp = 0;
            mpp = 0;
            break;
        case 21:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 10;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 22:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 6;
            mpp = 6;
            break;
        case 23:
            iatk = 0;
            idef = 0;
            str = 10;
            agi = 0;
            vit = 0;
            inte = 10;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 24:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 10;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 10;
            mpp = 0;
            break;
        case 25:
            iatk = 0;
            idef = 0;
            str = 10;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 26:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 10;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 5;
            break;
        case 27:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 40;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 28:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 5;
            mpp = -5;
            break;
        case 29:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = -5;
            mpp = 5;
            break;
        case 30:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = -5;
            mpp = -5;
            break;
        case 31:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 40;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 3;
            break;
        case 32:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 20;
            mpp = -20;
            break;
        case 33:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 40;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 5;
            break;
        case 34:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 5;
            break;
        case 35:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 5;
            mpp = 0;
            break;
        case 36:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 10;
            vit = 0;
            inte = 10;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 10;
            break;
        case 37:
            iatk = 0;
            idef = 0;
            str = 10;
            agi = 0;
            vit = 10;
            inte = 0;
            luk = 10;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 38:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 10;
            inte = 40;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 10;
            break;
        case 39:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 10;
            vit = 10;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 40:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 3;
            mpp = 0;
            break;
        case 41:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 3;
            break;
        case 42:
            iatk = 0;
            idef = 0;
            str = 10;
            agi = 10;
            vit = 10;
            inte = 10;
            luk = 10;
            hp = 10;
            mp = 10;
            hpp = 0;
            mpp = 0;
            break;
        case 43:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 0;
            inte = 20;
            luk = 20;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 5;
            break;
        case 44:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = 10;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 45:
            iatk = 0;
            idef = 0;
            str = 20;
            agi = 0;
            vit = 20;
            inte = 20;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 46:
            iatk = 0;
            idef = 0;
            str = 15;
            agi = 15;
            vit = 15;
            inte = 15;
            luk = 15;
            hp = 15;
            mp = 15;
            hpp = 0;
            mpp = 0;
            break;
        case 47:
            iatk = 0;
            idef = -80;
            str = 80;
            agi = 0;
            vit = 0;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 48:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = 0;
            vit = -80;
            inte = 80;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
        case 49:
            iatk = 0;
            idef = 0;
            str = 0;
            agi = -80;
            vit = 80;
            inte = 0;
            luk = 0;
            hp = 0;
            mp = 0;
            hpp = 0;
            mpp = 0;
            break;
            import com.nttdocomo.ui.Graphics;

public class ItemEvent {
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 所持アイテムの更新
	 */
	public void Reflesh(){
		
		Cmn.item.haveItem[0] = 0;
		Cmn.item.haveItem[1] = 0;
		Cmn.item.haveItem[2] = 0;
		Cmn.item.haveItem[3] = 0;
		Cmn.item.haveItem[4] = 0;
		
		for(int i = 0; i < Cmn.ALL_ITEM; i++){
			if(Cmn.itemList[i] > 0){
				Cmn.item.ItemList(i);
				if(Cmn.item.typeMode == Item.TYPE_ITEM){
					//アイテムをひとつ以上持っており、viewModeが一致すればリストに表示する
					Cmn.itemAllList[Cmn.item.haveItem[0]] = i;
					Cmn.itemRecList[Cmn.item.haveItem[1]] = i;
					Cmn.item.haveItem[0]++;
					Cmn.item.haveItem[1]++;
				}else if(Cmn.item.typeMode == Item.TYPE_WEP){
					Cmn.itemAllList[Cmn.item.haveItem[0]] = i;
					Cmn.itemWepList[Cmn.item.haveItem[3]] = i;
					Cmn.item.haveItem[0]++;
					Cmn.item.haveItem[3]++;
				}
				else if(Cmn.item.typeMode == Item.TYPE_GURD){
					Cmn.itemAllList[Cmn.item.haveItem[0]] = i;
					Cmn.itemGudList[Cmn.item.haveItem[4]] = i;
					Cmn.item.haveItem[0]++;
					Cmn.item.haveItem[4]++;
				}
				else if(Cmn.item.typeMode == Item.TYPE_ETC){
					Cmn.itemAllList[Cmn.item.haveItem[0]] = i;
					Cmn.itemEtcList[Cmn.item.haveItem[2]] = i;
					Cmn.item.haveItem[0]++;
					Cmn.item.haveItem[2]++;
				}
			}
		}
	}
	
//-------------------------------------------------------------------------------------------------------
	public void GetItem(int no, int num){
		
		Cmn.itemList[no] += num;
		if(Cmn.itemList[no] > 99){
			Cmn.itemList[no] = 99;
		}
		
		Reflesh();
	}
	
//-------------------------------------------------------------------------------------------------------
	public void LostItem(int no, int num){
		
		Cmn.itemList[no] -= num;
		if(Cmn.itemList[no] < 0){
			Cmn.itemList[no] = 0;
		}
		
		Reflesh();
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 装備しているアイテムをチェックする
	 * @param no チェックするアイテム
	 * @return 装備してる数
	 */
	public static int CheckEqItem(int no){
		int ret = 0;
		
		for(int i = 0; i < Cmn.ptNum; i++){
			if(no == Battle.ptm[i].eWep) ret++;
			if(no == Battle.ptm[i].eArm) ret++;
			if(no == Battle.ptm[i].eGud) ret++;
			if(no == Battle.ptm[i].eHel) ret++;
			if(no == Battle.ptm[i].eAc1) ret++;
			if(no == Battle.ptm[i].eAc2) ret++;
		}
	
		return ret;
		
	}

//-------------------------------------------------------------------------------------------------------
	/**
	 * 移動中の回復処理
	 */
	public static void HealMoveCraete(int act, int heal){
			
		Battle.actedNum = 0;
		Battle.actNum[0] = act;
		
		Battle.DamAct(-heal, 10);
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 移動中のMP回復処理
	 */
	public static void HealMpMoveCraete(int act, int heal){
			
		Battle.ptm[Battle.ptm[act].tage].mp += heal;
			
		if(Battle.ptm[Battle.ptm[0].tage].mp > Battle.ptm[Battle.ptm[0].tage].mmp){
			Battle.ptm[Battle.ptm[0].tage].mp = Battle.ptm[Battle.ptm[0].tage].mmp;
		}
		
	}
	
//-------------------------------------------------------------------------------------------------------
	/**
	 * 移動中の復活処理
	 */
	public static void HealDeadMoveCraete(int act, int heal){
			
		if(Battle.ptm[Battle.ptm[act].tage].live == Cmn.STAT_DEAD){
			Battle.ptm[Battle.ptm[act].tage].live = Cmn.STAT_LIVE;
			Cmn.ptLiveNum++;
		}
		
		Battle.ptm[Battle.ptm[act].tage].hp += Battle.ptm[Battle.ptm[0].tage].mhp * heal / 100;
		
		if(Battle.ptm[Battle.ptm[0].tage].hp > Battle.ptm[Battle.ptm[0].tage].mhp){
			Battle.ptm[Battle.ptm[0].tage].hp = Battle.ptm[Battle.ptm[0].tage].mhp;
		}
		
	}
	
//-------------------------------------------------------------------------------------------------------
	private static void HealCreate(int actNum, int heal){
		//回復発生
		int dy;
		
		Battle.tagX = Battle.ptm[Battle.ptm[actNum].tage].x + Battle.ptW / 2;
		Battle.tagY = Battle.ptm[Battle.ptm[actNum].tage].y + Battle.ptH / 2;
		
		dy = Battle.ptm[Battle.ptm[actNum].tage].y - 10;
		
		Battle.BornDam(Battle.tagX, dy, -heal, 1);
		Battle.DamAct(-heal, 10);
		
	}
	
//-------------------------------------------------------------------------------------------------------
	private static void HealMpCreate(int actNum, int heal){
		//MP回復発生
		int dy;
		
		Battle.tagX = Battle.ptm[Battle.ptm[actNum].tage].x + Battle.ptW / 2;
		Battle.tagY = Battle.ptm[Battle.ptm[actNum].tage].y + Battle.ptH / 2;
		
		dy = Battle.ptm[Battle.ptm[actNum].tage].y - 10;
		
		Battle.BornDam(Battle.tagX, dy, heal, 8);
		
		Battle.ptm[Battle.ptm[actNum].tage].mp += heal;
		
		if(Battle.ptm[Battle.ptm[actNum].tage].mp > Battle.ptm[Battle.ptm[actNum].tage].mmp){
			Battle.ptm[Battle.ptm[actNum].tage].mp = Battle.ptm[Battle.ptm[actNum].tage].mmp;
		}
		
	}
	
//-------------------------------------------------------------------------------------------------------
	private static void HealDeadCreate(int actNum, int heal){
		//復活発生
		int dy;
		
		if(Battle.ptm[Battle.ptm[actNum].tage].live == Cmn.STAT_DEAD){
			Battle.ptm[Battle.ptm[actNum].tage].live = Cmn.STAT_LIVE;
			Cmn.ptLiveNum++;
		}
		
		Battle.tagX = Battle.ptm[Battle.ptm[actNum].tage].x + Battle.ptW / 2;
		Battle.tagY = Battle.ptm[Battle.ptm[actNum].tage].y + Battle.ptH / 2;
		
		dy = Battle.ptm[Battle.ptm[actNum].tage].y - 10;
		
		Battle.BornDam(Battle.tagX, dy, -(Battle.ptm[Battle.ptm[actNum].tage].mhp * heal / 100), 1);
		
		Battle.ptm[Battle.ptm[actNum].tage].hp += Battle.ptm[Battle.ptm[actNum].tage].mhp * heal / 100;
		
		if(Battle.ptm[Battle.ptm[actNum].tage].hp > Battle.ptm[Battle.ptm[actNum].tage].mhp){
			Battle.ptm[Battle.ptm[actNum].tage].hp = Battle.ptm[Battle.ptm[actNum].tage].mhp;
		}
		
	}
	
//-------------------------------------------------------------------------------------------------------
	public static void DrawEfe(int no, int actNum, Graphics g){
	
		int cnt = Battle.efeCnt - 1;
		
		int x;
		int y;
		
		switch(no){
		
		case 1:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 2:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 3:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 4:
			if(cnt == 0){
				HealMpCreate(actNum, Cmn.item.atk);
			}
			break;
		case 5:
			if(cnt == 0){
				HealMpCreate(actNum, Cmn.item.atk);
			}
			break;
		case 6:
			if(cnt == 0){
				HealMpCreate(actNum, Cmn.item.atk);
			}
			break;
		case 10:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 11:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 12:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 13:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 14:
			if(cnt == 0){
				HealCreate(actNum, Cmn.item.atk);
			}
			break;
		case 15:
			if(cnt == 0){
				HealMpCreate(actNum, Cmn.item.atk);
			}
			break;
		case 40:
			if(cnt == 0){
				HealDeadCreate(actNum, Cmn.item.atk);
			}
			break;
		case 41:
			if(cnt == 0){
				HealDeadCreate(actNum, Cmn.item.atk);
			}
			break;
		default:
			
		}
		
	}
	
	
}
import com.nttdocomo.ui.*;
import com.nttdocomo.ui.graphics3d.DrawableObject3D;

public class MainCav extends Canvas{
	
	//private Graphics g;
	private static Cmn c;
	
//-------------------------------------------------------------------------------------------------------
	//コンストラクタ
	public MainCav(){
		
		c = new Cmn(this);
		
		//共通処理にデータを設定
		//Cmn.InitCmn(this);
		
	}

//-------------------------------------------------------------------------------------------------------
	//描画
	public void paint(Graphics g){}

//-------------------------------------------------------------------------------------------------------
	//プログラムの開始
	public void stApp(){
		
		//Cmn.DrawMain();
	
		
	}

 
